{"version":3,"sources":["features/reports/reportsSlice.js","features/reports/protocols.js","features/baer-initialize/bear-initializeSlice.js","app/soilTypes.js","features/baer-initialize/BaerInitializeView.js","features/baer-replication/bear-replicationSlice.js","features/baer-replication/BaerReplicationView.js","features/baer-results/BaerResultsView.js","features/reports/ShowReportsButon.js","features/regression/regression-js.js","features/regression/RegressionTesting.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/baer-results/bear-resultsSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["reportsSlice","createSlice","name","initialState","reports","curId","reducers","newReport","state","action","id","date","payload","protocol","readings","infiltrometerData","addReading","reading","actions","selectReports","Protocols","initialVolume","coordinates","lat","long","soilType","nh0","alpha","infiltrometerRadius","timeInterval","baerInitializeSlice","setInfiltrometerType","infiltrometerType","infiltrometerR","setInitialVolume","BaerInitializeView","dispatch","useDispatch","to","class","for","type","placeholder","value","checked","onClick","Date","toString","baerReplicationSlice","volume","secondsElapsed","setVolume","setSecondsElapsed","selectReading","baerReplication","BaerReplicationView","useSelector","BaerResultsView","ShowReportsButton","console","log","determinationCoefficient","data","results","predictions","observations","forEach","d","i","push","mean","reduce","a","observation","length","ssyy","difference","accum","index","prediction","residual","round","number","precision","factor","Math","methods","linear","options","sum","len","n","run","rise","gradient","intercept","predict","x","points","map","point","equation","r2","string","exponential","denominator","exp","b","coeffA","coeffB","logarithmic","power","polynomial","lhs","rhs","k","order","l","c","j","coefficients","input","matrix","maxrow","abs","tmp","total","gaussianElimination","v","coeff","reverse","RegressionTesting","onChange","event","target","split","alert","App","exact","path","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","baerResultsSlice","store","configureStore","reducer","baerInitialize","baerInitializeReducer","baerReplicationReducer","baerResults","baerResultsReducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAWaA,EAAeC,YAAY,CACtCC,KAAM,cACNC,aAPmB,CACjBC,QAAQ,GACRC,OAAQ,GAOVC,SAAU,CACPC,UAAW,SAACC,EAAOC,GAElBD,EAAMH,QACNG,EAAMJ,QAAN,sBAAoBI,EAAMJ,SAA1B,CACE,CACIM,GAAIF,EAAMH,MACVM,KAAMF,EAAOG,QAAQD,KACrBE,SAAUJ,EAAOG,QAAQC,SACzBC,SAAU,GACVC,kBAAmBN,EAAOG,QAAQG,sBAY1CC,WAAY,SAACR,EAAOC,GAEhBD,EAAMJ,QAAQI,EAAMH,OAAOS,SAA3B,sBACIN,EAAMJ,QAAQI,EAAMH,OAAOS,UAD/B,CAEAL,EAAOG,QAAQK,cAKhB,EAAkCjB,EAAakB,QAAvCX,EAAR,EAAQA,UAAWS,EAAnB,EAAmBA,WACbG,EAAgB,SAACX,GAAD,OAAWA,EAAMJ,SAE/BJ,IAAf,QChDaoB,EACH,gBCCHjB,EAAe,CACdkB,cAAe,EAEfC,YAAa,CACXC,IAAI,EACJC,KAAM,GAGRC,SCCK,CACLC,IAAI,EAEHC,MAAO,GDFRC,oBAAqB,EAErBC,aAAc,IASTC,EAAsB7B,YAAY,CAC3CC,KAAM,iBACRC,eAEAG,SAAU,CAGRyB,qBAAsB,SAACvB,EAAOC,GAEpBA,EAAOG,QAAQoB,kBAGnBxB,EAAMyB,eAAiB,GAK7BC,iBAAkB,SAAC1B,EAAOC,GAExBD,EAAMa,cAAgBZ,EAAOG,QAAQS,kBA0B5BS,IAAf,Q,OEoDeK,EA/GY,WACzB,IAAMC,EAAWC,cAoCjB,OACA,gCAGA,gCACE,0DAGE,cAAC,IAAD,CAAMC,GAAI,kCAAV,oCAEE,wBAIN,sBAAKC,MAAM,iBAAX,UACE,uBAAOC,IAAI,cAAcD,MAAM,0BAA/B,4BACA,qBAAKA,MAAM,YAAX,SACE,uBAAOE,KAAK,SAASF,MAAM,eAAe7B,GAAG,cAAcgC,YAAY,sBAG3E,sBAAKH,MAAM,iBAAX,UACE,uBAAOC,IAAI,eAAeD,MAAM,0BAAhC,qBACA,qBAAKA,MAAM,YAAX,SACE,uBAAOE,KAAK,SAASF,MAAM,eAAe7B,GAAG,eAAegC,YAAY,uBAG5E,sBAAKH,MAAM,iBAAX,UACE,uBAAOC,IAAI,oBAAoBD,MAAM,0BAArC,2BACA,qBAAKA,MAAM,YAAX,SACE,uBAAOE,KAAK,SAASF,MAAM,eAAe7B,GAAG,oBAAoBgC,YAAY,6BAIjF,0BAAUH,MAAM,aAAhB,SACE,sBAAKA,MAAM,MAAX,UACE,wBAAQA,MAAM,+BAAd,uBACA,sBAAKA,MAAM,YAAX,UACE,sBAAKA,MAAM,aAAX,UACE,uBAAOA,MAAM,mBAAmBE,KAAK,QAAQvC,KAAK,aAAaQ,GAAG,YAAYiC,MAAM,UAAUC,SAAO,IACrG,uBAAOL,MAAM,mBAAmBC,IAAI,YAApC,qBAIF,sBAAKD,MAAM,aAAX,UACE,uBAAOA,MAAM,mBAAmBE,KAAK,QAAQvC,KAAK,aAAaQ,GAAG,YAAYiC,MAAM,YACpF,uBAAOJ,MAAM,mBAAmBC,IAAI,YAApC,qBAIF,sBAAKD,MAAM,aAAX,UACE,uBAAOA,MAAM,mBAAmBE,KAAK,QAAQvC,KAAK,aAAaQ,GAAG,gBAAgBiC,MAAM,YACxF,uBAAOJ,MAAM,mBAAmBC,IAAI,gBAApC,0BAIF,sBAAKD,MAAM,aAAX,UACE,uBAAOA,MAAM,mBAAmBE,KAAK,QAAQvC,KAAK,aAAaQ,GAAG,cAAciC,MAAM,YACtF,uBAAOJ,MAAM,mBAAmBC,IAAI,cAApC,+BAOR,qBAAKD,MAAM,iBAAX,SACE,qBAAKA,MAAM,YAAX,SACE,wBAAQE,KAAK,SAASF,MAAM,kBAAkBM,QAlGtB,WAG1BT,EAAS7B,EAAU,CAEjBM,SAAUO,EAEVT,MAAO,IAAImC,MAAQC,WAEnBhC,kBAAmB,MAyFnB,oCCpGOiC,G,MAAuB/C,YAAY,CAC5CC,KAAM,kBACRC,aAPmB,CACnB8C,OAAQ,EACRC,eAAgB,GAOhB5C,SAAU,CAMR6C,UAAW,SAAC3C,EAAOC,GACjBD,EAAMyC,OAASxC,EAAOG,QAAQqC,QAGhCG,kBAAmB,SAAC5C,EAAOC,GACzBD,EAAM0C,eAAiBzC,EAAOG,QAAQsC,oBAQ/BG,EAAgB,SAAC7C,GAAD,OAAWA,EAAM8C,iBAE/BN,IAAf,QCZeO,EAnBa,WAG1B,IAAMtC,EAAUuC,YAAYH,GAEtBjB,EAAWC,cAGjB,OAAQ,gCACN,gCACE,wBAAQQ,QAAS,kBAAIT,EAASpB,EAAW,CAACC,cAA1C,yBADF,2BAME,cAAC,IAAD,CAAMqB,GAAI,8BAAV,iCCRSmB,EATU,WACvB,OAAQ,gCACN,oDAGE,cAAC,IAAD,CAAMnB,GAAI,iCAAV,oCCCC,SAASoB,IACZ,IAAMtD,EAAUoD,YAAYrC,GAE5B,OACA,8BACI,wBAAQ0B,QAAS,kBAAIc,QAAQC,IAAIxD,IAAjC,qC,YCLR,SAASyD,EAAyBC,EAAMC,GACtC,IAAMC,EAAc,GACdC,EAAe,GAErBH,EAAKI,SAAQ,SAACC,EAAGC,GACF,OAATD,EAAE,KACJF,EAAaI,KAAKF,GAClBH,EAAYK,KAAKN,EAAQK,QAI7B,IACME,EADML,EAAaM,QAAO,SAACC,EAAGC,GAAJ,OAAoBD,EAAIC,EAAY,KAAI,GACrDR,EAAaS,OAE1BC,EAAOV,EAAaM,QAAO,SAACC,EAAGC,GACnC,IAAMG,EAAaH,EAAY,GAAKH,EACpC,OAAOE,EAAKI,EAAaA,IACxB,GAQH,OAAO,EANKX,EAAaM,QAAO,SAACM,EAAOJ,EAAaK,GACnD,IAAMC,EAAaf,EAAYc,GACzBE,EAAWP,EAAY,GAAKM,EAAW,GAC7C,OAAOF,EAASG,EAAWA,IAC1B,GAEeL,EA4DpB,SAASM,EAAMC,EAAQC,GACrB,IAAMC,EAAM,SAAG,GAAMD,GACrB,OAAOE,KAAKJ,MAAMC,EAASE,GAAUA,EAQhC,IAAME,EAAU,CACrBC,OADqB,SACdzB,EAAM0B,GAIX,IAHA,IAAMC,EAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACrBC,EAAM,EAEDC,EAAI,EAAGA,EAAI7B,EAAKY,OAAQiB,IACZ,OAAf7B,EAAK6B,GAAG,KACVD,IACAD,EAAI,IAAM3B,EAAK6B,GAAG,GAClBF,EAAI,IAAM3B,EAAK6B,GAAG,GAClBF,EAAI,IAAM3B,EAAK6B,GAAG,GAAK7B,EAAK6B,GAAG,GAC/BF,EAAI,IAAM3B,EAAK6B,GAAG,GAAK7B,EAAK6B,GAAG,GAC/BF,EAAI,IAAM3B,EAAK6B,GAAG,GAAK7B,EAAK6B,GAAG,IAInC,IAAMC,EAAQF,EAAMD,EAAI,GAAOA,EAAI,GAAKA,EAAI,GACtCI,EAASH,EAAMD,EAAI,GAAOA,EAAI,GAAKA,EAAI,GACvCK,EAAmB,IAARF,EAAY,EAAIX,EAAMY,EAAOD,EAAKJ,EAAQL,WACrDY,EAAYd,EAAOQ,EAAI,GAAKC,EAASI,EAAWL,EAAI,GAAMC,EAAMF,EAAQL,WAExEa,EAAU,SAAAC,GAAC,MAAK,CACpBhB,EAAMgB,EAAGT,EAAQL,WACjBF,EAAOa,EAAWG,EAAKF,EAAWP,EAAQL,aAGtCe,EAASpC,EAAKqC,KAAI,SAAAC,GAAK,OAAIJ,EAAQI,EAAM,OAE/C,MAAO,CACLF,SACAF,UACAK,SAAU,CAACP,EAAUC,GACrBO,GAAIrB,EAAMpB,EAAyBC,EAAMoC,GAASV,EAAQL,WAC1DoB,OAAsB,IAAdR,EAAA,cAAyBD,EAAzB,mBAA8CA,EAA9C,eAA6DC,KAIzES,YArCqB,SAqCT1C,EAAM0B,GAGhB,IAFA,IAAMC,EAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAEnBE,EAAI,EAAGA,EAAI7B,EAAKY,OAAQiB,IACZ,OAAf7B,EAAK6B,GAAG,KACVF,EAAI,IAAM3B,EAAK6B,GAAG,GAClBF,EAAI,IAAM3B,EAAK6B,GAAG,GAClBF,EAAI,IAAM3B,EAAK6B,GAAG,GAAK7B,EAAK6B,GAAG,GAAK7B,EAAK6B,GAAG,GAC5CF,EAAI,IAAM3B,EAAK6B,GAAG,GAAKN,KAAKzB,IAAIE,EAAK6B,GAAG,IACxCF,EAAI,IAAM3B,EAAK6B,GAAG,GAAK7B,EAAK6B,GAAG,GAAKN,KAAKzB,IAAIE,EAAK6B,GAAG,IACrDF,EAAI,IAAM3B,EAAK6B,GAAG,GAAK7B,EAAK6B,GAAG,IAInC,IAAMc,EAAgBhB,EAAI,GAAKA,EAAI,GAAOA,EAAI,GAAKA,EAAI,GACjDjB,EAAIa,KAAKqB,KAAMjB,EAAI,GAAKA,EAAI,GAAOA,EAAI,GAAKA,EAAI,IAAOgB,GACvDE,GAAMlB,EAAI,GAAKA,EAAI,GAAOA,EAAI,GAAKA,EAAI,IAAOgB,EAC9CG,EAAS3B,EAAMT,EAAGgB,EAAQL,WAC1B0B,EAAS5B,EAAM0B,EAAGnB,EAAQL,WAC1Ba,EAAU,SAAAC,GAAC,MAAK,CACpBhB,EAAMgB,EAAGT,EAAQL,WACjBF,EAAM2B,EAASvB,KAAKqB,IAAIG,EAASZ,GAAIT,EAAQL,aAGzCe,EAASpC,EAAKqC,KAAI,SAAAC,GAAK,OAAIJ,EAAQI,EAAM,OAE/C,MAAO,CACLF,SACAF,UACAK,SAAU,CAACO,EAAQC,GACnBN,OAAO,OAAD,OAASK,EAAT,cAAqBC,EAArB,MACNP,GAAIrB,EAAMpB,EAAyBC,EAAMoC,GAASV,EAAQL,aAI9D2B,YAxEqB,SAwEThD,EAAM0B,GAIhB,IAHA,IAAMC,EAAM,CAAC,EAAG,EAAG,EAAG,GAChBC,EAAM5B,EAAKY,OAERiB,EAAI,EAAGA,EAAID,EAAKC,IACJ,OAAf7B,EAAK6B,GAAG,KACVF,EAAI,IAAMJ,KAAKzB,IAAIE,EAAK6B,GAAG,IAC3BF,EAAI,IAAM3B,EAAK6B,GAAG,GAAKN,KAAKzB,IAAIE,EAAK6B,GAAG,IACxCF,EAAI,IAAM3B,EAAK6B,GAAG,GAClBF,EAAI,IAAJ,SAAWJ,KAAKzB,IAAIE,EAAK6B,GAAG,IAAO,IAIvC,IACMkB,EAAS5B,GADHS,EAAMD,EAAI,GAAOA,EAAI,GAAKA,EAAI,KAASC,EAAMD,EAAI,GAAOA,EAAI,GAAKA,EAAI,IACzDD,EAAQL,WAC1ByB,EAAS3B,GAAOQ,EAAI,GAAMoB,EAASpB,EAAI,IAAOC,EAAKF,EAAQL,WAE3Da,EAAU,SAAAC,GAAC,MAAK,CACpBhB,EAAMgB,EAAGT,EAAQL,WACjBF,EAAMA,EAAM2B,EAAUC,EAASxB,KAAKzB,IAAIqC,GAAKT,EAAQL,WAAYK,EAAQL,aAGrEe,EAASpC,EAAKqC,KAAI,SAAAC,GAAK,OAAIJ,EAAQI,EAAM,OAE/C,MAAO,CACLF,SACAF,UACAK,SAAU,CAACO,EAAQC,GACnBN,OAAO,OAAD,OAASK,EAAT,cAAqBC,EAArB,UACNP,GAAIrB,EAAMpB,EAAyBC,EAAMoC,GAASV,EAAQL,aAI9D4B,MAzGqB,SAyGfjD,EAAM0B,GAIV,IAHA,IAAMC,EAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBC,EAAM5B,EAAKY,OAERiB,EAAI,EAAGA,EAAID,EAAKC,IACJ,OAAf7B,EAAK6B,GAAG,KACVF,EAAI,IAAMJ,KAAKzB,IAAIE,EAAK6B,GAAG,IAC3BF,EAAI,IAAMJ,KAAKzB,IAAIE,EAAK6B,GAAG,IAAMN,KAAKzB,IAAIE,EAAK6B,GAAG,IAClDF,EAAI,IAAMJ,KAAKzB,IAAIE,EAAK6B,GAAG,IAC3BF,EAAI,IAAJ,SAAWJ,KAAKzB,IAAIE,EAAK6B,GAAG,IAAO,IAIvC,IAAMgB,GAAMjB,EAAMD,EAAI,GAAOA,EAAI,GAAKA,EAAI,KAASC,EAAMD,EAAI,GAAX,SAAkBA,EAAI,GAAM,IACxEjB,GAAMiB,EAAI,GAAMkB,EAAIlB,EAAI,IAAOC,EAC/BkB,EAAS3B,EAAMI,KAAKqB,IAAIlC,GAAIgB,EAAQL,WACpC0B,EAAS5B,EAAM0B,EAAGnB,EAAQL,WAE1Ba,EAAU,SAAAC,GAAC,MAAK,CACpBhB,EAAMgB,EAAGT,EAAQL,WACjBF,EAAMA,EAAM2B,EAAM,SAAIX,EAAKY,GAASrB,EAAQL,WAAYK,EAAQL,aAG5De,EAASpC,EAAKqC,KAAI,SAAAC,GAAK,OAAIJ,EAAQI,EAAM,OAE/C,MAAO,CACLF,SACAF,UACAK,SAAU,CAACO,EAAQC,GACnBN,OAAO,OAAD,OAASK,EAAT,aAAoBC,GAC1BP,GAAIrB,EAAMpB,EAAyBC,EAAMoC,GAASV,EAAQL,aAI9D6B,WA3IqB,SA2IVlD,EAAM0B,GASf,IARA,IAAMyB,EAAM,GACNC,EAAM,GACR1C,EAAI,EACJmC,EAAI,EAEFjB,EAAM5B,EAAKY,OACXyC,EAAI3B,EAAQ4B,MAAQ,EAEjBhD,EAAI,EAAGA,EAAI+C,EAAG/C,IAAK,CAC1B,IAAK,IAAIiD,EAAI,EAAGA,EAAI3B,EAAK2B,IACJ,OAAfvD,EAAKuD,GAAG,KACV7C,GAAK,SAACV,EAAKuD,GAAG,GAAMjD,GAAKN,EAAKuD,GAAG,IAIrCJ,EAAI5C,KAAKG,GACTA,EAAI,EAGJ,IADA,IAAM8C,EAAI,GACDC,EAAI,EAAGA,EAAIJ,EAAGI,IAAK,CAC1B,IAAK,IAAIF,EAAI,EAAGA,EAAI3B,EAAK2B,IACJ,OAAfvD,EAAKuD,GAAG,KACVV,GAAC,SAAI7C,EAAKuD,GAAG,GAAOjD,EAAImD,IAG5BD,EAAEjD,KAAKsC,GACPA,EAAI,EAENO,EAAI7C,KAAKiD,GAEXJ,EAAI7C,KAAK4C,GAcT,IAZA,IAAMO,EAAY,CAAI,GAAJ,mBAtOtB,SAA6BC,EAAOL,GAKlC,IAJA,IAAMM,EAASD,EACT9B,EAAI8B,EAAM/C,OAAS,EACnB8C,EAAe,CAACJ,GAEbhD,EAAI,EAAGA,EAAIuB,EAAGvB,IAAK,CAE1B,IADA,IAAIuD,EAASvD,EACJmD,EAAInD,EAAI,EAAGmD,EAAI5B,EAAG4B,IACrBlC,KAAKuC,IAAIF,EAAOtD,GAAGmD,IAAMlC,KAAKuC,IAAIF,EAAOtD,GAAGuD,MAC9CA,EAASJ,GAIb,IAAK,IAAIJ,EAAI/C,EAAG+C,EAAIxB,EAAI,EAAGwB,IAAK,CAC9B,IAAMU,EAAMH,EAAOP,GAAG/C,GACtBsD,EAAOP,GAAG/C,GAAKsD,EAAOP,GAAGQ,GACzBD,EAAOP,GAAGQ,GAAUE,EAGtB,IAAK,IAAIN,EAAInD,EAAI,EAAGmD,EAAI5B,EAAG4B,IACzB,IAAK,IAAIJ,EAAIxB,EAAGwB,GAAK/C,EAAG+C,IACtBO,EAAOP,GAAGI,IAAOG,EAAOP,GAAG/C,GAAKsD,EAAOtD,GAAGmD,GAAMG,EAAOtD,GAAGA,GAKhE,IAAK,IAAImD,EAAI5B,EAAI,EAAG4B,GAAK,EAAGA,IAAK,CAE/B,IADA,IAAIO,EAAQ,EACHX,EAAII,EAAI,EAAGJ,EAAIxB,EAAGwB,IACzBW,GAASJ,EAAOP,GAAGI,GAAKC,EAAaL,GAGvCK,EAAaD,IAAMG,EAAO/B,GAAG4B,GAAKO,GAASJ,EAAOH,GAAGA,GAGvD,OAAOC,EAmMsBO,CAAoBb,EAAKC,GAAGhB,KAAI,SAAA6B,GAAC,OAAI/C,EAAM+C,EAAGxC,EAAQL,gBAC3Ea,EAAU,SAAAC,GAAC,MAAK,CACpBhB,EAAMgB,EAAGT,EAAQL,WACjBF,EACEuC,EAAajD,QAAO,SAACkB,EAAKwC,EAAOlB,GAAb,OAAuBtB,EAAOwC,EAAK,SAAIhC,EAAKc,KAAS,GACzEvB,EAAQL,aAINe,EAASpC,EAAKqC,KAAI,SAAAC,GAAK,OAAIJ,EAAQI,EAAM,OAE3CG,EAAS,OACJnC,EAAIoD,EAAa9C,OAAS,EAAGN,GAAK,EAAGA,IAE1CmC,GADEnC,EAAI,EACA,UAAOoD,EAAapD,GAApB,aAA2BA,EAA3B,OACS,IAANA,EACH,UAAOoD,EAAapD,GAApB,QAEIoD,EAAapD,GAI3B,MAAO,CACLmC,SACAL,SACAF,UACAK,SAAU,YAAImB,GAAcU,UAC5B5B,GAAIrB,EAAMpB,EAAyBC,EAAMoC,GAASV,EAAQL,cC/SzD,SAASgD,IAKd,IAAI3H,EAAQ,CACRmC,MAAO,GACPoB,QAAS,IAaX,OACI,gCAGA,+BACA,kDACgBvD,EAAMmC,MACpB,uBAAOF,KAAK,OAAO2F,SAzBzB,SAAsBC,GACtB7H,EAAMmC,MAAQ0F,EAAMC,OAAO3F,cA4BnB,8BACI,wBAAQE,QAvBtB,SAAsBwF,GAGpB,IADA,IAAInC,EAAQ1F,EAAMmC,MAAM4F,MAAM,KACrBnE,EAAI,EAAGA,EAAI8B,EAAOxB,OAAQN,IAC/B8B,EAAO9B,GAAK8B,EAAO9B,GAAGmE,MAAM,KAEhC/H,EAAMuD,QAAUuB,EAAQ0B,WAAWd,EAAQ,CAAEkB,MAAO,EAAGjC,UAAW,KAElEqD,MAAM,0BAA4BtC,EAAS,wBAA0B1F,EAAMuD,QAAQwC,QACnF5C,QAAQC,IAAIpD,EAAMuD,UAcN,wCCzBhB,IA6Be0E,EA7BF,WACX,OACE,eAAC,IAAD,WACM,cAAC/E,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgF,OAAK,EAACC,KAAM,kBAAnB,SACE,8BACE,cAAC,IAAD,CAAMrG,GAAG,iCAAT,sCAGJ,cAAC,IAAD,CAAOoG,OAAK,EAACC,KAAM,iCAAnB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAM,kCAAnB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAM,8BAAnB,SACE,cAAC,EAAD,MAED,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAM,oCAAnB,SACC,cAACR,EAAD,a,yBC5BP,SAASS,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEjF,KAAM+E,MAAW,QCAhD,IAUaI,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAOL,GAAP,eAAArE,EAAA,sEACyBoE,EAAWC,GADpC,cACQM,EADR,yBAGSA,EAASrF,MAHlB,2CAF4C,uDASjCsF,EAAenJ,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBwC,MAAO,EACP0G,OAAQ,QAqBR/I,SAAU,CACRgJ,UAAW,SAAC9I,GAKVA,EAAMmC,OAAS,GAEjB4G,UAAW,SAAC/I,GACVA,EAAMmC,OAAS,GAGjB6G,kBAAmB,SAAChJ,EAAOC,GACzBD,EAAMmC,OAASlC,EAAOG,UAK1B6I,cAAe,SAACC,GACdA,EACGC,QAAQV,EAAeW,SAAS,SAACpJ,GAChCA,EAAM6I,OAAS,aAEhBM,QAAQV,EAAeY,WAAW,SAACrJ,EAAOC,GACzCD,EAAM6I,OAAS,OACf7I,EAAMmC,OAASlC,EAAOG,cAKvB,EAAoDwI,EAAalI,QAgBzDkI,GAhBR,EAAQE,UAAR,EAAmBC,UAAnB,EAA8BC,kBAgBtBJ,EAAf,SCxDeU,EANiB7J,YAAY,CACxCC,KAAM,cACRC,aARmB,GAUnBG,SAAU,KAEZ,QCTayJ,EAAQC,YAAe,CAClCC,QAAS,CACPC,eAAgBC,EAChB7G,gBAAiB8G,EACjBC,YAAaC,EACbC,QAASC,EACTpK,QAASJ,KCDOyK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUjB,MAAOA,EAAjB,SAEE,cAAC,EAAD,QAGJkB,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.179214f8.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:[],\r\n    curId: -1\r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId++;\r\n      state.reports = [...state.reports,(\r\n        {\r\n            id: state.curId,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerData: action.payload.infiltrometerData\r\n        }\r\n      )];\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action)=>{\r\n      //add the reading to the end of the list of readings\r\n        state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings, \r\n        action.payload.reading]; \r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports;\r\n\r\nexport default reportsSlice.reducer;","//Contains the reference to all protocol names\r\nexport const Protocols = {\r\n    Baer: \"BAER_PROTOCOL\",\r\n    Standard: \"TIME_PROTOCOL\",\r\n    Experimental: \"VOLUME_PROTOCOL \"\r\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { soilTypes } from '../../app/soilTypes';\r\n\r\n const initialState = {  \r\n        initialVolume: 0,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: soilTypes.default,\r\n        \r\n        infiltrometerRadius: 0,\r\n        \r\n        timeInterval: 30\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n    name: 'baerInitialize',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    //Update the appropritate values to the provided infiltrometer type  \r\n    \r\n    setInfiltrometerType: (state, action) => {\r\n      \r\n      switch (action.payload.infiltrometerType){\r\n        default:\r\n          //set the radius to 0\r\n          state.infiltrometerR = 0;\r\n          break;\r\n\r\n      }\r\n    },\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload.initialVolume;\r\n    \r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\nexport const selectInfiltrometerType = (state) => state.bearInitialize.infiltrometerType;\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.bearInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.bearInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.bearInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.bearInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.bearInitialize;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","//contains the single reference to the soil types to be used in reports under key \"soilType\"\r\nexport const soilTypes = {\r\n    clay: {nh0:0,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0 /* positive number,*/},\r\n    clayLoam:  {\r\n        nh0:0,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0 /* positive number,*/},\r\n    loam:  {nh0:0,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0 /* positive number,*/},\r\n    default: {\r\n        nh0:0,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0 /* positive number,*/\r\n    }\r\n}","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { newReport } from '../reports/reportsSlice';\r\nimport {Protocols} from '../reports/protocols'\r\nimport { selectInitialVolume, selectInfiltrometerData,\r\n  selectInfiltrometerRadius, selectInfiltrometerSuction } from './bear-initializeSlice';\r\nimport { Redirect } from 'react-router';\r\n\r\nconst BaerInitializeView = () => {\r\n  const dispatch = useDispatch();\r\n  /**\r\n   * Adds a new Baer prototocol report using the reports slice\r\n   */\r\n  const generateNewBaerReport=()=>{\r\n\r\n\r\n    dispatch(newReport({\r\n     \r\n      protocol: Protocols.Baer,\r\n      //new Date() initializes to the current Date\r\n      date: (new Date()).toString(),\r\n     \r\n      infiltrometerData: 0\r\n    })\r\n    \r\n    );\r\n  }\r\n  /**Makes sure the current initial volume in the store is valid\r\n   * @returns true if valid, false if not valid\r\n   * @param {\\The volume to check for validation} volume \r\n   */\r\n  function ValidateInitialVolume(){\r\n      let volume = useSelector(selectInitialVolume);\r\n      return (volume > 0);\r\n  }\r\n  /**\r\n   * @returns true if valid, false if not valid\r\n   * @param {the infitrometerType to check for validation} infiltrometerType \r\n   */\r\n  function ValidateInfiltromterType(infiltrometerType){\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n  <div>\r\n\r\n \r\n  <div>\r\n    <h1>\r\n      Initialize Baer Protocol\r\n    </h1>\r\n      <Link to =\"/Infiltrometer/baer-replication\">To Replication View</Link>\r\n    </div>\r\n        <div>\r\n\r\n    </div>\r\n\r\n  <div class=\"form-group row\">\r\n    <label for=\"inputVolume\" class=\"col-sm-2 col-form-label\">Initial Volume</label>\r\n    <div class=\"col-sm-10\">\r\n      <input type=\"number\" class=\"form-control\" id=\"inputVolume\" placeholder=\"Enter Volume\"/>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group row\">\r\n    <label for=\"inputSuction\" class=\"col-sm-2 col-form-label\">Suction</label>\r\n    <div class=\"col-sm-10\">\r\n      <input type=\"number\" class=\"form-control\" id=\"inputSuction\" placeholder=\"Enter Suction\"/>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group row\">\r\n    <label for=\"inputTimeInterval\" class=\"col-sm-2 col-form-label\">Time Interval</label>\r\n    <div class=\"col-sm-10\">\r\n      <input type=\"number\" class=\"form-control\" id=\"inputTimeInterval\" placeholder=\"Enter Time Interval\"/>\r\n    </div>\r\n  </div>\r\n  \r\n  <fieldset class=\"form-group\">\r\n    <div class=\"row\">\r\n      <legend class=\"col-form-label col-sm-2 pt-0\">Soil Type</legend>\r\n      <div class=\"col-sm-10\">\r\n        <div class=\"form-check\">\r\n          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"clayRadio\" value=\"option1\" checked/>\r\n          <label class=\"form-check-label\" for=\"clayRadio\">\r\n            Clay\r\n          </label>\r\n        </div>\r\n        <div class=\"form-check\">\r\n          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"loamRadio\" value=\"option2\"/>\r\n          <label class=\"form-check-label\" for=\"loamRadio\">\r\n            Loam\r\n          </label>\r\n        </div>\r\n        <div class=\"form-check\">\r\n          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"clayLoamRadio\" value=\"option3\"/>\r\n          <label class=\"form-check-label\" for=\"clayLoamRadio\">\r\n            Clay Loam\r\n          </label>\r\n        </div>\r\n        <div class=\"form-check\">\r\n          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"customRadio\" value=\"option4\"/>\r\n          <label class=\"form-check-label\" for=\"customRadio\">\r\n            Custom\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </fieldset>\r\n  <div class=\"form-group row\">\r\n    <div class=\"col-sm-10\">\r\n      <button type=\"submit\" class=\"btn btn-primary\" onClick = {generateNewBaerReport}>Start Protocol</button>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  </div>\r\n     );\r\n}\r\nexport default BaerInitializeView;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {TimerStateValues} from 'react-compound-timer'\r\n\r\n\r\n/**\r\n * Initialize all the data associated with a reading....\r\n * Dispatch the addReading action from the reportsSlice after validating the reading\r\n */\r\nconst initialState = {\r\n  volume: 0,\r\n  secondsElapsed: 0\r\n};\r\n\r\nexport const baerReplicationSlice = createSlice({\r\n    name: 'baerReplication',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    /**\r\n     *Sets the current volume in the reading \r\n     * @param {the current state} state \r\n     * @param {must contain a volume payload} action \r\n     */\r\n    setVolume: (state, action)=>{\r\n      state.volume = action.payload.volume;\r\n    }\r\n    ,\r\n    setSecondsElapsed: (state, action)=>{\r\n      state.secondsElapsed = action.payload.secondsElapsed;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n\r\n\r\nexport const selectReading = (state) => state.baerReplication;\r\n\r\nexport default baerReplicationSlice.reducer;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectReading } from './bear-replicationSlice';\r\nimport {addReading} from '../reports/reportsSlice';\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const reading = useSelector(selectReading);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  return (<div>\r\n    <div>\r\n      <button onClick={()=>dispatch(addReading({reading}))}>\r\n        Add Reading\r\n      </button>\r\n      Bear Replication View\r\n    </div>\r\n      <Link to =\"/Infiltrometer/baer-results\">To Results View</Link>\r\n    \r\n    </div>);\r\n}\r\nexport default BaerReplicationView;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\n\r\n\r\nconst  BaerResultsView = ()=> {\r\n  return (<div>\r\n    <div>\r\n      Bear Results View\r\n    </div>\r\n      <Link to =\"/Infiltrometer/baer-initialize\">To Initialize View</Link>\r\n    \r\n    </div>);\r\n}\r\nexport default BaerResultsView;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {selectReports\r\n} from './reportsSlice';\r\n\r\nlet reports;\r\nfunction PrintReports(){\r\n  reports = useSelector(selectReports)\r\n  console.log(reports);\r\n}\r\n\r\nexport function ShowReportsButton() {\r\n    const reports = useSelector(selectReports);\r\n\r\n    return(\r\n    <div>\r\n        <button onClick={()=>console.log(reports)}>\r\n            Show Reports in Store\r\n        </button>\r\n    </div>\r\n\r\n  );\r\n\r\n}","const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","import React from 'react';\r\nimport {methods} from '../regression/regression-js';\r\nexport function RegressionTesting(){\r\n\r\n    function handleChange(event) {\r\n    state.value = event.target.value;\r\n  }\r\n  let state = {\r\n      value: \"\",\r\n      results: {}\r\n  };\r\n  function handleSubmit(event) {\r\n    //create the data values\r\n    let points= state.value.split(\" \");\r\n    for (let i = 0; i < points.length; i ++){\r\n        points[i] = points[i].split(',');\r\n    }\r\n    state.results = methods.polynomial(points, { order: 2, precision: 15 });\r\n\r\n    alert('Points were submitted: ' + points + \"\\nRegression output: \" + state.results.string);\r\n    console.log(state.results);\r\n  }\r\n    return(\r\n        <div>\r\n\r\n        \r\n        <form>\r\n        <label>\r\n          Data Points: {state.value}\r\n          <input type=\"text\" onChange={handleChange}></input>\r\n        </label>\r\n        \r\n        </form>\r\n            <div>\r\n                <button onClick = {handleSubmit}>\r\n                    Submit For Regression\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer-results/BaerResultsView';\r\nimport { ShowReportsButton } from './features/reports/ShowReportsButon';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\n\r\nconst  App = ()=> {\r\n  return (\r\n    <BrowserRouter>\r\n          <ShowReportsButton/>\r\n          <Switch>\r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <Link to=\"/Infiltrometer/baer-initialize\">Baer Initialize View</Link>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n\r\n\r\n\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {}\r\n});\r\nexport default baerResultsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    baerInitialize: baerInitializeReducer,\r\n    baerReplication: baerReplicationReducer,\r\n    baerResults: baerResultsReducer,\r\n    counter: counterReducer,\r\n    reports: reportsSlice\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n       \r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}