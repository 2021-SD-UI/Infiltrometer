{"version":3,"sources":["features/reports/reportsSlice.js","features/reports/protocols.js","features/baer-initialize/BaerInitializeView.js","features/baer-replication/BaerReplicationView.js","features/baer-results/BaerResultsView.js","features/reports/ShowReportsButon.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/baer-initialize/bear-initializeSlice.js","features/baer-replication/bear-replicationSlice.js","features/baer-results/bear-resultsSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["reportsSlice","createSlice","name","initialState","reports","curId","reducers","newReport","state","action","push","id","date","payload","protocol","readings","infiltrometerType","addReading","reading","actions","selectReports","Protocols","BaerInitializeView","dispatch","useDispatch","onClick","Date","toString","to","BaerReplicationView","BaerResultsView","ShowReportsButton","useSelector","console","log","App","exact","path","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","value","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","baerInitializeSlice","baerReplicationSlice","baerResultsSlice","store","configureStore","reducer","baerInitialize","baerInitializeReducer","baerReplication","baerReplicationReducer","baerResults","baerResultsReducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb4fba34.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:[],\r\n    curId: 0\r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.reports.push(\r\n        {\r\n            id: state.curId++,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerType: action.payload.infiltrometerType\r\n        }\r\n      );\r\n\r\n    },\r\n    addReading: (state, action)=>{\r\n        state.reports[action.payload.id].readings.push(action.payload.reading); \r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports;\r\n\r\nexport default reportsSlice.reducer;","//Contains the reference to all protocol names\r\nexport const Protocols = {\r\n    Baer: \"BAER_PROTOCOL\",\r\n    Standard: \"TIME_PROTOCOL\",\r\n    Experimental: \"VOLUME_PROTOCOL \"\r\n}","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { newReport } from '../reports/reportsSlice';\r\nimport {Protocols} from '../reports/protocols'\r\nconst BaerInitializeView = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  //adds a new Baer report using the reports slice\r\n  const generateNewBaerReport=()=>{\r\n    dispatch(newReport({\r\n      protocol: Protocols.Baer,\r\n      date: (new Date()).toString(),\r\n      infiltrometerType: {}\r\n    }));\r\n  }\r\n\r\n\r\n  return (<div>\r\n    <button onClick = {generateNewBaerReport}>\r\n      Add new Baer Report\r\n    </button>\r\n    <div>\r\n      Bear Initialize View\r\n    </div>\r\n      <Link to =\"/Infiltrometer/baer-replication\">To Replication View</Link>\r\n      \r\n    </div>);\r\n}\r\nexport default BaerInitializeView;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\n\r\nconst BaerReplicationView = () => {\r\n  return (<div>\r\n    <div>\r\n      Bear Replication View\r\n    </div>\r\n      <Link to =\"/Infiltrometer/baer-results\">To Results View</Link>\r\n    \r\n    </div>);\r\n}\r\nexport default BaerReplicationView;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\n\r\n\r\nconst  BaerResultsView = ()=> {\r\n  return (<div>\r\n    <div>\r\n      Bear Results View\r\n    </div>\r\n      <Link to =\"/Infiltrometer/baer-initialize\">To Initialize View</Link>\r\n    \r\n    </div>);\r\n}\r\nexport default BaerResultsView;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {selectReports\r\n} from './reportsSlice';\r\n\r\nlet reports;\r\nfunction PrintReports(){\r\n  reports = useSelector(selectReports)\r\n  console.log(reports);\r\n}\r\n\r\nexport function ShowReportsButton() {\r\n    const reports = useSelector(selectReports);\r\n\r\n    return(\r\n    <div>\r\n        <button onClick={()=>console.log(reports)}>\r\n            Show Reports in Store\r\n        </button>\r\n    </div>\r\n\r\n  );\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer-results/BaerResultsView';\r\nimport { ShowReportsButton } from './features/reports/ShowReportsButon';\r\nconst  App = ()=> {\r\n  return (\r\n    <BrowserRouter>\r\n          <ShowReportsButton/>\r\n          <Switch>\r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <Link to=\"/Infiltrometer/baer-initialize\">Baer Initialize View</Link>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = {};\r\n\r\nexport const baerInitializeSlice = createSlice({\r\n    name: 'baerInitialize',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n  }\r\n});\r\nexport default baerInitializeSlice.reducer;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {TimerStateValues} from 'react-compound-timer'\r\nconst initialState = {};\r\n\r\nexport const baerReplicationSlice = createSlice({\r\n    name: 'baerReplication',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {}\r\n});\r\nexport default baerReplicationSlice.reducer;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {}\r\n});\r\nexport default baerResultsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    baerInitialize: baerInitializeReducer,\r\n    baerReplication: baerReplicationReducer,\r\n    baerResults: baerResultsReducer,\r\n    counter: counterReducer,\r\n    reports: reportsSlice\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n       \r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}