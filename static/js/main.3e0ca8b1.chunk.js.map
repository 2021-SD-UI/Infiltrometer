{"version":3,"sources":["features/reports/reportsSlice.js","features/reports/protocols.js","app/soilTypes.js","features/baer/baer-initialize/bear-initializeSlice.js","features/baer/baer-replication/bear-replicationSlice.js","features/page-redirection/redirector-slice.js","features/baer/baer-initialize/BaerInitializeView.js","features/baer/baer-results/table.js","features/baer/baer-replication/BaerReplicationView.js","features/baer/baer-results/BaerResultsView.js","features/regression/regression-js.js","features/regression/RegressionTesting.js","features/page-redirection/Redirector.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/baer/baer-results/bear-resultsSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["reportsSlice","createSlice","name","initialState","reports","curId","reducers","newReport","state","action","id","date","payload","protocol","readings","infiltrometerData","addReading","actions","selectReports","selectCurId","selectCurReadingID","length","Protocols","soilTypes","clay","nh0","alpha","clayLoam","loam","sand","sandyClay","loamySand","sandyClayLoam","sandyLoam","silt","siltLoam","siltyClay","siltyClayLoam","initialVolume","coordinates","lat","long","soilType","infiltrometerRadius","timeInterval","baerInitializeSlice","setInfiltrometerType","infiltrometerType","infiltrometerR","setInitialVolume","setInfiltrometerSuction","infiltrometerSuction","setTimeInterval","setSoilType","setInfiltrometerData","selectSoilType","baerInitialize","selectInitialVolume","selectInfiltrometerData","selectTimeInterval","baerReplicationSlice","volume","secondsElapsed","lastVolume","setVolume","Number","setSecondsElapsed","setLastVolume","selectLastVolume","baerReplication","redirectSlice","page","setPage","selectPage","redirector","renderField","input","label","type","meta","touched","error","placeholder","formSelector","formValueSelector","connect","soilTypeSelected","reduxForm","form","validate","values","errors","suction","radius","onSubmit","dispatch","default","Date","toString","props","useSelector","change","handleSubmit","pristine","reset","submitting","handleFormChange","soilValues","useDispatch","event","value","class","for","Field","component","onChange","selected","disabled","onClick","Table","curReport","useState","filterReadings","findRate","i","readingsArr","Time","Volume","Rate","Object","keys","map","key","index","console","log","toUpperCase","report","renderTime","remainingTime","className","BaerReplicationView","maxVolume","Math","min","timerIsPlaying","setState","curID","getVolumeReading","playing","volumeReading","prompt","window","confirm","NaN","isPlaying","duration","colors","onComplete","BaerResultsView","to","determinationCoefficient","data","results","predictions","observations","forEach","d","push","mean","reduce","a","observation","ssyy","difference","accum","prediction","residual","round","number","precision","factor","methods","linear","options","sum","len","n","run","rise","gradient","intercept","predict","x","points","point","equation","r2","string","exponential","denominator","exp","b","coeffA","coeffB","logarithmic","power","polynomial","lhs","rhs","k","order","l","c","j","coefficients","matrix","maxrow","abs","tmp","total","gaussianElimination","v","coeff","reverse","RegressionTesting","target","split","alert","Redirector","curPage","useLocation","pathname","App","exact","path","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","baerResultsSlice","store","configureStore","reducer","baerInitializeReducer","baerReplicationReducer","baerResults","baerResultsReducer","counter","counterReducer","reduxFormReducer","redirectReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e0ca8b1.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:[],\r\n    curId: -1\r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId++;\r\n      state.reports = [...state.reports,(\r\n        {\r\n            id: state.curId,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerData: action.payload.infiltrometerData\r\n        }\r\n      )];\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action)=>{\r\n      //add the reading to the end of the list of readings\r\n        state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings, \r\n        action.payload]; \r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport default reportsSlice.reducer;","//Contains the reference to all protocol names\r\nexport const Protocols = {\r\n    Baer: \"BAER_PROTOCOL\",\r\n    Standard: \"TIME_PROTOCOL\",\r\n    Experimental: \"VOLUME_PROTOCOL \"\r\n}","//contains the single reference to the soil types to be used in reports under key \"soilType\"\r\nexport const soilTypes = {\r\n    clay: {nh0:1.09,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0.005 /* positive number,*/},\r\n    clayLoam:  {\r\n        nh0:1.31,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 1.31 /* positive number,*/},\r\n    loam:  {nh0:1.56,\r\n         /* positive number, of n/h0*/ \r\n         alpha: .036 /* positive number,*/},\r\n     sand: {\r\n          alpha: 0.145,\r\n          nh0: 2.68\r\n     },\r\n     sandyClay:{\r\n          alpha: 0.027,\r\n          nh0: 1.23\r\n     },\r\n     loamySand:{\r\n          alpha: 0.124,\r\n          nh0: 2.28\r\n     },\r\n     sandyClayLoam:{\r\n          alpha: .059,\r\n          nh0: 1.48\r\n     },\r\n     sandyLoam:{\r\n          alpha: 0.075,\r\n          nh0: 1.89\r\n     },\r\n     silt:{\r\n          alpha: 0.016,\r\n          nh0: 1.37\r\n     },\r\n     siltLoam:{\r\n          alpha: .02,\r\n          nh0: 1.41\r\n     },\r\n     siltyClay:{\r\n          alpha: 0.005,\r\n          nh0: 1.09\r\n     },\r\n     siltyClayLoam:{\r\n          alpha: 0.01,\r\n          nh0: 1.23\r\n     }\r\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\n\r\n\r\n const initialState = {  \r\n        initialVolume: 0,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: soilTypes.clay,\r\n        \r\n        infiltrometerRadius: 0,\r\n        \r\n        timeInterval: 30\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n    name: 'baerInitialize',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    //Update the appropritate values to the provided infiltrometer type  \r\n    \r\n    setInfiltrometerType: (state, action) => {\r\n      \r\n      switch (action.payload.infiltrometerType){\r\n        default:\r\n          //set the radius to 0\r\n          state.infiltrometerR = 0;\r\n          break;\r\n\r\n      }\r\n    },\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload;\r\n    \r\n    },\r\n    setInfiltrometerSuction: (state, action)=>{\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action)=>{\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType:(state, action)=>{\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData:(state, action)=>{\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\nexport const selectInfiltrometerType = (state) => state.baerInitialize.infiltrometerType;\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\n\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\n\r\n\r\n//export the actions\r\nexport const { setInfiltrometerType, setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType,setInfiltrometerData } = baerInitializeSlice.actions;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","import {  createSlice } from '@reduxjs/toolkit';\r\n\r\n/**\r\n * Initialize all the data associated with a reading....\r\n * Dispatch the addReading action from the reportsSlice after validating the reading\r\n */\r\nconst initialState = {\r\n  volume: 0,\r\n  secondsElapsed: 0,\r\n  lastVolume: 0\r\n};\r\n\r\nexport const baerReplicationSlice = createSlice({\r\n    name: 'baerReplication',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    /**\r\n     *Sets the current volume in the reading \r\n     * @param {the current state} state \r\n     * @param {must contain a volume payload} action \r\n     */\r\n    setVolume: (state, action)=>{\r\n      state.volume = Number(action.payload);\r\n    }\r\n    ,\r\n    setSecondsElapsed: (state, action)=>{\r\n      state.secondsElapsed = Number(action.payload);\r\n    }\r\n    ,\r\n    setLastVolume:(state, action)=>{\r\n      state.lastVolume = Number(action.payload);\r\n    }\r\n\r\n  }\r\n});\r\n\r\nexport const {setVolume, setSecondsElapsed, setLastVolume} = baerReplicationSlice.actions;\r\n\r\n\r\nexport const selectLastVolume = (state) => state.baerReplication.lastVolume;\r\n\r\nexport default baerReplicationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    page: null\r\n};\r\n\r\nexport const redirectSlice = createSlice({\r\n  name: 'redirector',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     setPage: (state, action) => {\r\n      state.page = action.payload;\r\n    }}\r\n});\r\n\r\nexport const {setPage} = redirectSlice.actions;\r\nexport const selectPage = (state) => state.redirector.page;\r\n\r\nexport default redirectSlice.reducer;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addReading, newReport } from '../../reports/reportsSlice';\r\nimport {Protocols} from '../../reports/protocols'\r\nimport { selectInitialVolume, selectInfiltrometerData,\r\n  selectInfiltrometerRadius, selectInfiltrometerSuction,\r\nsetInitialVolume,\r\nsetInfiltrometerSuction, setTimeInterval, selectTimeInterval,setSoilType,selectSoilType, setInfiltrometerData} from './bear-initializeSlice';\r\nimport { Redirect } from 'react-router';\r\nimport { useEffect } from 'react';\r\nimport { setLastVolume, setSecondsElapsed } from '../baer-replication/bear-replicationSlice';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\nimport {Field, formValueSelector, reduxForm} from 'redux-form'\r\nimport { connect } from 'react-redux';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\n\r\n\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error} }) => (\r\n  <div>\r\n    \r\n    <div>\r\n      <input {...input} placeholder={label} type={type}/>\r\n      {touched && ((error && <span>{error}</span>))}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.volume) {\r\n    errors.volume = 'Required'\r\n  } else if (values.volume < 0) {\r\n    errors.volume = 'Must be a value greater than zero'\r\n  }\r\n\r\n\r\n  if (!values.suction) {\r\n    errors.suction = 'Required'\r\n  } else if (Number(values.suction) >= 0) {\r\n    errors.suction = 'Must be a negative value'\r\n  }\r\n\r\n\r\n  if (!values.timeInterval) {\r\n    errors.timeInterval = 'Required'\r\n  } else if (Number(values.timeInterval) <= 0) {\r\n    errors.timeInterval = 'Time interval must be greater than 0'\r\n  }\r\n\r\n  if (!values.radius) {\r\n    errors.radius = \"Required\"\r\n  } else if (Number(values.radius) <= 0) { \r\n    errors.radius = 'Radius must be larger than 0'\r\n  }\r\n\r\n  if (!values.nh0){\r\n    errors.nh0 = \"Required\"\r\n  }\r\n  else if (Number(values.nh0) < 0){\r\n    errors.nh0 = 'Must be a positive number'\r\n  }\r\n   if (!values.alpha){\r\n    errors.alpha = \"Required\"\r\n  }\r\n  else if (Number(values.alpha) < 0){\r\n    errors.alpha = 'Must be a positive number'\r\n  }\r\n\r\n  return errors\r\n}\r\n\r\n\r\n\r\n\r\nconst BaerInitializeView = (props) => {\r\n  const infiltrometerData = useSelector(selectInfiltrometerData);\r\n  const { change, soilTypeSelected, handleSubmit, pristine, reset, submitting, soilValues } = props\r\n  \r\n\r\n  //current soil type in the store\r\n  const curSoilType = useSelector(selectSoilType);\r\n  \r\n  \r\n\r\n  const dispatch = useDispatch();\r\n  /**\r\n   * Adds a new Baer prototocol report using the reports slice\r\n   * \r\n   */\r\n\r\n  const handleFormChange = (event, value) => {\r\n\r\n    switch (value) {\r\n      case \"clay\":\r\n        change(\"nh0\",soilTypes.clay.nh0);\r\n        change(\"alpha\",soilTypes.clay.alpha);\r\n        break;\r\n      case \"loam\":\r\n        change(\"nh0\",soilTypes.loam.nh0);\r\n        change(\"alpha\",soilTypes.loam.alpha);\r\n        break;\r\n      case \"clayLoam\":\r\n        change(\"nh0\",soilTypes.clayLoam.nh0);\r\n        change(\"alpha\",soilTypes.clayLoam.alpha);\r\n        break;\r\n      case \"miniDisk\":\r\n        change(\"radius\",2.25);\r\n        break;\r\n      case \"miniDiskV1\":\r\n        change(\"radius\", 1.6);\r\n        break;\r\n      case \"customType\":\r\n        change(\"radius\");\r\n        break;\r\n      default:\r\n        break;\r\n        \r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    \r\n  <div class = \"col-sm-10\">\r\n  \r\n        \r\n  <div class=\"container\">\r\n\r\n\r\n\r\n  <form onSubmit = {handleSubmit}>\r\n    <div class=\"form-group row\">\r\n      <label for=\"volume\" class=\"col-sm-2 col-form-label\" >Initial Volume</label>\r\n      <div class=\"col-sm-10\">\r\n        <Field name=\"volume\" type =\"number\" component={renderField} label=\"Initial Volume\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <label for=\"suction\" class=\"col-sm-2 col-form-label\" >Suction</label>\r\n      <div class=\"col-sm-10\">\r\n      <Field name=\"suction\" type=\"number\" component={renderField} label=\"Suction\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <label for=\"timeInterval\" class=\"col-sm-2 col-form-label\" >Time Interval</label>\r\n      <div class=\"col-sm-10\">\r\n      <Field name=\"timeInterval\" type=\"number\" component={renderField} label=\"Time Interval\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <label for=\"radius\" class=\"col-sm-2 col-form-label\" >Radius</label>\r\n      <div class = \"form-group col-sm-10\">\r\n        <div class=\"form-group row\">\r\n      <div class=\"col-sm-10\">\r\n      <Field name=\"infiltrometerType\" component=\"select\" onChange={handleFormChange}>\r\n        <option value=\"customType\" selected>Infiltrometer Type</option>\r\n        <option value=\"miniDisk\">MiniDisk</option>\r\n        <option value=\"miniDiskV1\">MiniDiskV1</option>\r\n      </Field>\r\n      </div>\r\n      <Field name=\"radius\" type=\"number\" component={renderField} label=\"Radius\"/>\r\n      </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <label for=\"soilType\" class=\"col-sm-2 col-form-label\" >Soil Type</label>\r\n     \r\n    <div class=\"col-sm-10\">\r\n\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-sm-10\">\r\n          <Field name=\"soilType\" component=\"select\" onChange={handleFormChange}>\r\n            <option selected>Preset Soil Types</option>\r\n            <option value=\"clay\">Clay</option>\r\n            <option value=\"loam\">Loam</option>\r\n            <option value=\"clayLoam\">Clay Loam</option>\r\n          </Field>\r\n          </div>\r\n          <div class=\"form-group col-sm-10\">\r\n          <Field name=\"nh0\" component={renderField} type=\"number\" value=\"nh0\" label=\"NH0\"/>\r\n          </div>\r\n          <div class=\"form-group col-sm-10\">\r\n          <Field name=\"alpha\" component={renderField} type=\"number\" value=\"alpha\" label=\"Alpha\"/>\r\n          </div>\r\n          \r\n\r\n        </div>\r\n\r\n    </div>\r\n    </div>\r\n\r\n    \r\n  \r\n     <div class=\"form-group row col-sm-4\">\r\n      <button type=\"submit\" class=\"btn btn-primary\" disabled={submitting}>Start Protocol</button>\r\n      </div>\r\n      <div class=\"form-group row col-sm-4\">\r\n      <button type=\"button\" class=\"btn btn-secondary\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n    </div>\r\n  </form>\r\n\r\n    </div>\r\n  </div>\r\n     );\r\n}\r\nconst onSubmit = (values, dispatch) => {\r\n\r\nlet soilType = soilTypes.default;\r\nswitch (values.soilType) {\r\n    case \"clay\":\r\n      soilType = soilTypes.clay;\r\n      break;\r\n    case \"clayLoam\":\r\n       soilType = soilTypes.clayLoam;\r\n      break;\r\n    case \"loam\":\r\n       soilType = soilTypes.loam;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  \r\n  let infiltrometerData = {\r\n     initialVolume: Number(values.volume),\r\n        \r\n              coordinates: {\r\n                lat:0,\r\n                long: 0,\r\n                },\r\n                soilType,\r\n                infiltrometerRadius: values.radius,       \r\n                timeInterval: Number(values.timeInterval),\r\n                infiltrometerSuction: Number(values.suction),\r\n  }\r\n  //set the infitrometer data in the store\r\n  dispatch(setInfiltrometerData(infiltrometerData));\r\n  //set the last volume to the initial volume for the replication view\r\n  dispatch(setLastVolume(infiltrometerData.initialVolume));\r\n  //send out the new report to the store\r\n  dispatch(newReport(  {\r\n            date: (new Date()).toString(),\r\n            protocol: Protocols.Baer,\r\n            infiltrometerData\r\n  }));\r\n\r\n  //add the intial reading\r\n  dispatch(addReading({\r\n    volume: Number(values.volume),\r\n    secondsElapsed: 0\r\n  }));\r\n\r\n  //change the page\r\n  dispatch(setPage(\"/Infiltrometer/baer-replication\"));\r\n}\r\nconst formSelector = formValueSelector('baerInitializeForm')\r\n\r\n\r\nexport default connect(\r\n  state=> {\r\n    const soilTypeSelected =  formSelector(state, 'SoilTypes')\r\n    return {\r\n      soilTypeSelected\r\n    }\r\n  }\r\n)(reduxForm({\r\n  form: 'baerInitializeForm',\r\n  validate,\r\n  onSubmit\r\n\r\n})(BaerInitializeView));","import React, {Component, useEffect, useState} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\n\r\nconst Table =()=> {\r\n    const rawReports = useSelector(selectReports);\r\n\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n\r\n\r\n    const [state, setState] = useState(filterReadings());\r\n\r\n    /**\r\n     * Find ml/min for a reading\r\n     * @param {The current reading index} i\r\n     */\r\n    function findRate(i){\r\n        if(i>0){\r\n            return ((curReport.readings[i-1].volume) - curReport.readings[i].volume)*(60/curReport.readings[i].secondsElapsed);\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n    /**\r\n     * Create an array to use for a table row from reading data\r\n     */\r\n    function filterReadings(){\r\n        let readingsArr = [];\r\n        for(let i = 0; i < curReport.readings.length; i++){\r\n            readingsArr[i] = {\r\n\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i)\r\n\r\n            };\r\n        }\r\n        return {reports: readingsArr};\r\n    }\r\n\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const {id, Time, Volume,Rate} = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        let header = Object.keys(state.reports[0])\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toUpperCase() === \"ID\") {\r\n                return <th key={index}>{key.toUpperCase()}</th>\r\n            }\r\n            if (key.toUpperCase() === \"TIME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n            }\r\n\r\n\r\n            if (key.toUpperCase() === \"VOLUME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n            }\r\n            if (key.toUpperCase() === \"RATE\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n     //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div>\r\n                <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                    <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport reportsSlice, {addReading, selectCurId, selectReports, selectCurReadingID} from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { useEffect } from 'react';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport  Table  from '../baer-results/table';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n \r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n\r\n\r\n  //the max allowed volume\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n   const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n  \r\n  \r\n  const [state, setState] = useState(initializeState);\r\n\r\n\r\n  //use to set the timer is playing variable\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n  const curID = useSelector(selectCurReadingID);\r\n  function endProtocol(){\r\n\r\n    //go to the results page\r\n    dispatch(setPage(\"/Infiltrometer/baer-results\"))\r\n  }\r\n  // This function will be called when the timer reaches zero.\r\n  function getVolumeReading() {\r\n\r\n      //stop the timer from running\r\n      setPlaying(false);\r\n\r\n      let volumeReading = prompt(\"Enter volumetric data below.\");\r\n\r\n      //don't record if cancel was pressed\r\n      if (volumeReading == null) return;\r\n      // Notify user of invalid input if volume reading is greater than last volume or is negative.\r\n      while (volumeReading > maxVolume\r\n         || volumeReading < 0 /*|| !isNumber(volumeReading)*/) {\r\n          window.confirm(\"Invalid input! Make sure your volume reading is a number less than or equal to: \" + maxVolume );\r\n          volumeReading = prompt(\"Enter volumetric data below.\");\r\n          //don't record if cancel was pressed\r\n          if (volumeReading == null) return;\r\n      }\r\n\r\n      if (volumeReading != null){\r\n          volumeReading = Number(volumeReading);\r\n          if (volumeReading === NaN) return;\r\n        //calculate the total number of elapsed seconds\r\n        let secondsElapsed = (curID + 1) * timeInterval;\r\n      \r\n        //set the volume and time in the replication store\r\n        dispatch(setLastVolume(volumeReading));\r\n        dispatch(setVolume(volumeReading));\r\n        dispatch(setSecondsElapsed(secondsElapsed));\r\n      \r\n        //add the reading using the reports slice\r\n        dispatch(addReading(\r\n            \r\n            {volume: volumeReading, secondsElapsed}      \r\n        ));\r\n      }\r\n  }\r\n  function isNumber(value){\r\n    return typeof value === 'number' && isFinite(value);\r\n  }\r\n  return (\r\n      <div class=\"container-fluid\">\r\n                  <h1 class=\"container-fluid row\">\r\n            Current Replication: {curID}\r\n          </h1>\r\n        <div class = \"container-fluid timer-wrapper\">\r\n          <CountdownCircleTimer\r\n              key={state.key}\r\n              isPlaying = {state.timerIsPlaying}\r\n              duration={Number(timeInterval)}\r\n              colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n              onComplete={() => getVolumeReading()}\r\n          >\r\n            {renderTime}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n\r\n        <div class=\"container-fluid\">\r\n          <div class=\"row container-fluid\">\r\n             <button type=\"submit\" class=\"btn btn-primary\" disabled={state.timerIsPlaying} onClick = {()=>{\r\n              setState({\r\n                timerIsPlaying: true,\r\n                key: state.key+1}\r\n                );\r\n\r\n             }}>{\r\n            \r\n            !state.timerIsPlaying? \"Start Replication\" : \"Replication Running...\"\r\n            \r\n            }</button>\r\n            <button type=\"submit\" class=\"btn btn-secondary\" onClick = {endProtocol}>\r\n              End Protocol\r\n            </button>\r\n          </div>\r\n           \r\n        </div>\r\n         <div class=\"container-fluid\">\r\n        <Table/>\r\n        </div>\r\n      </div>);\r\n\r\n\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<BaerReplicationView />, rootElement);\r\nexport default BaerReplicationView;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {selectReports} from \"../../reports/reportsSlice\";\r\nimport Table from \"./table\";\r\n\r\n\r\nconst  BaerResultsView = ()=> {\r\n  const reports = useSelector(selectReports);\r\n\r\n\r\n  return (<div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8 text-lg-center\">\r\n          <h1>Baer Results View</h1>\r\n\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8\">\r\n          <div class=\"container\">\r\n              <Table></Table>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n      </div>\r\n      <div className=\"row\">\r\n          <div className=\"col-sm-2\"></div>\r\n          <div className=\"col-sm-8 text-lg-center\">\r\n              <Link class=\"btn btn-dark\" to =\"/Infiltrometer/baer-initialize\">New Test</Link>\r\n          </div>\r\n          <div className=\"col-sm-2\"></div>\r\n      </div>\r\n    </div>);\r\n}\r\nexport default BaerResultsView;","const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","import React from 'react';\r\nimport {methods} from '../regression/regression-js';\r\nexport function RegressionTesting(){\r\n\r\n    function handleChange(event) {\r\n    state.value = event.target.value;\r\n  }\r\n  let state = {\r\n      value: \"\",\r\n      results: {}\r\n  };\r\n  function handleSubmit(event) {\r\n    //create the data values\r\n    let points= state.value.split(\" \");\r\n    for (let i = 0; i < points.length; i ++){\r\n        points[i] = points[i].split(',');\r\n    }\r\n    state.results = methods.polynomial(points, { order: 2, precision: 15 });\r\n\r\n    alert('Points were submitted: ' + points + \"\\nRegression output: \" + state.results.string);\r\n    console.log(state.results);\r\n  }\r\n    return(\r\n        <div>\r\n\r\n        \r\n        <form>\r\n        <label>\r\n          Data Points: {state.value}\r\n          <input type=\"text\" onChange={handleChange}></input>\r\n        </label>\r\n        \r\n        </form>\r\n            <div>\r\n                <button onClick = {handleSubmit}>\r\n                    Submit For Regression\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\n//Used to redirect to new pages from global state\r\n export const Redirector = () =>{\r\n\r\n    const curPage = useLocation().pathname;\r\n    const page = useSelector(selectPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //reset the page\r\n    if (curPage == page) {\r\n        dispatch(setPage(null));\r\n        return null;\r\n    }\r\n\r\n    return page!=null ? <Redirect to ={page}/> : null;\r\n  }\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer/baer-results/BaerResultsView';\r\nimport { ShowReportsButton } from './features/reports/ShowReportsButon';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nconst  App = ()=> {\r\n  return (\r\n    <BrowserRouter>\r\n          <Redirector/>\r\n          <Switch>\r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <Link to=\"/Infiltrometer/baer-initialize\">Baer Initialize View</Link>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n    volume: 0,\r\n    secondsElapsed: 0,\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\nimport {reducer as reduxFormReducer} from 'redux-form'\r\nimport  redirectReducer  from '../features/page-redirection/redirector-slice';\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    baerInitialize: baerInitializeReducer,\r\n    baerReplication: baerReplicationReducer,\r\n    baerResults: baerResultsReducer,\r\n    counter: counterReducer,\r\n    reports: reportsSlice,\r\n    form: reduxFormReducer,\r\n    redirector: redirectReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n       \r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}