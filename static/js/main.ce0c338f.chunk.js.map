{"version":3,"sources":["features/reports/protocols.js","features/page-redirection/redirector-slice.js","features/reports/reportsSlice.js","features/reused-components/reused-slices/replicationSlice.js","features/reused-components/reused-slices/initializeSlice.js","features/reused-components/HelpTip.js","app/infiltrometerType.js","app/soilTypes.js","features/page-redirection/Redirector.js","features/useful-functions/usefulFunctions.js","features/reused-components/initialize-views/InitializeView.js","features/baer/baer-initialize/BaerInitializeView.js","features/reports/severityRatings.js","features/photos/photoDatabase.js","features/photos/albumsSlice.js","features/reports/reportsDataPackager.js","features/baer/baer-results/table.js","features/audio/Player.js","features/audio/beep-01a.mp3","features/baer/baer-replication/BaerReplicationView.js","features/navBar/baerLogo.js","features/navBar/NavBar.js","features/reports/ReportsTable.js","features/homepage/HomePage.js","features/pdfviewer/pdf-viewer.js","features/pdfviewer/MiniDiskManual.pdf","features/pdfviewer/Field-Guide.pdf","features/pdfviewer/New-Baer-Article.pdf","features/reused-components/results-views/ResultsViewButtons.js","features/reused-components/results-views/ResultsViewNotes.js","features/standard/standard-results/ConductivityForm.js","features/regression/regression-js.js","features/standard/standard-results/ConductivityGraph.js","features/photos/PhotoCard.js","features/reused-components/results-views/ResultsViewPhotos.js","features/standard/standard-results/StandardResultsView.js","features/standard/standard-initialize/StandardInitializeView.js","features/baer/baer-results/BaerResultsView.js","features/standard/standard-replication/StandardReplicationTable.js","features/standard/standard-replication/StandardReplicationView.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/reused-components/reused-slices/resultsSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Protocols","redirectSlice","createSlice","name","initialState","page","reducers","setPage","state","action","payload","actions","selectPage","redirector","reportsSlice","reports","curId","newReport","uuidv4","id","date","protocol","readings","infiltrometerData","gatheringData","notes","addReading","_readings","length","i","secondsElapsed","push","sort","a","b","removeReadingWithTime","filter","r","setGatheringData","removeReport","Object","keys","setCurId","setNotes","setCurInfiltrometerData","selectReports","selectCurId","selectNotes","selectCurReadingID","ReplicationSlice","volume","lastVolume","setVolume","Number","setSecondsElapsed","setLastVolume","selectLastVolume","baerReplication","InitializeSlice","initialVolume","coordinates","lat","lon","soilType","nh0","alpha","infiltrometerRadius","infiltrometerSuction","timeInterval","site","observation","setInitialVolume","setInfiltrometerSuction","setTimeInterval","setSoilType","setInfiltrometerData","selectInitialVolume","baerInitialize","selectInfiltrometerData","selectTimeInterval","HelpTip","title","content","size","popover","Popover","Title","as","Content","OverlayTrigger","trigger","placement","overlay","infiltrometerTypes","radius","displayName","soilTypes","Pages","Redirector","protectedElements","curPage","useLocation","pathname","useSelector","to","addGeoDataToReading","reading","onFinished","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","err","InitializeView","curInfiltrometerData","dispatch","useDispatch","setRadiusPreset","event","document","getElementById","value","setSuctionPreset","setSoilPreset","useEffect","Container","className","Form","noValidate","validated","onSubmit","preventDefault","form","currentTarget","suction","checkValidity","stopPropagation","updateData","Date","toString","Row","Col","Group","Label","Control","type","defaultValue","placeholder","step","required","min","Feedback","DropdownButton","variant","Dropdown","Item","onSelect","max","Button","onClick","BaerInitializeView","SeverityRatings","Strong","Weak","None","Infinity","db","undefined","addPhotoToDB","photoID","photoData","transaction","objectStore","add","onerror","error","console","log","deletePhotoFromDB","delete","albumsSlice","addPhoto","reportId","thumbnailData","fullImageData","thumbnailID","fullID","thumbnail","full","deletePhoto","photoIndex","splice","deleteAllPhotos","forEach","photoGroup","selectAlbums","album","getPhotoFromID","Promise","resolve","reject","request","get","onsuccess","val","target","result","JSZip","require","handleTextForCSV","text","replaceAll","makeCSVFromGroupOfReports","reportGroup","reportAlbums","zip","reportPromises","reportID","index","folderName","folder","csvData","curReport","data","curReportData","findAverageRate","findSeverityRating","C1","C2","K","toDateString","row","time","setSeconds","getSeconds","toTimeString","findRate","input","map","join","toCsv","makeCSVDataFromReading","reportAlbum","file","fetchAllImages","then","imageData","img","photo","base64","all","generateAsync","saveAs","readingIndex","report","fromBeginning","_f","_s","deltaV","deltaT","sum","hasPhotos","promises","photos","ext","match","actualData","split","avgRate","Table","useState","filterReadings","readingsArr","Time","Volume","Rate","class","key","toUpperCase","e","renderTableHeader","toPrecision","useAudio","url","Audio","audio","playing","setPlaying","play","pause","currentTime","addEventListener","removeEventListener","renderTime","remainingTime","BaerReplicationView","curID","maxVolume","Math","timerIsPlaying","setState","show","setShow","beep","setAudPlaying","handleClose","isPlaying","duration","colors","onComplete","disabled","Accordion","Card","bg","Toggle","Header","eventKey","Collapse","Body","Modal","onHide","backdrop","centered","volumeReading","newReading","Text","muted","autofocus","Footer","BaerLogo","props","viewBox","width","height","fill","d","NavBar","Navbar","collapseOnSelect","expand","Brand","href","src","alt","Nav","Link","NavDropdown","Divider","ReportsTable","selectedReports","setSelectedReports","numberOfSelectedReports","deselectReport","_repo","deleteReport","unselectAll","reportKeys","formatDate","SelectButtons","selected","deleteAllSelected","selectAll","light","striped","bordered","hover","toLowerCase","Check","label","checked","onChange","selectReport","showReport","Alert","HomePage","open","setOpen","in","role","PdfViewer","pdf","pdfjs","GlobalWorkerOptions","workerSrc","version","numPages","setNumPages","pageNumber","setPageNumber","changePage","offset","prevPageNumber","onLoadSuccess","renderAnnotationLayer","renderTextLayer","scale","window","screen","loading","ResultsViewButtons","obj","makeCSV","ResultsViewNotes","xs","ConductivityForm","infilData","determinationCoefficient","results","predictions","observations","mean","reduce","ssyy","difference","accum","prediction","residual","round","number","precision","factor","methods","options","lhs","rhs","len","k","order","l","c","j","coefficients","matrix","n","maxrow","abs","tmp","total","gaussianElimination","v","predict","x","coeff","power","points","point","string","equation","reverse","r2","ConductivityGraph","N","h","A","pow","exp","readingsArray","sqrt","y","PI","interpolatedPoints","end","steps","intPoints","useMemo","color","interpolate","noData","Graph","xLabel","yLabel","showLegends","hideLines","hidePoints","toFixed","PhotoCard","setData","Img","Spinner","animation","ResultsViewPhotos","curReportAlbum","CardGroup","click","transform","hidden","accept","files","URL","createObjectURL","xhRequest","XMLHttpRequest","onload","reader","FileReader","onloadend","readAsDataURL","response","responseType","send","StandardResultsView","StandardInitializeView","BaerResultsView","StandardReplicationTable","intervals","rowData","rowIndex","isValid","vol","StandardReplicationRow","maximum","setMaximum","autoFocus","String","StandardReplicationView","setRemaining","allValid","style","margin","App","exact","path","MiniDiskManual","FieldGuide","NewBaerManual","fetchCount","amount","setTimeout","incrementAsync","createAsyncThunk","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","ResultsSlice","combineReducers","baerInitializeReducer","baerReplicationReducer","baerResults","baerResultsReducer","albumReducer","counter","counterReducer","reduxFormReducer","redirectReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","persistor","persistStore","ReactDOM","render","StrictMode","process","origin","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","req","indexedDB","evt","this","errorCode","onupgradeneeded","createObjectStore","keyPath","autoIncrement","IntiializePhotoDB"],"mappings":"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","file":"static/js/main.ce0c338f.chunk.js","sourcesContent":["// Contains the reference to all protocol names\r\nexport const Protocols = {\r\n    Baer: \"BAER\",\r\n    Standard: \"Standard\",\r\n    Experimental: \"VOLUME_PROTOCOL \"\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// This is the initial page that should be loaded\r\nconst initialState = {\r\n  page: '/'\r\n};\r\n\r\nexport const redirectSlice = createSlice({\r\n  name: 'redirector',\r\n  initialState,\r\n  reducers: {\r\n    setPage: (state, action) => {\r\n      state.page = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setPage } = redirectSlice.actions;\r\nexport const selectPage = (state) => state.redirector.page;\r\nexport default redirectSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Empty array of reports\r\nconst initialState = {\r\n  reports: {},\r\n  curId: \"-1\",\r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  reducers: {\r\n    newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId = uuidv4();\r\n\r\n      let newReport =\r\n      {\r\n        id: state.curId,\r\n        date: action.payload.date,\r\n        protocol: action.payload.protocol,\r\n        readings: [],\r\n        infiltrometerData: action.payload.infiltrometerData,\r\n        gatheringData: true,\r\n        notes: \"\",\r\n      }\r\n      // Add it to the reports\r\n      state.reports[newReport.id] = newReport;\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action) => {\r\n      // Add the reading to based on the reading's time and\r\n      let _readings = state.reports[state.curId].readings;\r\n\r\n      if (_readings.length === 0) {\r\n        _readings.push(action.payload);\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < _readings.length; i++) {\r\n        if (_readings[i].secondsElapsed === action.payload.secondsElapsed) {\r\n          // Modify the elements\r\n          _readings[i] = action.payload;\r\n          return;\r\n        }\r\n      }\r\n      _readings.push(action.payload);\r\n\r\n      // Sort the elements\r\n      _readings.sort((a, b) => (a.secondsElapsed > b.secondsElapsed) ? 1 : -1);\r\n    },\r\n\r\n    removeReadingWithTime: (state, action) => {\r\n      // Remove the reading to based on the reading's time\r\n      let _readings = [...state.reports[state.curId].readings];\r\n      state.reports[state.curId].readings = [..._readings].filter(r => r.secondsElapsed !== action.payload);\r\n    },\r\n\r\n    // Sets the current gathering data report\r\n    setGatheringData: (state, action) => {\r\n      state.reports[state.curId].gatheringData = action.payload;\r\n    },\r\n\r\n    removeReport: (state, action) => {\r\n      // Remove the report with the id provided in action.payload\r\n      delete state.reports[action.payload];\r\n\r\n      // If the current report is the one we are trying to delete, set a new current id\r\n      if (state.curId === action.payload) {\r\n        state.curId = Object.keys(state.reports)[0];\r\n      }\r\n    },\r\n\r\n    setCurId: (state, action) => {\r\n      state.curId = action.payload;\r\n    },\r\n\r\n    setNotes: (state, action) => {\r\n      state.reports[state.curId].notes = action.payload;\r\n    },\r\n\r\n    // Sets the current report's infiltrometer data\r\n    setCurInfiltrometerData: (state, action) => {\r\n\r\n      state.reports[state.curId].infiltrometerData = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading, removeReadingWithTime, setGatheringData, removeReport, setCurId, setNotes, setCurInfiltrometerData } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectNotes = (state) => state.reports.reports[state.reports.curId].notes;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport const selectGatheringData = (state) => {\r\n  if (state.reports.reports[state.reports.curId] === undefined) return undefined;\r\n  else return state.reports.reports[state.reports.curId].gatheringData;\r\n}\r\nexport default reportsSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n/**\r\n * Initialize all the data associated with a reading....\r\n * Dispatch the addReading action from the reportsSlice after validating the reading\r\n */\r\nconst initialState = {\r\n  volume: 0,\r\n  secondsElapsed: 0,\r\n  lastVolume: 0\r\n};\r\n\r\nexport const ReplicationSlice = createSlice({\r\n  name: 'baerReplication',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    /**\r\n     *Sets the current volume in the reading \r\n     * @param {the current state} state \r\n     * @param {must contain a volume payload} action \r\n     */\r\n    setVolume: (state, action) => {\r\n      state.volume = Number(action.payload);\r\n    }\r\n    ,\r\n    setSecondsElapsed: (state, action) => {\r\n      state.secondsElapsed = Number(action.payload);\r\n    }\r\n    ,\r\n    setLastVolume: (state, action) => {\r\n      state.lastVolume = Number(action.payload);\r\n    }\r\n\r\n  }\r\n});\r\n\r\nexport const { setVolume, setSecondsElapsed, setLastVolume } = ReplicationSlice.actions;\r\n\r\n\r\nexport const selectLastVolume = (state) => state.baerReplication.lastVolume;\r\n\r\nexport default ReplicationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  initialVolume: 95,\r\n\r\n  coordinates: {\r\n    lat: 0,\r\n    lon: 0,\r\n  },\r\n\r\n  soilType: {\r\n    nh0: 2.28,\r\n    alpha: 0.124\r\n  },\r\n\r\n  infiltrometerRadius: 2.25,\r\n  infiltrometerSuction: -1,\r\n  timeInterval: 60,\r\n  site: \"Site\",\r\n  observation: \"Observation\",\r\n\r\n};\r\n\r\nexport const InitializeSlice = createSlice({\r\n\r\n  name: 'baerInitialize',\r\n\r\n  initialState,\r\n\r\n  reducers: {\r\n    setInitialVolume: (state, action) => {\r\n\r\n      state.initialVolume = action.payload;\r\n\r\n    },\r\n    setInfiltrometerSuction: (state, action) => {\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action) => {\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType: (state, action) => {\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData: (state, action) => {\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n      state.site = action.payload.site;\r\n      state.observation = action.payload.observation;\r\n    }\r\n\r\n  }\r\n});\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\nexport const { setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType, setInfiltrometerData } = InitializeSlice.actions;\r\n\r\nexport default InitializeSlice.reducer;","import { Popover, OverlayTrigger } from 'react-bootstrap';\r\nimport { BsFillQuestionCircleFill as Qmark } from 'react-icons/bs';\r\n\r\n\r\n\r\n\r\nexport const HelpTip = ({ title, content, size }) => {\r\n\r\n\r\n    const popover = (\r\n        <Popover id=\"popover-basic\">\r\n            <Popover.Title as=\"h3\">{title}</Popover.Title>\r\n            <Popover.Content>\r\n                {content}\r\n            </Popover.Content>\r\n        </Popover>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n                <Qmark size={size} />\r\n            </OverlayTrigger>\r\n        </>\r\n    );\r\n}","export const infiltrometerTypes = {\r\n   MiniDisk:{\r\n       radius: 2.25,\r\n       displayName: \"Mini Disk\"\r\n   },\r\n   MiniDiskV1:{\r\n       radius: 1.6,\r\n       displayName: \"Mini Disk Version 1\"\r\n   }\r\n}","//contains the single reference to the soil types to be used in reports under key \"soilType\"\r\nexport const soilTypes = {\r\n     clay: {\r\n          nh0: 1.09,\r\n          /* positive number, of n/h0*/\r\n          alpha: 0.005 /* positive number,*/\r\n     },\r\n     clayLoam: {\r\n          nh0: 1.31,\r\n          /* positive number, of n/h0*/\r\n          alpha: 0.019 /* positive number,*/\r\n     },\r\n     loam: {\r\n          nh0: 1.56,\r\n          /* positive number, of n/h0*/\r\n          alpha: .036 /* positive number,*/\r\n     },\r\n     sand: {\r\n          alpha: 0.145,\r\n          nh0: 2.68\r\n     },\r\n     sandyClay: {\r\n          alpha: 0.027,\r\n          nh0: 1.23\r\n     },\r\n     loamySand: {\r\n          alpha: 0.124,\r\n          nh0: 2.28\r\n     },\r\n     sandyClayLoam: {\r\n          alpha: .059,\r\n          nh0: 1.48\r\n     },\r\n     sandyLoam: {\r\n          alpha: 0.075,\r\n          nh0: 1.89\r\n     },\r\n     silt: {\r\n          alpha: 0.016,\r\n          nh0: 1.37\r\n     },\r\n     siltLoam: {\r\n          alpha: .02,\r\n          nh0: 1.41\r\n     },\r\n     siltyClay: {\r\n          alpha: 0.005,\r\n          nh0: 1.09\r\n     },\r\n     siltyClayLoam: {\r\n          alpha: 0.01,\r\n          nh0: 1.23\r\n     },\r\n     undefined: {\r\n          alpha: null,\r\n          nh0: null\r\n     }\r\n}","import { useSelector } from \"react-redux\";\r\nimport { selectPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\n\r\nexport const Pages =\r\n{\r\n  Homepage: \"/\",\r\n  BaerInitializeView: \"/baer-initialize\",\r\n  BaerReplicationView: \"/baer-replication\",\r\n  BaerResultsView: \"/baer-results\",\r\n  StandardInitializeView: \"/standard-initialize\",\r\n  StandardReplicationView: \"/standard-replication\",\r\n  StandardResultsView: \"/standard-results\",\r\n  BaerManual: \"/manuals-baer\",\r\n  InfiltrometerManual: \"/manuals-infiltrometer\",\r\n  ReportsView: \"/reports\",\r\n  NewBaerManual: \"/manuals-newBaer\"\r\n}\r\n\r\n//Used to redirect to new pages from global state\r\nexport const Redirector = ({ protectedElements }) => {\r\n  const curPage = useLocation().pathname;   // Current URL in browser\r\n  const page = useSelector(selectPage);     // Current URL in Redux store\r\n  // If the URLs match, we render the protected elements (JSX passed as a prop to this component)\r\n  // If the URLs do not match, we render a redirect message to the valid url\r\n  return page !== curPage ? <Redirect to={page} /> : protectedElements;\r\n}\r\n","/**\r\n * \r\n * @param {Returns the reading with geo data, if possible\r\n * If geo data cannot be collected, fills with \"N/A\"} reading \r\n * @param {Function to call after finishing adding the data, takes the new reading\r\n * as a param} onFinished \r\n */\r\nexport function addGeoDataToReading(reading, onFinished) {\r\n\r\n    //try to get the geolocation data\r\n    navigator.geolocation.getCurrentPosition((pos) => {\r\n        //add the intial reading\r\n        onFinished({\r\n            ...reading,\r\n            lat: pos.coords.latitude,\r\n            lon: pos.coords.longitude,\r\n        });\r\n\r\n    },\r\n        (err) => {\r\n            //add the intial reading\r\n            onFinished({\r\n                ...reading,\r\n                lat: \"N/A\",\r\n                lon: \"N/A\"\r\n            });\r\n        }\r\n    )\r\n\r\n}","/* React/Redux Imports */\r\nimport React, { useEffect } from 'react';\r\nimport { Button, Col, Container, Dropdown, DropdownButton, Form, Row } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n/* Slice Imports */\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { addReading, newReport } from '../../reports/reportsSlice';\r\nimport { setLastVolume, setVolume } from '../reused-slices/replicationSlice';\r\nimport { selectInfiltrometerData, setInfiltrometerData, setInitialVolume } from '../reused-slices/initializeSlice';\r\n\r\n/* HTML/CSS Imports */\r\nimport { HelpTip } from '../HelpTip';\r\n\r\n/* Other Imports */\r\nimport { infiltrometerTypes } from '../../../app/infiltrometerType';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\nimport { Pages } from '../../page-redirection/Redirector';\r\nimport { Protocols } from '../../reports/protocols';\r\nimport { addGeoDataToReading } from '../../useful-functions/usefulFunctions';\r\n\r\n\r\n\r\nconst InitializeView = ({ protocol }) => {\r\n    const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n    const dispatch = useDispatch();\r\n\r\n    const setRadiusPreset = (event) => {\r\n        let radius = document.getElementById(\"radius\");\r\n        radius.value = event;\r\n    }\r\n\r\n    const setSuctionPreset = (event) => {\r\n        let suction = document.getElementById(\"suction\");\r\n        suction.value = event;\r\n    }\r\n\r\n    const setSoilPreset = (event) => {\r\n        let nh0 = document.getElementById(\"nh0\");\r\n        let alpha = document.getElementById(\"alpha\");\r\n        nh0.value = event.nh0;\r\n        alpha.value = event.alpha;\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n        let site = document.getElementById(\"site\").value;\r\n        let observation = document.getElementById(\"observation\").value;\r\n        let volume = document.getElementById(\"volume\").value;\r\n        let suction = document.getElementById(\"suction\").value;\r\n        let timeInterval = document.getElementById(\"timeInterval\").value;\r\n        let radius = document.getElementById(\"radius\").value;\r\n        let nh0 = document.getElementById(\"nh0\").value;\r\n        let alpha = document.getElementById(\"alpha\").value;\r\n\r\n        let lat = document.getElementById(\"lat\").value;\r\n        if (lat === \"\") lat = null;\r\n        let lon = document.getElementById(\"lon\").value;\r\n        if (lon === \"\") lon = null;\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        }\r\n        else {\r\n            let infiltrometerData = {\r\n                initialVolume: volume,\r\n                coordinates: { lat: Number(lat), lon: Number(lon) },\r\n                soilType: { nh0: nh0, alpha: alpha },\r\n                infiltrometerRadius: radius,\r\n                timeInterval: timeInterval,\r\n                infiltrometerSuction: suction,\r\n                site,\r\n                observation\r\n            }\r\n            function updateData() {\r\n                // Set the infitrometer data in the store\r\n                dispatch(setInfiltrometerData(infiltrometerData));\r\n\r\n                // Set the last volume to the initial volume for the replication view\r\n                dispatch(setInitialVolume(volume));\r\n                dispatch(setVolume(volume));\r\n                dispatch(setLastVolume(volume));\r\n\r\n                // Send out the new report to the store\r\n                dispatch(newReport({\r\n                    date: (new Date()).toString(),\r\n                    protocol,\r\n                    infiltrometerData\r\n                }));\r\n\r\n            }\r\n            // If there is no lat/long data, try to get it\r\n            if (lat == null || lon == null) {\r\n                addGeoDataToReading({ volume, secondsElapsed: 0 }, (reading) => {\r\n                    infiltrometerData.coordinates.lat = reading.lat;\r\n                    infiltrometerData.coordinates.lon = reading.lon\r\n\r\n                    updateData();\r\n\r\n                    dispatch(addReading(reading));\r\n                    dispatch(setPage(\r\n                        protocol === Protocols.Baer ? Pages.BaerReplicationView : Pages.StandardReplicationView\r\n                    ));\r\n                });\r\n            }\r\n            else {\r\n                updateData();\r\n                dispatch(addReading({ volume, secondsElapsed: 0, lat, lon }));\r\n                dispatch(setPage(\r\n                    protocol === Protocols.Baer ? Pages.BaerReplicationView : Pages.StandardReplicationView\r\n                ));\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleReset = () => {\r\n        let site = document.getElementById(\"site\"); site.value = \"\";\r\n        let observation = document.getElementById(\"observation\"); observation.value = \"\";\r\n        let volume = document.getElementById(\"volume\"); volume.value = \"\";\r\n        let suction = document.getElementById(\"suction\"); suction.value = \"\";\r\n        let timeInterval = document.getElementById(\"timeInterval\"); timeInterval.value = \"\";\r\n        let radius = document.getElementById(\"radius\"); radius.value = \"\";\r\n        let nh0 = document.getElementById(\"nh0\"); nh0.value = \"\";\r\n        let alpha = document.getElementById(\"alpha\"); alpha.value = \"\";\r\n        let lat = document.getElementById(\"lat\"); lat.value = \"\";\r\n        let lon = document.getElementById(\"lon\"); lon.value = \"\";\r\n    }\r\n\r\n    const preloadCoordinates = () => {\r\n        let lat = document.getElementById(\"lat\").value;\r\n        if (lat === \"\") lat = null;\r\n        let lon = document.getElementById(\"lon\").value;\r\n        if (lon === \"\") lon = null;\r\n\r\n        let reading = { lat, lon };\r\n\r\n        addGeoDataToReading(reading, (reading) => {\r\n\r\n            // Make sure we haven't changed pages while waiting\r\n            if (document.getElementById(\"lat\") === null) return;\r\n\r\n            document.getElementById(\"lat\").value = reading.lat;\r\n            document.getElementById(\"lon\").value = reading.lon;\r\n        });\r\n\r\n    }\r\n    useEffect(preloadCoordinates, []);\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"mt-5 rounded border shadow\">\r\n                <h1 className=\"pt-5 display-4\">Initialize {protocol} Protocol </h1>\r\n\r\n                <Form className=\"p-5\" noValidate validated onSubmit={handleSubmit}>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label className='display-6'>Site Name{\"  \"}\r\n                                    <HelpTip size=\"25px\"\r\n                                        title=\"Site Name\"\r\n                                        content=\"Where you are recording data from, for organizational purposes.\" />\r\n                                </Form.Label>\r\n\r\n                                <Form.Control\r\n                                    id=\"site\"\r\n                                    type=\"text\"\r\n                                    size=\"lg\"\r\n                                    defaultValue={curInfiltrometerData.site}\r\n                                    placeholder=\"Enter site name...\"\r\n                                />\r\n                                <div className=\"pt-2\" />\r\n                                <Form.Label className='display-6'>Observation Name{\"  \"}\r\n                                    <HelpTip size=\"25px\" title=\"Observation Name\" content=\"The name of the observation you are recording, for organizational purposes.\" />\r\n                                </Form.Label>\r\n\r\n                                <Form.Control\r\n                                    id=\"observation\"\r\n                                    type=\"text\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    defaultValue={curInfiltrometerData.observation}\r\n                                    placeholder=\"Enter observation...\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <hr className=\"mt-5\" />\r\n\r\n                    <Row className=\"mt-5 display-6\">\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Volume (mL)* <br />\r\n                                    <HelpTip size=\"25px\" title=\"Volume\" content=\"The initial volume of water in the lower chamber of the infiltrometer (in mL).\" />\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    id=\"volume\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    min=\"0\"\r\n                                    defaultValue={curInfiltrometerData.initialVolume}\r\n                                    placeholder=\"Initial Volume (mL)\"\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Required!\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Time {protocol === Protocols.Baer ? \"\" : \"Interval\"} (s)*{\"  \"}\r\n                                    <HelpTip\r\n                                        size=\"25px\"\r\n                                        title={protocol === Protocols.Baer ? \"Time\" : \"Time Interval\"}\r\n                                        content={protocol === Protocols.Baer ? \" The time interval for each observation. For the BAER protocol the time is one minute.\" : \"The time for each interval that you will record data for.\"} />\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    required\r\n                                    id=\"timeInterval\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    min=\"1\"\r\n                                    defaultValue={curInfiltrometerData.timeInterval}\r\n                                    placeholder=\"Time (sec)\"\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Required!\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <hr className=\"mt-5\" />\r\n\r\n                    <Row className=\"mt-5 display-6\">\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label className=\"display-6\">Suction (cm)*{\"  \"}\r\n                                    <HelpTip size=\"25px\" title=\"Suction\"\r\n                                        content={protocol === Protocols.Baer ?\r\n                                            \"For the BAER protocol the suction tube should be adjusted so that the 1 cm mark is aligned with the surface of the water in the upper chamber of the infiltrometer.\"\r\n                                            : \"The suction of the infiltrometer device.\"} />\r\n                                </Form.Label>\r\n                                <DropdownButton variant=\"dark\" title=\"Preset Suction Values\">\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-0.5)}> -0.5 </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-1)}> -1 </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-2)}> -2 </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-3)}> -3 </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-4)}> -4 </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-5)}> -5 </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-6)}> -6 </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSuctionPreset(-7)}> -7 </Dropdown.Item>\r\n                                </DropdownButton>\r\n                                <div className=\"pt-2\" />\r\n                                <Form.Control\r\n                                    required\r\n                                    id=\"suction\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    max=\"0\"\r\n                                    defaultValue={curInfiltrometerData.infiltrometerSuction}\r\n                                    placeholder=\"Suction (cm)\"\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Required!\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label className=\"display-6\">Radius (cm){\"  \"}\r\n                                    <HelpTip size=\"25px\" title=\"Radius\" content=\"Radius of the infiltrometer device being used. You may select from one of the preset types below, or input your own custom radius.\" />\r\n                                </Form.Label>\r\n                                <DropdownButton variant=\"dark\" title=\"Preset Infiltrometer Types\">\r\n                                    <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDisk.radius)}>\r\n                                        {infiltrometerTypes.MiniDisk.displayName}\r\n                                    </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDiskV1.radius)}>\r\n                                        {infiltrometerTypes.MiniDiskV1.displayName}\r\n                                    </Dropdown.Item>\r\n                                </DropdownButton>\r\n                                <div className=\"pt-2\" />\r\n                                <Form.Control\r\n                                    id=\"radius\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    min=\"0\"\r\n                                    defaultValue={null}\r\n                                    placeholder=\"Radius (cm)\"\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Required!\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Form.Label as=\"h5\">(*) indicates a required field</Form.Label>\r\n                    </Row>\r\n\r\n                    <hr className=\"mt-5\" />\r\n\r\n                    <Row className=\"mt-5\">\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label className=\"display-6\">Soil Type{\"  \"}\r\n                                    <HelpTip size=\"25px\" title=\"Soil Type\" content=\"The type of soil you are conducting the protocol on. You may select a preset soil type from the menu below to automatically load all the necessary data, or input the N/H0 and Alpha values of a custom soil type if yours is not represented.\" />\r\n                                </Form.Label>\r\n                                <DropdownButton variant=\"dark\" title=\"Preset Soil Types\">\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.undefined)}> Unknown </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clay)}> Clay </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clayLoam)}> Clay Loam </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loam)}> Loam </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loamySand)}> Loamy Sand </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sand)}> Sand </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyClay)}> Sandy Clay </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyLoam)}> Sandy Loam </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.silt)}> Silt </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltLoam)}> Silt Loam </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClay)}> Silty Clay </Dropdown.Item>\r\n                                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClayLoam)}> Silty Clay Loam </Dropdown.Item>\r\n                                </DropdownButton>\r\n                                <div className=\"pt-2\" />\r\n                                <Form.Label>N/H0</Form.Label>\r\n                                <Form.Control\r\n                                    id=\"nh0\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    min=\"0\"\r\n                                    placeholder=\"N/H0\"\r\n                                />\r\n                                <div className=\"pt-2\" />\r\n                                <Form.Label>Alpha</Form.Label>\r\n                                <Form.Control\r\n                                    id=\"alpha\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    min=\"0\"\r\n                                    placeholder=\"Alpha\"\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Required!\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <hr className=\"mt-5\" />\r\n\r\n                    <Row className=\"mt-5\">\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label className=\"display-6\">Location{\"  \"}\r\n                                    <HelpTip size=\"25px\" title=\"Location\" content=\"Where you are taking data from. This is automatically loaded by the app if you have location services enabled. Otherwise, you will need to add the latitude and longitude values manually.\" />\r\n                                </Form.Label>\r\n                                <div className=\"pt-2\" />\r\n                                <Form.Label>Latitude</Form.Label>\r\n                                <Form.Control\r\n                                    id=\"lat\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    placeholder=\"Latitude\"\r\n                                />\r\n                                <div className=\"pt-2\" />\r\n                                <Form.Label>Longitude</Form.Label>\r\n                                <Form.Control\r\n                                    id=\"lon\"\r\n                                    type=\"number\"\r\n                                    step=\"any\"\r\n                                    size=\"lg\"\r\n                                    placeholder=\"Longitude\"\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Required!\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <hr className=\"mt-5\" />\r\n\r\n                    <Row className=\"mt-5\">\r\n                        <Col>\r\n                            <Button type=\"submit\" variant=\"dark\" size=\"lg\" className=\"w-100\">Start Protocol</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-2\">\r\n                        <Col>\r\n                            <Button variant=\"danger\" size=\"sm\" className=\"w-100\" onClick={handleReset}>Clear Values</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InitializeView;","\r\nimport { Protocols } from '../../reports/protocols';\r\nimport InitializeView from '../../reused-components/initialize-views/InitializeView';\r\nconst BaerInitializeView = () => {\r\n  return (<InitializeView protocol={Protocols.Baer} />)\r\n}\r\n\r\nexport default BaerInitializeView;","// Contains the reference to all protocol names\r\nexport const SeverityRatings = {\r\n    Strong: {min: 0, max: 3, name: \"Strong\"},\r\n    Weak: {min: 3, max: 8, name: \"Weak\"},\r\n    None: {min: 8, max: Infinity, name: \"None\"}\r\n}","\r\nlet db = undefined;\r\nlet open = false;\r\n\r\nexport function IntiializePhotoDB() {\r\n    var req = indexedDB.open('photoDB', 1);\r\n    req.onsuccess = function (evt) {\r\n        // Equal to: db = req.result;\r\n        db = this.result;\r\n        console.log(\"openDb DONE\");\r\n    };\r\n    req.onerror = function (evt) {\r\n        console.error(\"openDb:\", evt.target.errorCode);\r\n    };\r\n\r\n    req.onupgradeneeded = function (evt) {\r\n\r\n        db = this.result;\r\n        console.log(\"openDb.onupgradeneeded\");\r\n        db.createObjectStore('photos', { keyPath: 'id', autoIncrement: true });\r\n        open = true;\r\n    };\r\n}\r\n\r\nexport function clearPhotos() {\r\n    if (db === undefined) { console.log(\"The database has not been initialized!\"); return; }\r\n    let tx = db.transaction('photos', 'readwrite');\r\n    let request = tx.objectStore('photos').clear();\r\n    request.onerror = error => {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport function addPhotoToDB(photoID, photoData) {\r\n    if (db === undefined) { console.log(\"The database has not been initialized!\"); return; }\r\n    let tx = db.transaction('photos', 'readwrite');\r\n    let request = tx.objectStore('photos').add({ id: photoID, value: photoData });\r\n    request.onerror = error => {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function deletePhotoFromDB(photoID) {\r\n    if (db === undefined) { console.log(\"The database has not been initialized!\"); return; }\r\n    let tx = db.transaction('photos', 'readwrite');\r\n    let request = tx.objectStore('photos').delete(photoID);\r\n    request.onerror = error => {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport function getPhoto(photoID) {\r\n    return new Promise((resolve, reject) => {\r\n        let transaction = db.transaction(\"photos\");\r\n        let request = transaction.objectStore(\"photos\").get(photoID);\r\n\r\n        request.onerror = function (error) {\r\n            console.log(error);\r\n            resolve(null);\r\n        }\r\n\r\n        request.onsuccess = function (val) {\r\n            if (val.target.result === undefined) return; //console.log(val.target.result.value);\r\n            resolve(val.target.result.value);\r\n        }\r\n\r\n    })\r\n\r\n}\r\n\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { addPhotoToDB, deletePhotoFromDB, getPhoto } from './photoDatabase';\r\n\r\n\r\n//structure like \r\n//const initialState = {\r\n//   [reportId]:\r\n//   [{thumbnail: GUID, full:GUID}]\r\n//   \r\n//}\r\nconst initialState = {};\r\n\r\nexport const albumsSlice = createSlice({\r\n    name: 'albums',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: {\r\n        addPhoto: (state, action) => {\r\n\r\n            let {\r\n                reportId,\r\n                thumbnailData,\r\n                fullImageData\r\n            } = action.payload;\r\n\r\n            //generate uids for the images\r\n            let thumbnailID = uuidv4();\r\n            let fullID = uuidv4();\r\n\r\n            //add the photo data to indexDB\r\n            addPhotoToDB(thumbnailID, thumbnailData);\r\n            addPhotoToDB(fullID, fullImageData);\r\n\r\n            // Push a new photo into the store\r\n            if (state[reportId]!=undefined) {\r\n                state[reportId] = [...state[reportId],\r\n                {\r\n                    thumbnail: thumbnailID,\r\n                    full: fullID,\r\n                }\r\n                ];\r\n            }\r\n            else {\r\n                state[reportId] = [\r\n                    {\r\n                        thumbnail: thumbnailID,\r\n                        full: fullID,\r\n                    }\r\n                ];\r\n            }\r\n\r\n\r\n        },\r\n        //delete a single photo group\r\n        deletePhoto: (state, action) => {\r\n\r\n            let {\r\n                reportId,\r\n                photoIndex\r\n            } = action.payload;\r\n\r\n            //remove the photo in the state\r\n            if (state[reportId] != undefined && state[reportId] != null) {\r\n                if (state[reportId][photoIndex] != null) {\r\n                    //delete the photos from indexDB\r\n                    deletePhotoFromDB(state[reportId][photoIndex].thumbnail);\r\n                    deletePhotoFromDB(state[reportId][photoIndex].full);\r\n                }\r\n                else return;\r\n            } else return;\r\n\r\n            //remove from store\r\n            state[reportId].splice(photoIndex, 1);\r\n\r\n        },\r\n        //deletes all photos on the report group\r\n        deleteAllPhotos: (state, action) => {\r\n\r\n            let {\r\n                reportId,\r\n\r\n            } = action.payload;\r\n\r\n            //remove the photo in the state\r\n            if (state[reportId]) {\r\n                state[reportId].forEach(photoGroup => {\r\n                    //delete the photos from indexDB\r\n                    deletePhotoFromDB(photoGroup.thumbnail);\r\n                    deletePhotoFromDB(photoGroup.full);\r\n                })\r\n            } else return;\r\n\r\n            //remove from store\r\n            state[reportId] = null;\r\n\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addPhoto, deletePhoto, deleteAllPhotos } = albumsSlice.actions;\r\nexport const selectAlbums = (state) => state.album;\r\n\r\n/**\r\n * \r\n * @param {The id of the photo} id\r\n * @param {The function that is called when the photo is returned from indexedDB,\r\n * base64 data is passed to the function} callback \r\n */\r\nexport const getPhotoFromID = getPhoto;\r\n\r\nexport default albumsSlice.reducer;","import { SeverityRatings } from \"./severityRatings\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { getPhotoFromID, selectAlbums } from \"../photos/albumsSlice\";\r\nimport { Protocols } from './protocols'\r\nconst JSZip = require(\"jszip\");\r\n\r\n\r\n// Create a CSV of the current report\r\nexport function makeCSV(curReport, reportAlbums) {\r\n    let obj = {};\r\n    obj[curReport.id] = curReport;\r\n    return makeCSVFromGroupOfReports(obj, reportAlbums);\r\n}\r\n\r\nfunction handleTextForCSV(text) {\r\n    if (text === undefined) return (\"\");\r\n    return text.toString().replaceAll('\"', '\"\"');\r\n}\r\n\r\n// Get data from all selected reports\r\n// Write to a CSV\r\nexport function makeCSVFromGroupOfReports(reportGroup, reportAlbums) {\r\n    var zip = new JSZip();\r\n    let reportPromises = [];\r\n    Object.keys(reportGroup).forEach((reportID, index) => {\r\n        reportPromises.push(new Promise((resolve, reject) => {\r\n            let folderName = \"report_\" + index;\r\n            let folder = zip.folder(folderName);\r\n            let curReport = reportGroup[reportID];\r\n            let csvData = makeCSVDataFromReading(curReport);\r\n\r\n            let reportAlbum = reportAlbums == null ? null : reportAlbums[reportID];\r\n\r\n            //add csv data tot he folder\r\n            folder.file(folderName + \".csv\", csvData);\r\n\r\n            //put all the images on this report in their own images folder\r\n            if (reportAlbum == null ||\r\n                reportAlbum == undefined ||\r\n                reportAlbum.length == 0) resolve();\r\n            else {\r\n                fetchAllImages(reportAlbum).then((imageData) => {\r\n                    //make sure we actually have images\r\n                    if (imageData.length === 0) resolve();\r\n                    var img = folder.folder(\"images\");\r\n                    imageData.forEach((photo) => {\r\n                        img.file(photo.name, photo.data, { base64: true });\r\n                    });\r\n                    //resolve with the folder contents\r\n                    resolve();\r\n                });\r\n            }\r\n\r\n\r\n        }));\r\n    });\r\n    Promise.all(reportPromises).then(() => {\r\n        zip.generateAsync({ type: \"blob\" })\r\n            .then(function (content) {\r\n                // see FileSaver.js\r\n                saveAs(content, \"reports.zip\");\r\n            });\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction makeCSVDataFromReading(curReport) {\r\n    let data = [];\r\n    let curReportData = [];\r\n    if (curReport.protocol === Protocols.Baer) {\r\n        //Download for BAER\r\n        data = [['Protocol', 'Soil Alpha', 'Soil NH/O', 'Average Rate (mL/min)', 'Severity Rating', 'Site Name', 'Observation Name',\r\n            'Notes', 'Replication Number', 'Time (sec)', 'Volume(mL)', 'Rate(mL / min)', 'Latitude', 'Longitude', 'Date', 'Time']];\r\n        curReportData = [curReport.protocol, curReport.infiltrometerData.soilType.alpha, curReport.infiltrometerData.soilType.nh0,\r\n        findAverageRate(curReport, false), findSeverityRating(findAverageRate(curReport)).name, handleTextForCSV(curReport.infiltrometerData.site),\r\n        handleTextForCSV(curReport.infiltrometerData.observation), handleTextForCSV(curReport.notes)];\r\n    }\r\n    else {\r\n        //Download for standard\r\n        data = [['Protocol', 'Soil Alpha', 'Soil NH/O', 'Average Rate (mL/min)', 'C1 (cm/s^(½))', 'C2 (cm/s)', 'K (cm/s^(½))', 'Site Name', 'Observation Name',\r\n            'Notes', 'Replication Number', 'Time (sec)', 'Volume(mL)', 'Rate(mL / min)', 'Latitude', 'Longitude', 'Date', 'Time']];\r\n        curReportData = [curReport.protocol, curReport.infiltrometerData.soilType.alpha, curReport.infiltrometerData.soilType.nh0,\r\n        findAverageRate(curReport, true), curReport.infiltrometerData.C1, curReport.infiltrometerData.C2, curReport.infiltrometerData.K, handleTextForCSV(curReport.infiltrometerData.site),\r\n        handleTextForCSV(curReport.infiltrometerData.observation), handleTextForCSV(curReport.notes)];\r\n    }\r\n    let i = 0;\r\n    let date = new Date(curReport.date).toDateString();\r\n\r\n\r\n    //readings data\r\n    curReport.readings.forEach(reading => {\r\n        //reading data\r\n        let row = [...curReportData];\r\n        //Actual time of the reading\r\n        let time = new Date(curReport.date)\r\n        time = new Date(time.setSeconds(time.getSeconds() + reading.secondsElapsed)).toTimeString();\r\n\r\n        row.push((i + 1).toString(), reading.secondsElapsed,\r\n            reading.volume,\r\n            findRate(i, curReport), reading.lat, reading.lon, date, time);\r\n\r\n        data.push(row);\r\n        i++;\r\n    });\r\n    return toCsv(data);\r\n}\r\n\r\n\r\nfunction toCsv(input) {\r\n    return input.map(row => row.join(',')).join('\\n')\r\n}\r\n\r\n// Find flow rate (ml/min) for an individual reading in a report\r\nexport function findRate(readingIndex, report, fromBeginning = false) {\r\n\r\n    if (readingIndex > 0) {\r\n        if (fromBeginning) {\r\n            return Number(report.readings[0].volume - report.readings[readingIndex].volume)\r\n                / (Number(report.readings[readingIndex].secondsElapsed) / 60);\r\n        }\r\n        else {\r\n            var _f = report.readings[readingIndex - 1];\r\n            var _s = report.readings[readingIndex];\r\n            let deltaV = Number(_f.volume) - Number(_s.volume);\r\n            let deltaT = Number(_s.secondsElapsed) - Number(_f.secondsElapsed);\r\n            return (deltaV) / (deltaT / 60);\r\n        }\r\n\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Find average flow rate (mL/min) for a report\r\nexport function findAverageRate(report, fromBeginning = false) {\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < report.readings.length; i++) {\r\n        sum += findRate(i, report, fromBeginning);\r\n    }\r\n\r\n    return sum / (report.readings.length - 1);\r\n}\r\n\r\n//fetches all the images of an album, returns promise with all the images\r\nexport function fetchAllImages(reportAlbum) {\r\n    //some constants to declare\r\n    const hasPhotos = reportAlbum !== null && reportAlbum !== undefined && reportAlbum.length > 0;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        //first get all the image data from a report\r\n        if (!hasPhotos) resolve([]); //don't download any photos if we have none\r\n        let promises = [];\r\n\r\n        for (let i = 0; i < reportAlbum.length; i++) {\r\n            promises.push(getPhotoFromID(reportAlbum[i].full));\r\n        }\r\n\r\n        let photos = [];\r\n        Promise.all(promises).then((data) => {\r\n            data.forEach((photo, i) => {\r\n\r\n                //we need to seperate the extension and the data\r\n                //the photo data comes as: data:image/png;base64, <actualData>\r\n\r\n                let ext = photo.match(/[^:/]\\w+(?=;|,)/)[0];\r\n                let actualData = photo.split(',')[1];\r\n\r\n                photos.push({ data: actualData, name: (\"site_photo_\" + i + \".\" + ext).toString() });\r\n            });\r\n            resolve(photos);\r\n        }\r\n        );\r\n\r\n    })\r\n\r\n}\r\n\r\n//downloads all the images on a report album as a zip\r\nexport function downloadAllImages(reportAlbum) {\r\n    fetchAllImages(reportAlbum).then((photos) => {\r\n        //make sure we actually have images\r\n        if (photos.length === 0) return;\r\n\r\n        var zip = new JSZip();\r\n\r\n        var img = zip.folder(\"images\");\r\n        photos.forEach((photo) => {\r\n            //console.log(photo.data);\r\n            img.file(photo.name, photo.data, { base64: true });\r\n        });\r\n        zip.generateAsync({ type: \"blob\" })\r\n            .then(function (content) {\r\n                // see FileSaver.js\r\n                saveAs(content, \"images.zip\");\r\n            });\r\n    });\r\n}\r\n\r\n\r\n// Returns severity rating based on average rate\r\n// See severityRatings.js for severity rating values\r\nexport function findSeverityRating(avgRate) {\r\n    if (avgRate >= SeverityRatings.None.min)\r\n        return SeverityRatings.None;\r\n    if (avgRate >= SeverityRatings.Strong.min && avgRate < SeverityRatings.Strong.max)\r\n        return SeverityRatings.Strong;\r\n    if (avgRate >= SeverityRatings.Weak.min && avgRate < SeverityRatings.Weak.max)\r\n        return SeverityRatings.Weak;\r\n    else return SeverityRatings.None;\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCurId, selectReports } from \"../../reports/reportsSlice\";\r\nimport { findAverageRate, findSeverityRating, findRate } from '../../reports/reportsDataPackager';\r\nimport { Protocols } from '../../reports/protocols';\r\nconst Table = ({ protocol }) => {\r\n    const rawReports = useSelector(selectReports);\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n    const [state] = useState(filterReadings());\r\n\r\n    // Create an array to use for a table row from reading data\r\n    function filterReadings() {\r\n        if (curReport === undefined) return { reports: [] };\r\n\r\n        let readingsArr = [];\r\n        for (let i = 0; i < curReport.readings.length; i++) {\r\n            readingsArr[i] = {\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i, curReport, protocol === Protocols.Standard)\r\n            };\r\n        }\r\n        return { reports: readingsArr };\r\n    }\r\n\r\n    // Map state to table elements\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const { id, Time, Volume, Rate } = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate.toPrecision(4)}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    // Create table header\r\n    function renderTableHeader() {\r\n        try {\r\n            let header = Object.keys(state.reports[0])\r\n            return header.map((key, index) => {\r\n                console.log(key.toUpperCase())\r\n                if (key.toUpperCase() === \"ID\") {\r\n                    return <th key={index}>{key.toUpperCase()}</th>\r\n                }\r\n                if (key.toUpperCase() === \"TIME\") {\r\n                    return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n                }\r\n                if (key.toUpperCase() === \"VOLUME\") {\r\n                    return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n                }\r\n                if (key.toUpperCase() === \"RATE\") {\r\n                    return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n                }\r\n                return <th key={0}>No Readings To Display</th>;\r\n            })\r\n        }\r\n        catch (e) {\r\n            return <th key={0}>No Readings To Display</th>;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"mx-3\">\r\n            <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                </tbody>\r\n            </table>\r\n            {protocol === Protocols.Baer ?\r\n                <table class=\"table table-light table-striped table-hover\">\r\n                    <tbody>\r\n                        <tr class=\"table-dark\">\r\n                            <th class=\"text-center\">AVERAGE (mL/min)</th>\r\n                            <th className=\"text-center\">SEVERITY RATING</th>\r\n                        </tr>\r\n\r\n                        <tr class=\"table-striped\">\r\n                            <td className=\"text-center\">{findAverageRate(curReport).toPrecision(4)}</td>\r\n                            <td class=\"text-center\">{findSeverityRating(findAverageRate(curReport)).name}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","import { useState, useEffect } from \"react\";\r\n\r\nexport const useAudio = url => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (playing) {\r\n            audio.play()\r\n        }\r\n        else {\r\n            audio.pause();\r\n            audio.currentTime = 0;\r\n        }\r\n    },\r\n        [playing, audio]\r\n    );\r\n\r\n    useEffect(() => {\r\n        audio.addEventListener('ended', () => setPlaying(false));\r\n        return () => {\r\n            audio.removeEventListener('ended', () => setPlaying(false));\r\n        };\r\n    }, [audio]);\r\n\r\n    return [playing, setPlaying];\r\n};\r\n","export default __webpack_public_path__ + \"static/media/beep-01a.40e5c7db.mp3\";","/* React/Redux Imports */\r\nimport React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { Modal, Button, Form, Container, Row, Col, Accordion, Card } from 'react-bootstrap';\r\n\r\n/* Slice Imports */\r\nimport { addReading, selectCurReadingID, setGatheringData } from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume } from '../../reused-components/reused-slices/initializeSlice';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from '../../reused-components/reused-slices/replicationSlice';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\n\r\n/* HTML/CSS Imports */\r\nimport './timer.css'\r\nimport Table from '../baer-results/table';\r\n\r\n/* Other Imports */\r\nimport { addGeoDataToReading } from '../../useful-functions/usefulFunctions';\r\nimport { useAudio } from '../../audio/Player';\r\nimport beep from '../../audio/beep-01a.mp3';\r\nimport { Pages } from '../../page-redirection/Redirector';\r\n\r\n\r\n\r\n/* Handles render logic for the countdown timer */\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div className=\"text\">Time remaining:</div>\r\n      <div className=\"value\">{remainingTime}</div>\r\n      <div className=\"text\">seconds</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nconst BaerReplicationView = () => {\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n  const curID = useSelector(selectCurReadingID); // ID of reading, not report\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  let timeInterval = useSelector(selectTimeInterval);\r\n  let lastVolume = Number(useSelector(selectLastVolume));\r\n  let maxVolume = Math.min(initialVolume, lastVolume);\r\n  let setPlaying = (playing) => setState({ ...state, timerIsPlaying: playing });\r\n  let dispatch = useDispatch();\r\n  let [state, setState] = useState(initializeState);\r\n\r\n  function endProtocol() {\r\n    // Mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n    // Go to the results page\r\n    dispatch(setPage(Pages.BaerResultsView))\r\n  }\r\n\r\n  // Modal ==============================================================================\r\n  let [show, setShow] = useState(false);\r\n  let [playing, setAudPlaying] = useAudio(beep);\r\n  const handleClose = () => { setShow(false); setPlaying(false) };\r\n  const handleOpen = () => { setAudPlaying(false); setAudPlaying(true); setShow(true); }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const form = event.currentTarget;\r\n    const volumeReading = document.getElementById(\"volumeReading\").value;\r\n\r\n    if (form.checkValidity() === false) {\r\n      event.stopPropagation();\r\n    }\r\n    else {\r\n      // Calculate the total number of elapsed seconds\r\n      let secondsElapsed = (curID + 1) * timeInterval;\r\n\r\n      // Set the volume and time in the replication store\r\n      dispatch(setLastVolume(volumeReading));\r\n      dispatch(setVolume(volumeReading));\r\n      dispatch(setSecondsElapsed(secondsElapsed));\r\n\r\n      // Add the reading using the reports slice\r\n      // Try to gather geo data\r\n      addGeoDataToReading({ volume: volumeReading, secondsElapsed }, (newReading) => {\r\n        dispatch(addReading(newReading));\r\n      });\r\n\r\n      // Close modal\r\n      handleClose();\r\n    }\r\n  };\r\n  // ====================================================================================\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"mt-5 rounded border shadow\">\r\n        <h1 className=\"pt-5 display-4\">Current Replication: {curID + 1}</h1>\r\n\r\n        {/* Timer */}\r\n        <Row>\r\n          <Col>\r\n            <div className=\"mt-4 timer-wrapper\">\r\n              <CountdownCircleTimer\r\n                key={state.key}\r\n                isPlaying={state.timerIsPlaying}\r\n                duration={Number(timeInterval)}\r\n                colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                onComplete={() => handleOpen()}\r\n              >\r\n                {renderTime}\r\n              </CountdownCircleTimer>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        {/* Buttons */}\r\n        <Row className=\"text-center\">\r\n          <Col className=\"mt-4\">\r\n            <Button\r\n              variant=\"dark\"\r\n              className=\"w-50\"\r\n              size=\"lg\"\r\n              disabled={state.timerIsPlaying}\r\n              onClick={() => { setState({ timerIsPlaying: true, key: state.key + 1 }); }}\r\n            >\r\n              {!state.timerIsPlaying ? \"Start Replication\" : \"Replication Running...\"}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"text-center\">\r\n          <Col className=\"mt-2\">\r\n            <Button\r\n              variant=\"secondary\"\r\n              className=\"w-50\"\r\n              size=\"lg\"\r\n              onClick={endProtocol}\r\n            >\r\n              End Protocol\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        {/* Table */}\r\n        <Row className=\"mt-4\">\r\n          <Col>\r\n            <Table>{/* This table is rendered from table.js */}</Table>\r\n          </Col>\r\n        </Row>\r\n\r\n        {/* Help Button */}\r\n        <Row>\r\n          <Col className=\"mb-4 mt-2\">\r\n            <Accordion className=\"w-100\">\r\n              <Card\r\n                bg='primary'\r\n                text='white'>\r\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\" className='text-center'>Help</Accordion.Toggle>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body><h2>How to conduct a replication:</h2>\r\n                    <ol type=\"1\">\r\n                      <li>Expose the soil about 1 to 3 cm in depth, removing any overlying ash or minerals.</li>\r\n                      <li>With a full infiltrometer, place the porous disk flat against the soil and perpendicular to the surface. Tap the “Start Replication” button as soon as the infiltrometer disk and the soil come into contact.</li>\r\n                      <li>At the end of the timer, remove the infiltrometer from the soil and hold the top of the tube so that the water is at eye level. Record the end volume.</li>\r\n                      <li>Repeat these steps for as many replications as necessary.</li>\r\n                      <li>Once all replications have been completed, select the \"End Protocol\" button</li>\r\n                    </ol>\r\n                    <hr />\r\n                    <h2>Hydrophobicity Classification</h2>\r\n                    <ol type=\"1\">\r\n                      <li>{\"Strong ( 0 to < 3 mL/min)\"}</li>\r\n                      <li> {\"Weak ( 3 to < 8 mL/min)\"}</li>\r\n                      <li>{\"None ( > 8 mL/min)\"}</li>\r\n                    </ol>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </Col>\r\n        </Row>\r\n\r\n      </Container>\r\n\r\n      {/* Modal */}\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Enter volumetric data for replication: {curID + 1}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form\r\n            noValidate\r\n            validated\r\n            onSubmit={handleSubmit}\r\n          >\r\n            <Form.Group>\r\n              <Form.Text muted>\r\n                Previous volume: {maxVolume} mL\r\n              </Form.Text>\r\n              <Form.Control\r\n                required\r\n                autofocus\r\n                type=\"number\"\r\n                step=\"any\"\r\n                size=\"lg\"\r\n                min=\"0\"\r\n                max={maxVolume}\r\n                id=\"volumeReading\"\r\n                placeholder=\"Volume (mL)\"\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Enter a valid reading, or hit \"Cancel\".\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Modal.Footer>\r\n              <Button\r\n                variant=\"outline-secondary\"\r\n                size=\"lg\"\r\n                onClick={handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"dark\"\r\n                size=\"lg\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default BaerReplicationView;","import React from \"react\"\r\n\r\nexport function BaerLogo(props) {\r\n    return (\r\n        <svg viewBox={\"0 0 \" + props.width + \" \" + props.height} width=\"127\" height=\"53\">\r\n            <path fill=\"#ffffff\" d=\"M34 29L34 31L35.4722 32.5L36.6944 34.0556L37.1944 35L37.4722 37L37 39L36.6667 40L36.3333 41L35.3333 44L35 45L34.6944 46L34.4167 47L34.1111 49L34.1111 50L34.3889 52L34.7778 54L34.9167 55L34.9722 57L34.9167 58L34.7778 59L34.3611 61L34.1389 62L33.8611 63L33.3889 65L33.1944 66L32.8056 68L32.3889 70L32.0833 72L31.9167 74L31.7778 75L31.3889 77L31.0833 79L31.0278 80L31 82L31 84L31 87L31 90L31 91L31.0278 93L31.0833 94L31.2222 95L31.7222 97L32.6389 98.9167L34.1111 100.583L36 102L37 102.667L38 103.333L40 104.611L41 105.194L43 106.389L45 107.611L47 108.75L48 109.222L50 110.222L51 110.75L53 111.5L54.9722 111.583L55.8889 111.25L57.2778 109.889L57.8333 108.056L57.7222 107.056L57 105L58.5 104.333L60.0556 103.583L62 102.889L63 102.639L64 102.389L66 102.083L68 102L69 102L71 101.917L73 101.611L74 101.389L75 101.222L77 101.111L79 101.472L80 101.833L81 102.167L82 102.556L83 102.833L85 103.361L86 103.611L88 103.833L90 103.583L90.9444 103.333L91.9444 102.972L92.5 102.806L94 102L93.4722 100.583L92.5 99.4167L90.9167 98.25L89.9722 97.75L88.0833 96.5278L86.5 94.9167L85.9444 93.9722L85.4722 93L84.8333 91L84.5556 90L83.7222 88L82.5278 86L81.75 85L79.9722 83L79 82L77 80.0833L76 79.2222L74 77.6111L72 75.9167L70.1111 74.0556L69.3056 73.0556L68.7778 72.5L68 71L70.0556 70.9167L72 70.5278L74 69.7222L75 69.1667L77 68.0278L79 67.1667L80 66.9722L82 67.25L83 67.5556L84.9444 67.9167L85.5 67.9722L87 68L87 66.5L86.9167 64.9444L86.75 64L86.5278 63L86.1389 62L85.1389 60.0833L83.75 58.5L82.9167 57.9444L81 57.25L80 57.0833L78 57L77 57L75 56.9722L74 56.8889L72 56.3056L70.0556 55.1944L69.5 54.75L68 54L68 52L69.25 51.2222L69.6667 50.6944L71.1389 48.9722L72.6389 47.0278L73.3889 46.0833L75.0556 44.3889L75.9444 43.6111L77.5278 41.9167L78.1389 40.9722L78.7222 40L79.1389 39.0556L79.7222 37.5L80 36L78.5 35.3056L77.9444 35.3333L76.9444 35.2778L75 35.6944L73 36.3889L72 36.8333L70 37.7778L69 38.2222L68 38.7778L67 39.25L65 40.3611L64.0556 40.9167L63.0556 41.3611L62.5 41.6667L61 42L61 38.9444L61 37L61.0278 35L61.25 33L61.5 32L62.3889 30L62.9167 29L63.6944 27L63.9722 25L64 23L64 22.0556L64 19L61.9444 19L60 18.9167L58 18.5278L57 18.1667L55 17.4722L53 17.1111L52 17.1111L51 17.2222L49 17.6389L47 18.1667L46 18.4722L44.0833 19.5L43.2222 20.25L42.4167 21.0833L41 22.9722L39.5833 24.75L38.7778 25.5278L37.0278 26.7778L35.5 27.7778L34 29M53 21L52.2778 22.1389L51.75 22.3333L50 23L51 21L53 21M63 27L62.2222 27.7222L61.75 27.75L60.9444 27.9444L59 28L59.7778 27.2778L60.25 27.25L61.0556 27.0556L63 27M39 29.3333L39.3333 29.6667L38.6667 29.6667L39 29.3333M65 56L64.2222 57.5L62.9444 58.9444L62.0278 59.6944L61.5 60.2222L60 61L60.7778 59.5L62.0556 58.0556L62.9722 57.3056L63.5 56.7778L65 56M64.6667 59.6667L64.6667 60.3333L64.3333 60.3333L64.3333 59.6667L64.6667 59.6667M59 61L58 63L57 63L57 62L59 61M65.6667 62.6667L65.6667 63.3333L65.3333 63.3333L65.3333 62.6667L65.6667 62.6667M70.6667 84.6667L70.6667 85L70.3333 85.3333L70.3333 84.6667L70.6667 84.6667M70 87L69.9167 88.5L69.7778 89.0556L69.3333 90.9444L68.9722 91.9444L68.8056 92.5L68 94L67.5278 93.2222L67.6667 92.6944L67.75 91.8889L68.3333 90.0278L68.6389 89.1111L69.0278 88.3056L69.1944 87.7778L70 87M36 88L39 88L40 89L35 89L36 88M42 89L41 90L42 89M67 95L66 96L67 95z\" />\r\n        </svg>\r\n    );\r\n}\r\n\r\n\r\n","\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { BaerLogo } from \"./baerLogo\";\r\nimport { Pages } from \"../page-redirection/Redirector\";\r\nexport const NavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Container>\r\n\r\n                <Navbar.Brand >\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <BaerLogo width={1} height={110}>\r\n                                </BaerLogo>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </Navbar.Brand>\r\n                <Navbar.Brand href=\"https://www.mtu.edu/computing/\" >\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <img\r\n                                    src=\"https://www.mtu.edu/mtu_resources/images/download-central/logos/husky-icon/white.png\"\r\n                                    width=\"56\"\r\n                                    className=\"d-inline-block align-top\"\r\n                                    alt=\"MTU logo\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"me-auto\">\r\n                        <Nav.Link onClick={() => dispatch(setPage(Pages.Homepage))}>\r\n                            Home\r\n                        </Nav.Link>\r\n                        <NavDropdown title=\"New Test\" id=\"new-test-drop-down\">\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.BaerInitializeView))}>\r\n                                BAER Protocol</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.StandardInitializeView))}>\r\n                                Standard Protocol</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        <Nav.Link onClick={() => dispatch(setPage(Pages.ReportsView))}>\r\n                            My Reports\r\n                        </Nav.Link>\r\n                        <NavDropdown title=\"Manuals\" id=\"manuals-drop-down\">\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.BaerManual))}>\r\n                                USDA Field Guide\r\n                            </NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.NewBaerManual))}>\r\n                                BAER Article\r\n                            </NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.InfiltrometerManual))}>\r\n                                MiniDisk Manual\r\n                            </NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Nav.Link href=\"https://github.com/2021-SD-UI/Infiltrometer/\">\r\n                            GitHub\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n\r\n\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Protocols } from \"./protocols\";\r\nimport { removeReport, selectReports, setCurId } from \"./reportsSlice\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { makeCSVFromGroupOfReports } from \"./reportsDataPackager\";\r\nimport React, { useState } from \"react\";\r\nimport { Container, Row, Col, Form, Button, Table, Alert } from \"react-bootstrap\";\r\nimport { Pages } from \"../page-redirection/Redirector\";\r\nimport { deleteAllPhotos } from \"../photos/albumsSlice\"\r\nimport { selectAlbums } from \"../photos/albumsSlice\";\r\n\r\nconst ReportsTable = () => {\r\n    const [selectedReports, setSelectedReports] = useState({});\r\n    const numberOfSelectedReports = Object.keys(selectedReports).length;\r\n    const reports = useSelector(selectReports);\r\n    const dispatch = useDispatch();\r\n    const reportAlbums = useSelector(selectAlbums);\r\n    // Map the current state to table elements\r\n    function renderTableData() {\r\n        return Object.keys(reports).map(reportID => {\r\n            const report = reports[reportID]\r\n            return (\r\n                <>\r\n                    <tr key={report.id}>\r\n                        <td key={report.id}>\r\n                            <Container className=\"my-2\">\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form>\r\n                                            <Form.Check\r\n                                                label={formatDate(report.date)}\r\n                                                checked={selectedReports[report.id] !== undefined}\r\n                                                onChange={() => {\r\n                                                    if (selectedReports[report.id] !== undefined) {\r\n                                                        deselectReport(report);\r\n                                                    }\r\n                                                    else {\r\n                                                        selectReport(report);\r\n                                                    }\r\n\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                        </Form>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                        <td>\r\n                            <Container className=\"my-2\">\r\n                                <Row>\r\n                                    {report.protocol}\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                        <td>\r\n                            <Container className=\"my-2\">\r\n                                <Row>\r\n                                    {report.infiltrometerData.site}\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                        <td>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Button\r\n                                            variant=\"dark\"\r\n                                            className=\"w-100 my-1\"\r\n                                            onClick={() => { showReport(report) }}\r\n                                        >\r\n                                            View\r\n                                        </Button>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Button\r\n                                            variant=\"danger\"\r\n                                            className=\"w-100 my-1\"\r\n                                            onClick={() => { deleteReport(report) }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                    </tr>\r\n                </>\r\n            )\r\n        })\r\n    }\r\n\r\n    // Removes a report from the selected reports\r\n    function deselectReport(report) {\r\n        var _repo = { ...selectedReports };\r\n        delete _repo[report.id];\r\n        setSelectedReports(_repo);\r\n    }\r\n\r\n    // Deselects and deletes a report\r\n    function deleteReport(report) {\r\n        // Delete the report from selected if it is in selected\r\n        if (selectedReports[report.id] !== undefined) deselectReport(report);\r\n        // Delete all the photos on this report\r\n        dispatch(deleteAllPhotos({ reportId: report.id }));\r\n        // Remove the report from the store\r\n        dispatch(removeReport(report.id))\r\n    }\r\n\r\n    // Deselects and deletes all the currently selected reports\r\n    function deleteAllSelected() {\r\n        let selected = { ...selectedReports };\r\n        let reportKeys = Object.keys(selected);\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            deleteReport(selected[reportKeys[i]]);\r\n        }\r\n        unselectAll();\r\n    }\r\n\r\n    // Adds the report to the selected reports\r\n    function selectReport(report) {\r\n        var _repo = { ...selectedReports };\r\n        _repo[report.id] = report;\r\n        setSelectedReports(_repo);\r\n    }\r\n\r\n    // Adds all reports to the selected reports\r\n    function selectAll() {\r\n        let reportKeys = Object.keys(reports);\r\n        var _repo = { ...selectedReports };\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            _repo[reportKeys[i]] = reports[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n\r\n    // Removes all reports from the selected reports\r\n    function unselectAll() {\r\n        let reportKeys = Object.keys(reports);\r\n        var _repo = { ...selectedReports };\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            delete _repo[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n\r\n    // Sets the page to the result view of the current report\r\n    function showReport(report) {\r\n        switch (report.protocol) {\r\n            case Protocols.Baer:\r\n                dispatch(setCurId(report.id));\r\n                dispatch(setPage(Pages.BaerResultsView));\r\n\r\n                break;\r\n            case Protocols.Standard:\r\n                dispatch(setCurId(report.id));\r\n                dispatch(setPage(Pages.StandardResultsView));\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Renders dates for the Reports table\r\n    function formatDate(date) {\r\n        let d = new Date(date);\r\n        if (d.toDateString() === new Date().toDateString()) {\r\n            return \"Today\";\r\n        }\r\n        return (d.toDateString());\r\n    }\r\n\r\n\r\n    // Create header for table\r\n    function renderTableHeader() {\r\n        let header = ['Date', 'Protocol', 'Site', 'Options'];\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toLowerCase() === \"site\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Site</th>\r\n            }\r\n            if (key.toLowerCase() === \"date\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Date</th>\r\n            }\r\n            if (key.toLowerCase() === \"protocol\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Protocol</th>\r\n            }\r\n            if (key.toLowerCase() === \"options\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Options</th>\r\n            }\r\n            return null;\r\n        })\r\n    }\r\n\r\n    // Conditional renderer for the download and delete buttons that require selecting\r\n    // If no reports are selected, render disabled buttons. Otherwise, render enabled buttons\r\n    function SelectButtons() {\r\n\r\n        if (numberOfSelectedReports > 0) {\r\n            return (\r\n                <>\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            className=\"w-100\"\r\n                            onClick={() => { deleteAllSelected() }}\r\n                        >\r\n                            Delete ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button onClick={() => makeCSVFromGroupOfReports(selectedReports, reportAlbums)} variant=\"success\" className=\"w-100\">\r\n                            Download ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            disabled\r\n                            variant=\"secondary\"\r\n                            className=\"w-100\"\r\n                        >\r\n                            Delete ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            disabled\r\n                            variant=\"secondary\"\r\n                            className=\"w-100\"\r\n                        >\r\n                            Download ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n                </>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n    // Only render the Reports table if there are reports in the first place\r\n    if (Object.keys(reports).length > 0) {\r\n        return (\r\n            <Container className=\"mt-3\">\r\n                <div class=\"rounded border shadow\">\r\n                    <h1 className=\"my-5 display-4\">Reports</h1>\r\n                    <Row className=\"justify-content-center m-2\">\r\n                        <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                            <Button\r\n                                variant=\"dark\"\r\n                                className=\"w-100\"\r\n                                onClick={() => { selectAll() }}\r\n                            >\r\n                                Select All\r\n                            </Button>\r\n                        </Col>\r\n                        <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                className=\"w-100\"\r\n                                onClick={() => { unselectAll() }}\r\n                            >\r\n                                Unselect All\r\n                            </Button>\r\n                        </Col>\r\n                        <SelectButtons />\r\n                    </Row>\r\n                    <Row className=\"m-3\">\r\n                        <Col>\r\n                            <Table light striped bordered hover id='students'>\r\n                                <tbody>\r\n                                    <tr>{renderTableHeader()}</tr>\r\n                                    {renderTableData()}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container className=\"mt-3\">\r\n                <div class=\"rounded border shadow\">\r\n                    <Row>\r\n                        <h1 className=\"display-4\">No Saved Reports</h1>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Alert variant=\"danger w-50\" className=\"text-center\">Click \"New Test\" to start creating a report.</Alert>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default ReportsTable;","import React, { useState } from \"react\";\r\nimport { Container, Row, Col, Collapse } from \"react-bootstrap\";\r\nexport function HomePage() {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"mt-3\">\r\n                <div className=\"rounded border shadow\">\r\n                    <Row >\r\n                        <h1 className=\"my-4 display-4\">Mini-Disk Infiltrometer Companion</h1>\r\n                    </Row>\r\n                    <Row>\r\n                        <div className=\"m-4 display-6\">About The App</div>\r\n                        <Row>\r\n                            <Col className=\"mx-4\">\r\n                                This application was developed by Software Engineering students at \r\n                                Michigan Technological University, and is meant to be used with the \r\n                                Mini-Disk Infiltrometer to aid in recording soil infiltration data. \r\n                                Gathered data will be stored on your local device upon completing a reading. \r\n                                This data can be downloaded as a CSV for later use. \r\n                                These CSV reports may also be viewed in Excel.\r\n                                <hr />\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        <div className=\"m-4 display-6\">How To Start a Test</div>\r\n                        <Row>\r\n                            <Col className=\"mx-4\">\r\n                                Begin a new test using the desired protocol by clicking \"New Test\" in \r\n                                the navigation bar at the top of the screen. On smaller devices, click \r\n                                the icon with three horizontal lines on the top right to view the navigation \r\n                                bar's contents. Select the protocol you wish to use, and follow the on-screen \r\n                                prompts to fill in the required information. For more information about how to \r\n                                conduct a test, see the \"Manual\" section of the Navbar at the top of the screen.\r\n\r\n                                <a\r\n                                    onClick={() => setOpen(!open)}\r\n                                    aria-controls=\"gps-collapse-text\"\r\n                                    aria-expanded={open}\r\n                                    className=\"text-center\"\r\n                                >\r\n                                    <br /><br />\r\n                                    The app can use your device's GPS to determine your location, but you need \r\n                                    to allow it when the protocol page loads. If you have blocked the location \r\n                                    and later want to allow it  then you will need to change your device settings.\r\n                                </a>\r\n                                <Collapse in={open}>\r\n                                    <div id=\"gps-collapse-text\">\r\n                                        To re-enable location services on your device if you've already disabled them:\r\n                                        <ul>\r\n                                            <li>\r\n                                                iPhone:\r\n                                                <ol type=\"1\">\r\n                                                    <li>Go to Settings {\">\"} Privacy</li>\r\n                                                    <li>Tap Location Services</li>\r\n                                                    <li>Move the Location Services slideter to on/green. Location Services are now on.</li>\r\n                                                </ol>\r\n                                            </li>\r\n                                            <li>\r\n                                                Android:\r\n                                                <ol type=\"1\">\r\n                                                    <li>Go to Settings {\">\"} Location</li>\r\n                                                    <li>Move the slider to On. Location Services are now on.</li>\r\n                                                </ol>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <a href=\"https://www.lifewire.com/turn-on-mobile-location-services-4156232\" target=\"_blank\">Source</a>\r\n                                    </div>\r\n                                </Collapse>\r\n                                <hr />\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <div className=\"m-4 display-6\">How To View/Download a Report</div>\r\n                        <Row>\r\n                            <Col className=\"mx-4\">\r\n                                <div className=\"alert alert-danger\" role=\"alert\">\r\n                                    This app stores reports temporarily in your web browser's local storage. \r\n                                    To prevent data from being lost, please download your reports from the \"My Reports\" page.\r\n                                </div>\r\n\r\n                                All of your saved reports can be found under \"My Reports\" in the navigation bar. \r\n                                A report can be accessed by using the \"View\" button next to a report. A report can \r\n                                be deleted by using the red \"Delete\" button next to a report or by selecting report(s) \r\n                                via the checkbox and using the \"Delete\" button above the table of reports. Report(s) \r\n                                can be downloaded by selecting report(s) via the checkbox and using the \"Download\" button.\r\n                                <hr />\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"m-4 display-6\">More Information</div>\r\n                        <Row>\r\n                            <Col className=\"mx-4\">\r\n                                More information about how to use the Mini-Disk Infiltrometer can be found \r\n                                under \"Manuals\" in the navigation bar.\r\n                                <hr />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Row>\r\n\r\n                </div>\r\n\r\n            </Container>\r\n        </>);\r\n\r\n}","import React, { useState } from 'react';\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport { Document, Page, pdfjs } from 'react-pdf';\r\n\r\nexport const PdfViewer = ({ pdf }) => {\r\n    pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n    const [numPages, setNumPages] = useState(null);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const previousPage = (event) => {\r\n        event.preventDefault();\r\n        changePage(-1);\r\n    }\r\n    const nextPage = (event) => {\r\n        event.preventDefault();\r\n        changePage(1);\r\n    }\r\n\r\n    function onDocumentLoadSuccess({ numPages }) {\r\n        setNumPages(numPages);\r\n        setPageNumber(1);\r\n    }\r\n\r\n    function changePage(offset) {\r\n        setPageNumber(prevPageNumber => prevPageNumber + offset);\r\n    }\r\n\r\n    function setPDFScale() {\r\n        if (window.screen.width < 450)\r\n            return 0.6;\r\n        else\r\n            return 1;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <div className=\"rounded border shadow\">\r\n                    <h1 className=\"pt-2 display-4\">Manuals</h1>\r\n                    <Row className=\"p-3 text-center\">\r\n                        <Col></Col>\r\n                        <Col>\r\n                            <Document\r\n                                className=\"text-center\"\r\n                                file={pdf}\r\n                                onLoadSuccess={onDocumentLoadSuccess}\r\n                            >\r\n\r\n                                <Page\r\n                                    pageNumber={pageNumber}\r\n                                    renderAnnotationLayer={false}\r\n                                    renderTextLayer={false}\r\n                                    scale={setPDFScale()}\r\n                                    loading={\r\n                                        // This prevents the webpage\r\n                                        // from scrolling back to the top\r\n                                        // when you change PDF page numbers\r\n                                        <Page pageNumber={1}></Page>\r\n                                    }\r\n                                />\r\n                                <div className=\"rounded border shadow\">\r\n                                    <Row><Form.Label>Page {pageNumber} of {numPages}</Form.Label></Row>\r\n                                    <Row className=\"pb-3 text-center\">\r\n                                        <Col>\r\n                                            <Button\r\n                                                variant=\"secondary\"\r\n                                                className=\"w-75\"\r\n                                                disabled={pageNumber <= 1}\r\n                                                onClick={previousPage}\r\n                                            >\r\n                                                Previous\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                variant=\"dark\"\r\n                                                className=\"w-75\"\r\n                                                disabled={pageNumber >= numPages}\r\n                                                onClick={nextPage}\r\n                                            >\r\n                                                Next\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div>\r\n                            </Document>\r\n                        </Col>\r\n                        <Col></Col>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/MiniDiskManual.606fae66.pdf\";","export default __webpack_public_path__ + \"static/media/Field-Guide.31fa5636.pdf\";","export default __webpack_public_path__ + \"static/media/New-Baer-Article.a9da2a5e.pdf\";","\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectCurId, selectReports } from \"../../reports/reportsSlice\";\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { makeCSV } from \"../../reports/reportsDataPackager\";\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport { Pages } from '../../page-redirection/Redirector';\r\nimport { Protocols } from '../../reports/protocols';\r\nimport { selectAlbums } from '../../photos/albumsSlice';\r\n\r\nexport const ResultsViewButtons = ({ protocol }) => {\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)];\r\n    const dispatch = useDispatch();\r\n    const reportAlbums = useSelector(selectAlbums);\r\n    return (\r\n        <>\r\n            <hr />\r\n            < Row className=\"mt-4 text-center\" >\r\n                <Col>\r\n                    <Button\r\n                        variant=\"dark\"\r\n                        className=\"w-50\"\r\n                        size=\"lg\"\r\n                        onClick={() => {\r\n                            if (protocol === Protocols.Standard) {\r\n                                dispatch(setPage(Pages.StandardInitializeView));\r\n                            }\r\n                            else if (protocol === Protocols.Baer) {\r\n                                dispatch(setPage(Pages.BaerInitializeView));\r\n                            }\r\n\r\n                        }}\r\n                    >\r\n                        New Test\r\n                    </Button>\r\n                </Col>\r\n            </Row >\r\n            <Row className=\"my-2 text-center\">\r\n                <Col>\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        className=\"w-50\"\r\n                        size=\"lg\"\r\n                        onClick={() => dispatch(setPage(Pages.ReportsView))}\r\n                    >\r\n                        Reports\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-4 text-center\">\r\n                <Col>\r\n                    <Button variant=\"success\" size=\"lg\" className=\"w-50\" onClick={() => { makeCSV(curReport, reportAlbums) }}>\r\n                        Download Report\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}","\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { selectNotes, setNotes } from \"../../reports/reportsSlice\";\r\nexport const ResultsViewNotes = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [notes, setState] = useState(useSelector(selectNotes));\r\n    const changeNotes = (event) => {\r\n        dispatch(setNotes(event));\r\n        setState(event);\r\n    }\r\n    useEffect(() => setState(notes), [notes]);\r\n    return (\r\n        <>\r\n            <Row className=\"justify-content-center mb-5\">\r\n                <Col xs={11}>\r\n                    <Form.Label as=\"h4\">Notes</Form.Label>\r\n                    <TextareaAutosize className=\"w-100\" value={notes} onChange={(e) => changeNotes(e.target.value)} />\r\n                </Col>\r\n            </Row>\r\n            <hr/>\r\n        </>\r\n    );\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { soilTypes } from \"../../../app/soilTypes\";\r\nimport { selectCurId, selectReports } from \"../../reports/reportsSlice\";\r\nimport { Button, Col, Container, Dropdown, DropdownButton, Form, Row } from 'react-bootstrap';\r\nimport { setCurInfiltrometerData } from \"../../reports/reportsSlice\";\r\nimport { useEffect } from \"react\";\r\nimport { infiltrometerTypes } from \"../../../app/infiltrometerType\";\r\nimport { selectInfiltrometerData } from \"../../reused-components/reused-slices/initializeSlice\";\r\n\r\nconst ConductivityForm = () => {\r\n\r\n\r\n    const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n    const dispatch = useDispatch();\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)];\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        //get the current data\r\n        let infilData = { ...curReport.infiltrometerData };\r\n        let nh0 = document.getElementById(\"nh0\");\r\n        let alpha = document.getElementById(\"alpha\");\r\n        let radius = document.getElementById(\"radius\");\r\n\r\n        //update it\r\n        infilData.infiltrometerRadius = radius.value;\r\n        infilData.soilType = { nh0: nh0.value, alpha: alpha.value };\r\n\r\n        //send to store\r\n        dispatch(setCurInfiltrometerData(infilData));\r\n\r\n    }\r\n\r\n    function setRadiusPreset(event) {\r\n        let radius = document.getElementById(\"radius\");\r\n        radius.value = event;\r\n    }\r\n\r\n\r\n\r\n\r\n    //set the initial values\r\n    useEffect(() => {\r\n        setSoilPreset(curReport.infiltrometerData.soilType);\r\n        setRadiusPreset(curReport.infiltrometerData.infiltrometerRadius);\r\n    }, [curReport.infiltrometerData.soilType, curReport.infiltrometerData.infiltrometerRadius])\r\n\r\n    function setSoilPreset(event) {\r\n        let nh0 = document.getElementById(\"nh0\");\r\n        let alpha = document.getElementById(\"alpha\");\r\n        nh0.value = event.nh0;\r\n        alpha.value = event.alpha;\r\n    }\r\n\r\n    //show graph here, data is valid\r\n    return (\r\n        <>\r\n            <Container className=\"mt-3\">\r\n                <div class=\"rounded border shadow\">\r\n                    <Form className=\"p-5\" noValidate validated onSubmit={handleSubmit}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label className=\"pt-3 display-6\">Soil Type</Form.Label>\r\n                                    <DropdownButton variant=\"dark\" title=\"Preset Soil Types\">\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.undefined)}> Unknown </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clay)}> Clay </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clayLoam)}> Clay Loam </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loam)}> Loam </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loamySand)}> Loamy Sand </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sand)}> Sand </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyClay)}> Sandy Clay </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyLoam)}> Sandy Loam </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.silt)}> Silt </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltLoam)}> Silt Loam </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClay)}> Silty Clay </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClayLoam)}> Silty Clay Loam </Dropdown.Item>\r\n                                    </DropdownButton>\r\n                                    <div className=\"pt-2\" />\r\n                                    <Form.Label>N/H0</Form.Label>\r\n                                    <Form.Control\r\n                                        required\r\n                                        id=\"nh0\"\r\n                                        type=\"number\"\r\n                                        step=\"any\"\r\n                                        size=\"lg\"\r\n                                        min=\"0\"\r\n                                        defaultValue={curInfiltrometerData.soilType.nh0}\r\n                                        placeholder=\"N/H0\"\r\n                                    />\r\n                                    <div className=\"pt-2\" />\r\n                                    <Form.Label>Alpha</Form.Label>\r\n                                    <Form.Control\r\n                                        required\r\n                                        id=\"alpha\"\r\n                                        type=\"number\"\r\n                                        step=\"any\"\r\n                                        size=\"lg\"\r\n                                        min=\"0\"\r\n                                        defaultValue={curInfiltrometerData.soilType.alpha}\r\n                                        placeholder=\"Alpha\"\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        Required!\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label className=\"pt-3 display-6\">Radius (cm)</Form.Label>\r\n                                    <DropdownButton variant=\"dark\" title=\"Preset Infiltrometer Types\">\r\n                                        <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDisk.radius)}>\r\n                                            {infiltrometerTypes.MiniDisk.displayName}\r\n                                        </Dropdown.Item>\r\n                                        <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDiskV1.radius)}>\r\n                                            {infiltrometerTypes.MiniDiskV1.displayName}\r\n                                        </Dropdown.Item>\r\n                                    </DropdownButton>\r\n                                    <div className=\"pt-2\" />\r\n                                    <Form.Control\r\n                                        required\r\n                                        id=\"radius\"\r\n                                        type=\"number\"\r\n                                        step=\"any\"\r\n                                        size=\"lg\"\r\n                                        min=\"0\"\r\n                                        defaultValue={curInfiltrometerData.infiltrometerRadius}\r\n                                        placeholder=\"Radius (cm)\"\r\n                                    />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        Required!\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-4\">\r\n                            <Col>\r\n                                <Button type=\"submit\" variant=\"dark\" size=\"lg\" className=\"w-100\">Calculate Conductivity Graph</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </div>\r\n            </Container>\r\n        </>);\r\n\r\n}\r\n\r\n\r\nexport default ConductivityForm;","// const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\n// function createWrapper() {\r\n//   const reduce = (accumulator, name) => ({\r\n//     _round: round,\r\n//     ...accumulator,\r\n//     [name](data, supplied) {\r\n//       return methods[name](data, {\r\n//         ...DEFAULT_OPTIONS,\r\n//         ...supplied,\r\n//       });\r\n//     },\r\n//   });\r\n\r\n//   return Object.keys(methods).reduce(reduce, {});\r\n// }\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectCurId, selectReports, setCurInfiltrometerData } from \"../../reports/reportsSlice\";\r\nimport LineChart from 'react-linechart';\r\nimport { methods } from \"../../regression/regression-js\";\r\nimport '../../../../node_modules/react-linechart/dist/styles.css';\r\nimport React, { useMemo } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { selectInitialVolume } from \"../../reused-components/reused-slices/initializeSlice\";\r\nconst ConductivityGraph = () => {\r\n\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)];\r\n    const soilType = curReport.infiltrometerData.soilType;\r\n    const initialVolume = Number(useSelector(selectInitialVolume));\r\n\r\n\r\n\r\n    //For Conductivity Calcuations ///////////////////////////\r\n    //THIS IS WHAT IFILTROMETER DATA LOOKS LIKE:\r\n    /*\r\n    infiltrometerData = {\r\n        initialVolume: volume,\r\n        coordinates: { lat: Number(lat), lon: Number(lon) },\r\n        soilType: { nh0: nh0, alpha: alpha },\r\n        infiltrometerRadius: radius,\r\n        timeInterval: timeInterval,\r\n        infiltrometerSuction: suction,\r\n        site,\r\n        observation,\r\n        C1,\r\n        C2,\r\n        K\r\n    }*/\r\n    const dispatch = useDispatch();\r\n    const N = soilType.nh0;\r\n    const h = curReport.infiltrometerData.infiltrometerSuction;\r\n    const alpha = soilType.alpha\r\n    const radius = curReport.infiltrometerData.infiltrometerRadius;\r\n    const C1 = curReport.infiltrometerData.C1;\r\n    const C2 = curReport.infiltrometerData.C2;\r\n    const A = () => {\r\n        if (N >= 1.9) {\r\n            return [11.65 * (Math.pow(N, 0.1) - 1) * Math.exp(2.92 * (N - 1.9) * alpha * h)] / [Math.pow(alpha * radius, 0.91)];\r\n        }\r\n        // N < 1.9\r\n        return [11.65 * (Math.pow(N, 0.1) - 1) * Math.exp(7.5 * (N - 1.9) * alpha * h)] / [Math.pow(alpha * radius, 0.91)];\r\n    }\r\n    const K = C1 / A();\r\n    ////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    // Will give you the format:\r\n    // [{x,y}, {x,y}, ... ]\r\n    // to be used in regression\r\n    function readingsArray() {\r\n\r\n        if (curReport.readings.length <= 1) { return []; }\r\n\r\n        let points = [];\r\n        //sort the readings by time\r\n\r\n        curReport.readings.forEach(r => {\r\n            let point = { x: Math.sqrt(Number(r.secondsElapsed)), y: ((initialVolume - Number(r.volume)) / (Math.PI * Math.pow(radius, 2))) };\r\n            points.push(point);\r\n        });\r\n        return points;\r\n    }\r\n\r\n    function interpolatedPoints(end, steps) {\r\n        //get the equation\r\n        let points = [];\r\n        curReport.readings.forEach(r => {\r\n            let point = [Math.sqrt(Number(r.secondsElapsed)), ((initialVolume - Number(r.volume)) / (Math.PI * Math.pow(radius, 2)))];\r\n            points.push(point);\r\n        });\r\n\r\n        let result = methods.polynomial(points, { order: 2, precision: 15 });\r\n\r\n        //update constants in the store\r\n        dispatch(setCurInfiltrometerData(\r\n            {\r\n                ...curReport.infiltrometerData,\r\n                C1: result.equation[1],\r\n                C2: result.equation[0],\r\n                K: Number(result.equation[0] / A())\r\n            }));\r\n        //predict is the polynomial equation\r\n        const predict = (x) => (result.equation[0] * x * x) + (result.equation[1] * x);\r\n\r\n        let intPoints = [];\r\n        for (let i = 0; i <= end; i += (end / steps)) {\r\n            intPoints.push({ x: i, y: predict(i) });\r\n        }\r\n        return intPoints;\r\n    }\r\n\r\n\r\n\r\n    const data = useMemo(() =>\r\n\r\n        [\r\n            {\r\n                id: \"1\",\r\n                name: \"Interpolated\",\r\n                color: \"red\",\r\n                points: readingsArray().length >= 1 ? interpolatedPoints(readingsArray()[readingsArray().length - 1].x, 100) : null\r\n            },\r\n            {\r\n\r\n                id: \"0\",\r\n                name: \"Actual Data\",\r\n                color: \"Blue\",\r\n                points: readingsArray(),\r\n                interpolate: \"none\"\r\n            }\r\n\r\n        ]\r\n        , [radius, soilType]);\r\n\r\n\r\n    // The graph must be given data, even if its empty.\r\n    const noData = [\r\n        {\r\n            color: \"steelblue\",\r\n            points: [{ x: 0, y: 0 }],\r\n            interpolate: \"none\"\r\n        }\r\n    ];\r\n\r\n    // Calculations require radius, so if radius is\r\n    // null then don't render the graph.\r\n    const Graph = () => {\r\n        if (!radius || curReport.readings.length <= 1) {\r\n            return (\r\n                <LineChart\r\n                    width={380}\r\n                    height={400}\r\n                    xLabel=\"No data to show\"\r\n                    yLabel=\"\"\r\n                    data={noData}\r\n                />\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <LineChart\r\n                    showLegends=\"true\"\r\n                    width={380}\r\n                    height={400}\r\n                    xLabel=\"Square Root of Time (s)\"\r\n                    yLabel=\"Infiltration (cm)\"\r\n                    data={data}\r\n                    hideLines={false}\r\n                    hidePoints={false}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"text-center my-4\">\r\n                <Graph />\r\n                {\r\n                    C1 && C2 && K &&\r\n                    < h2 > C1: {`${C1.toFixed(4)}`}, C2: {`${C2.toFixed(4)}`}, K: {`${K.toFixed(4)}`}</h2>\r\n                }\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default ConductivityGraph;","import { useEffect, useState } from 'react';\r\nimport { Card, Button, Spinner, } from 'react-bootstrap'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getPhotoFromID, deletePhoto } from './albumsSlice'\r\n\r\nexport const PhotoCard = ({ index, fullID, reportId }) => {\r\n    let [data, setData] = useState(null);\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setData(null)\r\n        getPhotoFromID(fullID).then((d) => { setData(d) });\r\n    }, [fullID]);\r\n\r\n    return (\r\n        <Card className=\"mt-4\">\r\n            <Card.Img className=\"mt-2\" variant=\"top\" src={data} />\r\n            <Card.Body className=\"align-content-right\">\r\n                {data === null ? <Card.Text><Spinner animation=\"border\" /></Card.Text> : null}\r\n                <Button variant=\"outline-danger\" size=\"lg\" className=\"w-100\" onClick={() => {\r\n                    dispatch(deletePhoto({ reportId, photoIndex: index }));\r\n                }\r\n                }>Delete</Button>\r\n            </Card.Body>\r\n        </Card >\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Alert, Container, Row, Col, CardGroup } from 'react-bootstrap';\r\nimport { selectCurId, selectReports } from \"../../reports/reportsSlice\";\r\nimport { addPhoto, deleteAllPhotos, selectAlbums } from '../../photos/albumsSlice';\r\nimport { PhotoCard } from '../../photos/PhotoCard'\r\nimport { downloadAllImages, fetchAllImages } from '../../reports/reportsDataPackager';\r\nexport const ResultsViewPhotos = (props) => {\r\n    const dispatch = useDispatch();\r\n    const reportId = useSelector(selectCurId);\r\n    const curReportAlbum = useSelector(selectAlbums)[reportId];\r\n    const hasPhotos = curReportAlbum !== null && curReportAlbum !== undefined && curReportAlbum.length > 0;\r\n\r\n    function handleFile(e) {\r\n        if (e.target.files[0] === undefined) return;\r\n\r\n        let url = URL.createObjectURL(e.target.files[0]);\r\n        let xhRequest = new XMLHttpRequest();\r\n\r\n        xhRequest.onload = function () {\r\n            let reader = new FileReader();\r\n            reader.onloadend = function () {\r\n                dispatch(addPhoto({ reportId, thumbnailData: \"WIP\", fullImageData: reader.result }));\r\n            }\r\n            reader.readAsDataURL(xhRequest.response);\r\n        };\r\n        xhRequest.open('GET', url);\r\n        xhRequest.responseType = 'blob';\r\n        xhRequest.send();\r\n    }\r\n\r\n    const openPhotoUpload = () => {\r\n        document.getElementById(\"photoInput\").click();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"d-flex justify-content-center\">\r\n                <CardGroup>\r\n                    <Row>\r\n                        {!hasPhotos ? <Alert className=\"mt-2\" variant=\"secondary\"> No Photos </Alert>\r\n                            : curReportAlbum.map((photo, index) =>\r\n                                <PhotoCard\r\n                                    index={index}\r\n                                    fullID={photo.full}\r\n                                    reportId={reportId}\r\n                                />\r\n\r\n                            )\r\n                        }\r\n                    </Row>\r\n                </CardGroup>\r\n            </Container>\r\n\r\n            <Container className=\"text-center\">\r\n                <Row>\r\n                    <Col>\r\n                        <svg className=\"svg-add-photo\" onClick={openPhotoUpload}>\r\n                            <g\r\n                                transform=\"translate(100.000000, 95.000000) scale(0.01000, -0.010000)\">\r\n                                <path d=\"M4493.4,4986.4c-540.8-55.2-1136.9-227.8-1647.8-478.7C1846.7,4017.5,1091.9,3262.6,604,2268.4C-578.9-143.5,390-3043.3,2783.4-4258.4C5197.6-5485,8141.1-4520.8,9367.8-2104.3c962,1891.8,596.1,4179.4-904.4,5677.6C7425.4,4613.5,5961.7,5133.7,4493.4,4986.4z M7743,2551.5l75.9-66.7V1175.2V-132l-269.3-6.9l-271.6-6.9v1107v1104.7H4999.7H2721.3V546.9V-974.3l131.2,6.9l131.2,6.9l520.1,810.1c285.4,446.5,522.4,810.1,529.3,810.1s244-363.6,529.3-810.1l517.8-810.1l147.3-6.9c119.7-4.6,145,0,133.5,25.3c-6.9,18.4-117.4,195.6-246.3,395.8l-232.4,361.3l156.5,239.3c85.2,133.5,158.8,246.3,165.7,248.6c6.9,4.6,197.9-280.8,423.4-632.9l412-642.1h158.8h158.8l4.6-568.4l6.9-570.8l386.6-6.9l384.3-4.6v-138.1v-138.1H4735H2330l-73.6,66.7l-75.9,66.7V109.7v2375.1l75.9,66.7l73.6,66.7h2669.6h2669.6L7743,2551.5z M6613,1483.6c151.9-80.6,234.7-214,246.3-393.5c6.9-112.8,0-163.4-36.8-234.7c-195.6-379.7-706.5-377.4-881.4,2.3c-108.2,234.8-2.3,510.9,243.9,639.8C6290.8,1555,6491,1545.8,6613,1483.6z M8014.5-856.9v-391.2h379.7H8774v-264.7v-264.7h-379.7h-379.7v-379.7v-379.7h-276.2h-276.2v379.7v379.7h-379.7h-379.7v264.7v264.7h379.7h379.7V-873c0,207.1,6.9,384.3,16.1,391.2c6.9,9.2,131.2,16.1,276.2,16.1h260.1V-856.9z\" />\r\n                            </g>\r\n                        </svg>\r\n                        <input hidden type=\"file\" accept=\"image/*\" id=\"photoInput\" onChange={handleFile} />\r\n                        <h4>Add Photo</h4>\r\n                    </Col>\r\n                    {hasPhotos ?\r\n                        <Col>\r\n                            <svg className=\"svg-delete-photo\" onClick={() => { dispatch(deleteAllPhotos({ reportId })); }}>\r\n                                <g\r\n                                    transform=\"translate(100.000000, 145.000000) scale(0.1000, -0.10000)\">\r\n                                    <path d=\"M500,10C230.5,10,10,230.5,10,500s220.5,490,490,490s490-220.5,490-490S769.5,10,500,10z M726.6,622.5c24.5,24.5,24.5,73.5,0,98c-12.3,12.3-30.6,18.4-49,18.4s-36.8-6.1-49-18.4L506.1,598L383.6,720.5c-24.5,18.4-42.9,24.5-61.3,24.5c-18.4,0-36.8-6.1-49-18.4c-24.5-24.5-24.5-73.5,0-98l122.5-122.5L273.4,383.6c-24.5-24.5-24.5-73.5,0-98s73.5-24.5,98,0l122.5,122.5l122.5-122.5c24.5-24.5,73.5-24.5,98,0s24.5,73.5,0,98L591.9,506.1L726.6,622.5z\" />\r\n                                </g>\r\n                            </svg>\r\n                            <h4>Delete All Photos</h4>\r\n                        </Col> : null\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","//The Page we are displaying for the baer Initialize view\r\nimport React from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport Table from '../../baer/baer-results/table';\r\nimport { Protocols } from '../../reports/protocols';\r\nimport { ResultsViewButtons } from '../../reused-components/results-views/ResultsViewButtons';\r\nimport { ResultsViewNotes } from '../../reused-components/results-views/ResultsViewNotes';\r\nimport ConductivityForm from './ConductivityForm';\r\nimport ConductivityGraph from './ConductivityGraph';\r\nimport { ResultsViewPhotos } from '../../reused-components/results-views/ResultsViewPhotos';\r\n\r\nconst StandardResultsView = () => {\r\n\r\n  return (\r\n    <Container className=\"mt-3\">\r\n      <div class=\"rounded border shadow\">\r\n        <h1 className=\"pt-5 display-4\">Results</h1>\r\n        <Row className=\"mt-4\">\r\n          <Col>\r\n            <Table protocol={Protocols.Standard}>{/* This table is rendered from table.js */}</Table>\r\n          </Col>\r\n        </Row>\r\n        <ConductivityForm />\r\n        <ConductivityGraph />\r\n        <ResultsViewNotes />\r\n        <ResultsViewPhotos />\r\n        <ResultsViewButtons protocol={Protocols.Standard} />\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\nexport default StandardResultsView;","//The Page we are displaying for the standard Initialize view\r\n\r\nimport { Protocols } from '../../reports/protocols'\r\nimport InitializeView from '../../reused-components/initialize-views/InitializeView';\r\n\r\nconst StandardInitializeView = () => {\r\n  return <InitializeView protocol={Protocols.Standard} />\r\n}\r\nexport default StandardInitializeView;","//The Page we are displaying for the baer Initialize view\r\nimport React from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport { Protocols } from '../../reports/protocols';\r\nimport { ResultsViewButtons } from '../../reused-components/results-views/ResultsViewButtons';\r\nimport { ResultsViewNotes } from '../../reused-components/results-views/ResultsViewNotes';\r\nimport { ResultsViewPhotos } from '../../reused-components/results-views/ResultsViewPhotos';\r\nimport Table from \"./table\";\r\n\r\nconst BaerResultsView = () => {\r\n\r\n  return (\r\n    <Container className=\"mt-3\">\r\n      <div class=\"rounded border shadow\">\r\n        <h1 className=\"pt-4 display-4\">Results</h1>\r\n        <Row className=\"mt-4\">\r\n          <Col>\r\n            <Table protocol={Protocols.Baer}>{/* This table is rendered from table.js */}</Table>\r\n          </Col>\r\n        </Row>\r\n        <ResultsViewNotes />\r\n        <ResultsViewPhotos />\r\n        <ResultsViewButtons protocol={Protocols.Baer} />\r\n\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\nexport default BaerResultsView;","import { Container, Col, Row, Button, Table, Form, InputGroup } from \"react-bootstrap\";\r\nimport { addReading, removeReadingWithTime, selectCurReadingID, setGatheringData, selectCurId, selectReports } from '../../reports/reportsSlice';\r\nimport { selectInfiltrometerData, selectInitialVolume, selectTimeInterval } from '../../reused-components/reused-slices/initializeSlice';\r\nimport { selectLastVolume, setLastVolume, setSecondsElapsed, setVolume } from '../../reused-components/reused-slices/replicationSlice';\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addGeoDataToReading } from \"../../useful-functions/usefulFunctions\";\r\nimport { useState } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ErrorTip } from '../../reused-components/ErrorTip';\r\n\r\nexport const StandardReplicationTable = ({ intervals }) => {\r\n\r\n    const timeInterval = useSelector(selectTimeInterval);\r\n    const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n    const initialVolume = curInfiltrometerData.initialVolume;\r\n\r\n    const header = () => (\r\n        <>\r\n            <th>Time (s)</th>\r\n            <th>Volume (mL)</th>\r\n        </>\r\n\r\n    );\r\n\r\n    const rowData = () => {\r\n        var data = [{ time: 0, volume: initialVolume }];\r\n\r\n        for (var i = 1; i < intervals; i++) {\r\n            data = [...data, { time: timeInterval * i, volume: null }];\r\n        }\r\n\r\n\r\n        return data;\r\n    };\r\n\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)];\r\n    const readings = curReport.readings;\r\n    let rowIndex = 0;\r\n\r\n    const isValid = (time) => {\r\n        if (time === 0) return true;\r\n        if (readings.length <= 1) return true;\r\n\r\n        let i;\r\n\r\n        for (i = 1; i < readings.length; i++) {\r\n            if (Number(readings[i].secondsElapsed) === time) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (i >= readings.length) return true;\r\n\r\n        const vol = readings[i].volume;\r\n\r\n        if (vol === 0) return true;\r\n        if (vol < 0) return false;\r\n\r\n        return Number(readings[i - 1].volume) >= Number(vol);\r\n    }\r\n\r\n    const body = () => {\r\n\r\n        const initial = () => {\r\n            return (\r\n                <tr>\r\n                    <td>0</td>\r\n                    <td>{initialVolume}</td>\r\n                </tr>\r\n            );\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {rowData().map(row => row.time === 0 ? initial() : <StandardReplicationRow time={row.time} isValid={isValid(row.time)} index={++rowIndex} />)}\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col>\r\n                    <table class=\"table table-light table-striped table-hover\">\r\n                        <thead>\r\n                            <tr class=\"table-dark\">\r\n                                {header()}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {body()}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst StandardReplicationRow = ({ time, isValid, index }) => {\r\n    const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n    const initialVolume = curInfiltrometerData.initialVolume;\r\n    const dispatch = useDispatch();\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)];\r\n    const readings = curReport.readings;\r\n    const [maximum, setMaximum] = useState(initialVolume);\r\n\r\n    const onChange = (event) => {\r\n        var volume = event.target.value;\r\n        if (String(volume).length === 0 || volume == undefined || volume == null) {\r\n            dispatch(removeReadingWithTime(time));\r\n            return;\r\n        }\r\n        dispatch(addReading({\r\n            volume,\r\n            secondsElapsed: time,\r\n            lat: curInfiltrometerData.coordinates.lat,\r\n            lon: curInfiltrometerData.coordinates.lon\r\n        }));\r\n    }\r\n    useEffect(() => {\r\n        var min = Number(initialVolume);\r\n        //find the min up to our solution\r\n        for (var i = 0; i < readings.length; i++) {\r\n            if (readings[i].secondsElapsed === time) {\r\n                //this is us, set min\r\n                setMaximum(min);\r\n                break;\r\n            }\r\n            if (min >= Number(readings[i].volume)) {\r\n                min = Number(readings[i].volume);\r\n                setMaximum(min);\r\n            }\r\n        }\r\n    }, [readings])\r\n\r\n    return (\r\n\r\n        <tr>\r\n            <td>{time}</td>\r\n            <td>\r\n                <Form validated>\r\n                    <Form.Control\r\n                        autoFocus\r\n                        id={\"volume\" + time}\r\n                        type=\"number\"\r\n                        step=\"any\"\r\n                        size=\"sm\"\r\n                        min=\"0\"\r\n                        max={maximum}\r\n                        placeholder=\"Volume (mL)\"\r\n                        onChange={onChange}\r\n                        onSubmit={(e) => {e.preventDefault()}}\r\n                    />\r\n                </Form>\r\n                {/*isValid ? null : <ErrorTip size='25px' title=\"Error!\" content=\"This is an invalid reading.\" />*/}\r\n\r\n            </td>\r\n        </tr>\r\n    );\r\n}","//The Page we are displaying for the baer Initialize view\r\nimport React, { useState, useRef } from 'react';\r\nimport { Button, Col, Container, Form, Modal, Row, Card, Accordion, Overlay, Tooltip, Alert } from 'react-bootstrap';\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport beep from '../../audio/beep-01a.mp3';\r\nimport { useAudio } from '../../audio/Player';\r\nimport { Pages } from '../../page-redirection/Redirector';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { addReading, selectCurReadingID, setGatheringData, selectCurId, selectReports } from '../../reports/reportsSlice';\r\nimport { selectInitialVolume, selectTimeInterval } from '../../reused-components/reused-slices/initializeSlice';\r\nimport { selectLastVolume, setLastVolume, setSecondsElapsed, setVolume } from '../../reused-components/reused-slices/replicationSlice';\r\nimport { addGeoDataToReading } from '../../useful-functions/usefulFunctions';\r\nimport { StandardReplicationTable } from './StandardReplicationTable';\r\nimport './timer.css';\r\n\r\n\r\n\r\nfunction hideStartButton() {\r\n  document.getElementById(\"startButton\").className = \"w-50 visually-hidden\"\r\n\r\n}\r\nfunction hideVolumeNow() {\r\n  document.getElementById(\"volNow\").className = \"visually-hidden\"\r\n}\r\n\r\n\r\nconst StandardReplicationView = () => {\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n  const curID = useSelector(selectCurReadingID);\r\n  const setPlaying = (playing) => setState({ ...state, timerIsPlaying: playing });\r\n  const dispatch = useDispatch();\r\n\r\n  const renderTime = ({ remainingTime }) => {\r\n    setRemaining(remainingTime);\r\n    if (remainingTime === 0) {\r\n\r\n      return <div className=\"timer\">Time is up!</div>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n  const [state, setState] = useState(initializeState);\r\n  const [remaining, setRemaining] = useState(0);\r\n\r\n  const reports = useSelector(selectReports);\r\n  const curReport = reports[useSelector(selectCurId)];\r\n  const readings = curReport.readings;\r\n\r\n  function endProtocol() {\r\n\r\n    //mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n    //go to the results page\r\n    dispatch(setPage(Pages.StandardResultsView))\r\n  }\r\n  function stopProtocol() {\r\n\r\n    setState({\r\n      ...state,\r\n      timerIsPlaying: false\r\n    })\r\n  }\r\n\r\n  function allValid() {\r\n    for (let i = 1; i < readings.length; i++) {\r\n      if (Number(readings[i - 1].volume) < Number(readings[i].volume)) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /* Modal -------------------------------------------------------------- */\r\n  const [playing, setAudPlaying] = useAudio(beep);\r\n\r\n\r\n  /*Time -----------------------------------------------------------------*/\r\n\r\n  const addRow = () => {\r\n\r\n    //play audio\r\n    setAudPlaying(false);\r\n    setAudPlaying(true);\r\n\r\n    //increment the interval\r\n    //resume the timer\r\n    setState({ timerIsPlaying: true, key: state.key + 1 });\r\n  }\r\n\r\n  /* --------------------------------------------------------------------- */\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"mt-3\">\r\n        <div class=\"rounded border shadow\">\r\n          <Row>\r\n            <Col>\r\n              <div className=\"mt-4 timer-wrapper\">\r\n                <CountdownCircleTimer\r\n                  key={state.key}\r\n                  isPlaying={state.timerIsPlaying}\r\n                  duration={Number(timeInterval)}\r\n                  colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                  onComplete={() => addRow()}\r\n                >\r\n                  {renderTime}\r\n                </CountdownCircleTimer>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"text-center\">\r\n            <Col className=\"mt-4\">\r\n              <Button\r\n                variant=\"dark\"\r\n                className=\"w-50\"\r\n                size=\"lg\"\r\n                id=\"startButton\"\r\n                disabled={state.timerIsPlaying}\r\n                onClick={() => { setState({ timerIsPlaying: true, key: state.key + 1 }); hideStartButton() }}\r\n              >\r\n                {!state.timerIsPlaying ? \"Start Protocol\" : \"Replication Running...\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"text-center mb-4 mt-2\">\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                className=\"w-50\"\r\n                size=\"lg\"\r\n                onClick={allValid() ? endProtocol : stopProtocol}\r\n              >\r\n                {state.timerIsPlaying ? \"End Protocol\" : \"Continue\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n\r\n          {allValid() ? null :\r\n            <Row className=\"text-center mb-2\">\r\n              <Col>\r\n                <Alert\r\n                  variant=\"danger\"\r\n                  className=\"w-100\"\r\n                  size=\"lg\"\r\n                >\r\n                  Please correct all invalid data to continue.\r\n                </Alert>\r\n              </Col>\r\n            </Row>\r\n          }\r\n\r\n          <StandardReplicationTable intervals={state.key} />\r\n\r\n          <Row>\r\n            <Col className=\"mb-4 mt-2\">\r\n              <Accordion className=\"w-50\" style={{ margin: \"auto\" }}>\r\n                <Card\r\n                  bg='primary'\r\n                  text='white'>\r\n                  <Accordion.Toggle as={Card.Header} eventKey=\"0\" className='text-center'>Help</Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>To properly conduct a Standard Protocol replication:\r\n                      <ol type=\"1\">\r\n                        <li>Expose the soil about 1 to 3 cm in depth, removing any overlying ash or minerals.</li>\r\n                        <li>With a full infiltrometer, place the porous disk flat against the soil and perpendicular to the surface. Tap the “Start Protocol\" button as soon as the infiltrometer disk and the soil come into contact.</li>\r\n                        <li>At the end of each interval, a field in the above table will automatically appear and be selected for data entry. Record the current volume.</li>\r\n                        <li>Repeat these steps for as many intervals as necessary.</li>\r\n                        <li>Once all replications have been completed, select the \"End Protocol\" button.</li>\r\n                      </ol>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              </Accordion>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default StandardReplicationView;","import React from 'react';\r\nimport './App.css';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer/baer-replication/BaerReplicationView';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nimport { NavBar } from './features/navBar/NavBar';\r\nimport ReportsTable from './features/reports/ReportsTable';\r\nimport { HomePage } from './features/homepage/HomePage';\r\nimport { Pages } from './features/page-redirection/Redirector';\r\nimport { PdfViewer } from './features/pdfviewer/pdf-viewer'\r\nimport MiniDiskManual from './features/pdfviewer/MiniDiskManual.pdf';\r\nimport FieldGuide from './features/pdfviewer/Field-Guide.pdf'\r\nimport NewBaerManual from './features/pdfviewer/New-Baer-Article.pdf'\r\nimport StandardResultsView from './features/standard/standard-results/StandardResultsView';\r\nimport StandardInitializeView from './features/standard/standard-initialize/StandardInitializeView';\r\nimport BaerResultsView from './features/baer/baer-results/BaerResultsView';\r\nimport StandardReplicationView from './features/standard/standard-replication/StandardReplicationView';\r\nconst App = () => {\r\n  return (\r\n\r\n    <HashRouter>\r\n      <title>Infiltrometer Companion</title>\r\n      <NavBar />\r\n      {/*Initialize Assets so they are pre-loaded*/}\r\n\r\n      <Redirector protectedElements={\r\n        <Switch>\r\n          <Route exact path={Pages.Homepage}>\r\n            <HomePage />\r\n          </Route>\r\n          <Route exact path={Pages.BaerInitializeView}>\r\n            <BaerInitializeView />\r\n          </Route>\r\n          <Route exact path={Pages.BaerReplicationView}>\r\n            <BaerReplicationView />\r\n          </Route>\r\n          <Route exact path={Pages.BaerResultsView}>\r\n            <BaerResultsView />\r\n          </Route>\r\n          <Route exact path={Pages.StandardInitializeView}>\r\n            <StandardInitializeView />\r\n          </Route>\r\n          <Route exact path={Pages.StandardReplicationView}>\r\n            <StandardReplicationView />\r\n          </Route>\r\n          <Route exact path={Pages.StandardResultsView}>\r\n            <StandardResultsView />\r\n          </Route>\r\n          <Route exact path={Pages.InfiltrometerManual}>\r\n            <PdfViewer pdf={MiniDiskManual} />\r\n\r\n          </Route>\r\n          <Route exact path={Pages.BaerManual}>\r\n            <PdfViewer pdf={FieldGuide} />\r\n          </Route>\r\n          <Route exact path={Pages.NewBaerManual}>\r\n            <PdfViewer pdf={NewBaerManual} />\r\n          </Route>\r\n          <Route exact path={Pages.ReportsView}>\r\n            <ReportsTable />\r\n          </Route>\r\n\r\n        </Switch>\r\n      } />\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    notes: \"hi im a note\"\r\n};\r\n\r\nexport const ResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n    initialState,\r\n    reducers: {\r\n        setNotes: (state, action) => {\r\n            state.notes = action.payload;\r\n            console.log(state.notes);\r\n        }\r\n    }\r\n});\r\n\r\nexport default ResultsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\n//BAER\r\nimport baerInitializeReducer from '../features/reused-components/reused-slices/initializeSlice';\r\nimport baerReplicationReducer from '../features/reused-components/reused-slices/replicationSlice';\r\nimport baerResultsReducer from '../features/reused-components/reused-slices/resultsSlice';\r\nimport albumReducer from '../features/photos/albumsSlice';\r\n\r\n\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\nimport { reducer as reduxFormReducer } from 'redux-form'\r\nimport redirectReducer from '../features/page-redirection/redirector-slice';\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from 'redux-persist-indexeddb-storage';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\n\r\nconst reducers = combineReducers({\r\n  //BAER\r\n  baerInitialize: baerInitializeReducer,\r\n  baerReplication: baerReplicationReducer,\r\n  baerResults: baerResultsReducer,\r\n\r\n  //album\r\n  album: albumReducer,\r\n\r\n  counter: counterReducer,\r\n  reports: reportsSlice,\r\n  form: reduxFormReducer,\r\n  redirector: redirectReducer\r\n\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: storage('myDB'),\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\n\r\nexport function register(config) {\r\n\r\n\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${(process.env.PUBLIC_URL)}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n\r\n\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n\r\n\r\n  //\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { persistStore } from 'redux-persist';\r\nimport { IntiializePhotoDB } from './features/photos/photoDatabase';\r\n\r\nlet persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\nIntiializePhotoDB();\r\n"],"sourceRoot":""}