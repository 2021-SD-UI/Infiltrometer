{"version":3,"sources":["features/reports/reportsSlice.js","features/reports/protocols.js","app/soilTypes.js","features/baer/baer-initialize/bear-initializeSlice.js","features/baer/baer-replication/bear-replicationSlice.js","features/page-redirection/redirector-slice.js","app/infiltrometerType.js","features/baer/baer-initialize/BaerInitializeView.js","features/reports/severityRatings.js","features/reports/reportsDataPackager.js","features/baer/baer-results/table.js","features/baer/baer-replication/BaerReplicationView.js","features/baer/baer-results/BaerResultsView.js","features/regression/regression-js.js","features/regression/RegressionTesting.js","features/page-redirection/Redirector.js","features/navBar/baerLogo.js","features/navBar/NavBar.js","features/pdfviewer/pdf-viewer.js","features/reports/ReportsTable.js","features/pdfviewer/MiniDiskManual.pdf","features/pdfviewer/FieldGuide.pdf","features/pdfviewer/Manuals.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/baer/baer-results/bear-resultsSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["reportsSlice","createSlice","name","initialState","reports","curId","reducers","newReport","state","action","uuidv4","id","date","payload","protocol","readings","infiltrometerData","gatheringData","notes","addReading","setGatheringData","removeReport","Object","keys","setCurId","setNotes","actions","selectReports","selectCurId","selectNotes","selectCurReadingID","length","Protocols","soilTypes","nh0","alpha","baerInitializeSlice","initialVolume","coordinates","lat","long","soilType","infiltrometerRadius","infiltrometerSuction","timeInterval","site","observation","setInitialVolume","setInfiltrometerSuction","setTimeInterval","setSoilType","setInfiltrometerData","selectInitialVolume","baerInitialize","selectInfiltrometerData","selectTimeInterval","baerReplicationSlice","volume","secondsElapsed","lastVolume","setVolume","Number","setSecondsElapsed","setLastVolume","selectLastVolume","baerReplication","redirectSlice","page","setPage","selectPage","redirector","infiltrometerTypes","radius","displayName","BaerInitializeView","curInfiltrometerData","useSelector","useState","validated","setValidated","dispatch","useDispatch","setRadiusPreset","event","document","getElementById","value","setSuctionPreset","setSoilPreset","Container","className","class","Form","noValidate","onSubmit","preventDefault","form","currentTarget","suction","checkValidity","stopPropagation","Date","toString","Row","Col","Group","Label","Control","type","size","defaultValue","placeholder","step","required","min","Feedback","DropdownButton","variant","title","Dropdown","Item","onSelect","max","Button","onClick","SeverityRatings","Strong","Weak","None","Infinity","makeCSV","curReport","obj","makeCSVFromGroupOfReports","handleTextForCSV","text","undefined","replaceAll","reportGroup","data","forEach","reportID","curReportData","findAverageRate","findSeverityRating","i","reading","row","push","findRate","filename","readingIndex","report","sum","avgRate","Table","filterReadings","readingsArr","Time","Volume","Rate","map","key","index","console","log","toUpperCase","e","renderTableHeader","toPrecision","renderTime","remainingTime","BaerReplicationView","maxVolume","Math","curID","timerIsPlaying","setState","show","setShow","handleClose","playing","isPlaying","duration","colors","onComplete","disabled","Modal","onHide","backdrop","centered","Header","Title","Body","volumeReading","Text","muted","Footer","BaerResultsView","useEffect","xs","onChange","target","determinationCoefficient","results","predictions","observations","d","mean","reduce","a","ssyy","difference","accum","prediction","residual","round","number","precision","factor","methods","linear","options","len","n","run","rise","gradient","intercept","predict","x","points","point","equation","r2","string","exponential","denominator","exp","b","coeffA","coeffB","logarithmic","power","polynomial","lhs","rhs","k","order","l","c","j","coefficients","input","matrix","maxrow","abs","tmp","total","gaussianElimination","v","coeff","reverse","RegressionTesting","split","alert","Redirector","curPage","useLocation","pathname","to","BaerLogo","props","viewBox","width","height","NavBar","collapsed","Navbar","collapseOnSelect","expand","bg","Brand","href","src","alt","Toggle","Collapse","Nav","Link","NavDropdown","Divider","SinglePagePDFView","pdf","reload","numPages","setNumPages","pageNumber","setPageNumber","changePage","offset","prevPageNumber","previousPage","nextPage","file","workerSrc","onLoadSuccess","pdfjs","GlobalWorkerOptions","version","ReportsTable","selectedReports","setSelectedReports","numberOfSelectedReports","deleteReport","deselectReport","_repo","formatDate","toDateString","SelectButtons","reportKeys","deleteAllSelected","selectAll","unselectAll","light","striped","bordered","hover","toLowerCase","Check","label","checked","selectReport","showReport","Alert","MiniDiskManualView","MiniDiskManual","FieldGuideManualView","FieldGuide","App","exact","path","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","baerResultsSlice","combineReducers","baerInitializeReducer","baerReplicationReducer","baerResults","baerResultsReducer","counter","counterReducer","reduxFormReducer","redirectReducer","persistConfig","storage","persistedReducer","persistReducer","store","configureStore","reducer","Boolean","window","location","hostname","match","persistor","persistStore","ReactDOM","render","StrictMode","loading","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb8e5284.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n  reports: {},\r\n  curId: \"-1\",\r\n\r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId = uuidv4();\r\n\r\n      let newReport =\r\n      {\r\n        id: state.curId,\r\n        date: action.payload.date,\r\n        protocol: action.payload.protocol,\r\n        readings: [],\r\n        infiltrometerData: action.payload.infiltrometerData,\r\n        gatheringData: true,\r\n        notes: \"\",\r\n      }\r\n      //add it to the reports\r\n      state.reports[newReport.id] = newReport;\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action) => {\r\n      //add the reading to the end of the list of readings\r\n      state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings,\r\n        action.payload];\r\n    },\r\n    //sets the current gathering data report\r\n    setGatheringData: (state, action) => {\r\n      state.reports[state.curId].gatheringData = action.payload;\r\n    },\r\n    removeReport: (state, action) => {\r\n\r\n\r\n      //remove the report with the id provided in action.payload\r\n      delete state.reports[action.payload];\r\n\r\n      //if the current report is the one we are trying to delete, set a new current id\r\n      if (state.curId == action.payload) {\r\n        state.curId = Object.keys(state.reports)[0];\r\n      }\r\n\r\n\r\n\r\n    },\r\n    setCurId: (state, action) => {\r\n      state.curId = action.payload;\r\n    },\r\n    setNotes: (state, action) => {\r\n      state.reports[state.curId].notes = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading, setGatheringData, removeReport, setCurId, setNotes } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectNotes = (state) => state.reports.reports[state.reports.curId].notes;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport const selectGatheringData = (state) => state.reports.reports[state.reports.curId].gatheringData;\r\nexport default reportsSlice.reducer;","//Contains the reference to all protocol names\r\nexport const Protocols = {\r\n    Baer: \"BAER_PROTOCOL\",\r\n    Standard: \"TIME_PROTOCOL\",\r\n    Experimental: \"VOLUME_PROTOCOL \"\r\n}","//contains the single reference to the soil types to be used in reports under key \"soilType\"\r\nexport const soilTypes = {\r\n    clay: {nh0:1.09,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0.005 /* positive number,*/},\r\n    clayLoam:  {\r\n        nh0:1.31,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0.019 /* positive number,*/},\r\n    loam:  {nh0:1.56,\r\n         /* positive number, of n/h0*/ \r\n         alpha: .036 /* positive number,*/},\r\n     sand: {\r\n          alpha: 0.145,\r\n          nh0: 2.68\r\n     },\r\n     sandyClay:{\r\n          alpha: 0.027,\r\n          nh0: 1.23\r\n     },\r\n     loamySand:{\r\n          alpha: 0.124,\r\n          nh0: 2.28\r\n     },\r\n     sandyClayLoam:{\r\n          alpha: .059,\r\n          nh0: 1.48\r\n     },\r\n     sandyLoam:{\r\n          alpha: 0.075,\r\n          nh0: 1.89\r\n     },\r\n     silt:{\r\n          alpha: 0.016,\r\n          nh0: 1.37\r\n     },\r\n     siltLoam:{\r\n          alpha: .02,\r\n          nh0: 1.41\r\n     },\r\n     siltyClay:{\r\n          alpha: 0.005,\r\n          nh0: 1.09\r\n     },\r\n     siltyClayLoam:{\r\n          alpha: 0.01,\r\n          nh0: 1.23\r\n     }\r\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\n\r\n\r\n const initialState = {  \r\n        initialVolume: 95,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: {\r\n          nh0: 2.28,\r\n          alpha: 0.124\r\n        },\r\n        \r\n        infiltrometerRadius: 2.25,\r\n        infiltrometerSuction: -1,\r\n        timeInterval: 60,\r\n        site: \"Site\",\r\n        observation: \"Observation\",\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n  \r\n  name: 'baerInitialize',\r\n  \r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload;\r\n    \r\n    },\r\n    setInfiltrometerSuction: (state, action)=>{\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action)=>{\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType:(state, action)=>{\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData:(state, action)=>{\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n      state.site = action.payload.site;\r\n      state.observation = action.payload.observation;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\n\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\n\r\n\r\n//export the actions\r\nexport const {  setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType,setInfiltrometerData } = baerInitializeSlice.actions;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","import {  createSlice } from '@reduxjs/toolkit';\r\n\r\n/**\r\n * Initialize all the data associated with a reading....\r\n * Dispatch the addReading action from the reportsSlice after validating the reading\r\n */\r\nconst initialState = {\r\n  volume: 0,\r\n  secondsElapsed: 0,\r\n  lastVolume: 0\r\n};\r\n\r\nexport const baerReplicationSlice = createSlice({\r\n    name: 'baerReplication',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    /**\r\n     *Sets the current volume in the reading \r\n     * @param {the current state} state \r\n     * @param {must contain a volume payload} action \r\n     */\r\n    setVolume: (state, action)=>{\r\n      state.volume = Number(action.payload);\r\n    }\r\n    ,\r\n    setSecondsElapsed: (state, action)=>{\r\n      state.secondsElapsed = Number(action.payload);\r\n    }\r\n    ,\r\n    setLastVolume:(state, action)=>{\r\n      state.lastVolume = Number(action.payload);\r\n    }\r\n\r\n  }\r\n});\r\n\r\nexport const {setVolume, setSecondsElapsed, setLastVolume} = baerReplicationSlice.actions;\r\n\r\n\r\nexport const selectLastVolume = (state) => state.baerReplication.lastVolume;\r\n\r\nexport default baerReplicationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    page: null\r\n};\r\n\r\nexport const redirectSlice = createSlice({\r\n  name: 'redirector',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     setPage: (state, action) => {\r\n      state.page = action.payload;\r\n    }}\r\n});\r\n\r\nexport const {setPage} = redirectSlice.actions;\r\nexport const selectPage = (state) => state.redirector.page;\r\n\r\nexport default redirectSlice.reducer;","export const infiltrometerTypes = {\r\n   MiniDisk:{\r\n       radius: 2.25,\r\n       displayName: \"Mini Disk\"\r\n   },\r\n   MiniDiskV1:{\r\n       radius: 1.6,\r\n       displayName: \"Mini Disk Version 1\"\r\n   }\r\n}","//The Page we are displaying for the baer Initialize view\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addReading, newReport, selectCurId, selectReports } from '../../reports/reportsSlice';\r\nimport { Protocols } from '../../reports/protocols'\r\nimport {\r\n  selectInitialVolume, selectInfiltrometerData,\r\n  selectInfiltrometerRadius, selectInfiltrometerSuction,\r\n  setInitialVolume, setInfiltrometerSuction, setTimeInterval,\r\n  selectTimeInterval, setSoilType, selectSoilType, setInfiltrometerData\r\n} from './bear-initializeSlice';\r\nimport { setLastVolume, setSecondsElapsed, setVolume } from '../baer-replication/bear-replicationSlice';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { Button, Form, Dropdown, DropdownButton, Container, Row, Col } from 'react-bootstrap';\r\nimport { infiltrometerTypes } from '../../../app/infiltrometerType';\r\n\r\nconst BaerInitializeView = () => {\r\n  const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n  const [validated, setValidated] = useState(true);\r\n  const dispatch = useDispatch();\r\n\r\n  const setRadiusPreset = (event) => {\r\n    let radius = document.getElementById(\"radius\");\r\n    radius.value = event;\r\n  }\r\n\r\n  const setSuctionPreset = (event) => {\r\n    let suction = document.getElementById(\"suction\");\r\n    suction.value = event;\r\n  }\r\n\r\n  const setSoilPreset = (event) => {\r\n    let nh0 = document.getElementById(\"nh0\");\r\n    let alpha = document.getElementById(\"alpha\");\r\n    nh0.value = event.nh0;\r\n    alpha.value = event.alpha;\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const form = event.currentTarget;\r\n    let site = document.getElementById(\"site\").value;\r\n    let observation = document.getElementById(\"observation\").value;\r\n    let volume = document.getElementById(\"volume\").value;\r\n    let suction = document.getElementById(\"suction\").value;\r\n    let timeInterval = document.getElementById(\"timeInterval\").value;\r\n    let radius = document.getElementById(\"radius\").value;\r\n    let nh0 = document.getElementById(\"nh0\").value;\r\n    let alpha = document.getElementById(\"alpha\").value;\r\n\r\n    if (form.checkValidity() === false) {\r\n      setValidated(true);\r\n      event.stopPropagation();\r\n    }\r\n    else {\r\n      let infiltrometerData = {\r\n        initialVolume: volume,\r\n        coordinates: { lat: 0, long: 0, },\r\n        soilType: { nh0: nh0, alpha: alpha },\r\n        infiltrometerRadius: radius,\r\n        timeInterval: timeInterval,\r\n        infiltrometerSuction: suction,\r\n        site,\r\n        observation\r\n      }\r\n\r\n      //set the infitrometer data in the store\r\n      dispatch(setInfiltrometerData(infiltrometerData));\r\n\r\n      //set the last volume to the initial volume for the replication view\r\n      dispatch(setInitialVolume(volume));\r\n      dispatch(setVolume(volume));\r\n      dispatch(setLastVolume(volume));\r\n\r\n      //send out the new report to the store\r\n      dispatch(newReport({\r\n        date: (new Date()).toString(),\r\n        protocol: Protocols.Baer,\r\n        infiltrometerData\r\n      }));\r\n\r\n      //add the intial reading\r\n      dispatch(addReading({\r\n        volume: volume,\r\n        secondsElapsed: 0\r\n      }));\r\n\r\n      //change the page\r\n      dispatch(setPage(\"/Infiltrometer/baer-replication\"));\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    let site = document.getElementById(\"site\"); site.value = \"\";\r\n    let observation = document.getElementById(\"observation\"); observation.value = \"\";\r\n    let volume = document.getElementById(\"volume\"); volume.value = \"\";\r\n    let suction = document.getElementById(\"suction\"); suction.value = \"\";\r\n    let timeInterval = document.getElementById(\"timeInterval\"); timeInterval.value = \"\";\r\n    let radius = document.getElementById(\"radius\"); radius.value = \"\";\r\n    let nh0 = document.getElementById(\"nh0\"); nh0.value = \"\";\r\n    let alpha = document.getElementById(\"alpha\"); alpha.value = \"\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"mt-3\">\r\n        <div class=\"rounded border shadow\">\r\n          <h1 className=\"pt-5 display-4\">Initialize BAER Protocol</h1>\r\n          <Form className=\"p-5\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label>Site Name</Form.Label>\r\n                  <Form.Control\r\n                    id=\"site\"\r\n                    type=\"text\"\r\n                    size=\"lg\"\r\n                    defaultValue={curInfiltrometerData.site}\r\n                    placeholder=\"Enter site name...\"\r\n                  />\r\n                  <div className=\"pt-2\"/>\r\n                  <Form.Label>Observation Name</Form.Label>\r\n                  <Form.Control\r\n                    id=\"observation\"\r\n                    type=\"text\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    defaultValue={curInfiltrometerData.observation}\r\n                    placeholder=\"Enter observation...\"\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-5\">\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label>Volume (mL)</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"volume\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={curInfiltrometerData.initialVolume}\r\n                    placeholder=\"Initial Volume (mL)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label className=\"pt-3\">Suction (cm)</Form.Label>\r\n                  <DropdownButton variant=\"dark\" title=\"Preset Suction Values\">\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-0.5)}> -0.5 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-1)}> -1 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-2)}> -2 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-3)}> -3 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-4)}> -4 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-5)}> -5 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-6)}> -6 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-7)}> -7 </Dropdown.Item>\r\n                  </DropdownButton>\r\n                  <div className=\"pt-2\"/>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"suction\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    max=\"0\"\r\n                    defaultValue={curInfiltrometerData.infiltrometerSuction}\r\n                    placeholder=\"Suction (cm)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label>Time (seconds)</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"timeInterval\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"1\"\r\n                    defaultValue={curInfiltrometerData.timeInterval}\r\n                    placeholder=\"Time (sec)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label className=\"pt-3\">Radius (cm)</Form.Label>\r\n                  <DropdownButton variant=\"dark\" title=\"Preset Infiltrometer Types\">\r\n                    <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDisk.radius)}>\r\n                      {infiltrometerTypes.MiniDisk.displayName}\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDiskV1.radius)}>\r\n                      {infiltrometerTypes.MiniDiskV1.displayName}\r\n                    </Dropdown.Item>\r\n                  </DropdownButton>\r\n                  <div className=\"pt-2\"/>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"radius\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={infiltrometerTypes.MiniDisk.radius}\r\n                    placeholder=\"Radius (cm)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label className=\"pt-3\">Soil Type</Form.Label>\r\n                  <DropdownButton variant=\"dark\" title=\"Preset Soil Types\">\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clay)}> Clay </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clayLoam)}> Clay Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loam)}> Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loamySand)}> Loamy Sand </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sand)}> Sand </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyClay)}> Sandy Clay </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyLoam)}> Sandy Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.silt)}> Silt </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltLoam)}> Silt Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClay)}> Silty Clay </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClayLoam)}> Silty Clay Loam </Dropdown.Item>\r\n                  </DropdownButton>\r\n                  <div className=\"pt-2\" />\r\n                  <Form.Label>N/H0</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"nh0\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={soilTypes.loamySand.nh0}\r\n                    placeholder=\"N/H0\"\r\n                  />\r\n                  <div className=\"pt-2\"/>\r\n                  <Form.Label>Alpha</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"alpha\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={soilTypes.loamySand.alpha}\r\n                    placeholder=\"Alpha\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-4\">\r\n              <Col>\r\n                <Button type=\"submit\" variant=\"dark\" size=\"lg\" className=\"w-100\">Start Protocol</Button>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n              <Col>\r\n                <Button variant=\"danger\" size=\"sm\" className=\"w-100\" onClick={handleReset}>Clear Values</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default BaerInitializeView;","//Contains the reference to all protocol names\r\nexport const SeverityRatings = {\r\n    Strong: {min: 0, max: 3, name: \"Strong\"},\r\n    Weak: {min: 3, max: 8, name: \"Weak\"},\r\n    None: {min: 8, max: Infinity, name: \"None\"}\r\n}","import { SeverityRatings } from \"./severityRatings\";\r\n\r\n\r\n/**\r\n * create a csv of the current report\r\n * @param {The current report} i\r\n */\r\nexport function makeCSV(curReport) {\r\n\r\n\r\n    let obj = {};\r\n    obj[curReport.id] = curReport;\r\n    return makeCSVFromGroupOfReports(obj);\r\n\r\n}\r\n\r\n\r\nfunction handleTextForCSV(text) {\r\n    if (text == undefined) return (\"\");\r\n    return text.toString().replaceAll('\"', '\"\"');\r\n\r\n}\r\n/**\r\n * \r\n * @param {Object of key-report pairs} reportGroup \r\n * @returns \r\n */\r\nexport function makeCSVFromGroupOfReports(reportGroup) {\r\n    let data = [['Date', 'Protocol', 'Soil Alpha', 'Soil NH/O', 'Average Rate (mL/min)', 'Severity Rating', 'Site Name', 'Observation Name',\r\n        'Notes', 'Replication Number', 'Time (sec)', 'Volume(mL)', 'Rate(mL / min)']];\r\n    Object.keys(reportGroup).forEach(reportID => {\r\n        let curReport = reportGroup[reportID];\r\n        let curReportData = [curReport.date, curReport.protocol, curReport.infiltrometerData.soilType.alpha, curReport.infiltrometerData.soilType.nh0,\r\n        findAverageRate(curReport), findSeverityRating(findAverageRate(curReport)).name, handleTextForCSV(curReport.infiltrometerData.site),\r\n        handleTextForCSV(curReport.infiltrometerData.observation), handleTextForCSV(curReport.notes)];\r\n\r\n        let i = 0;\r\n        //readings data\r\n        curReport.readings.forEach(reading => {\r\n            //reading data\r\n            let row = [...curReportData];\r\n\r\n            row.push((i + 1).toString(), reading.secondsElapsed,\r\n                reading.volume,\r\n                findRate(i, curReport));\r\n\r\n            data.push(row);\r\n            i++;\r\n        });\r\n    });\r\n    return { data, filename: \"reports.csv\" }\r\n}\r\n\r\n/**\r\n * Find ml/min for a reading\r\n * @param {The current reading index} i\r\n */\r\nexport function findRate(readingIndex, report) {\r\n    if (readingIndex > 0) {\r\n\r\n        let deltaV = report.readings[readingIndex - 1].volume - report.readings[readingIndex].volume;\r\n        let deltaT = report.readings[readingIndex].secondsElapsed - report.readings[readingIndex - 1].secondsElapsed;\r\n        return (deltaV) / (deltaT / 60);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Find average rate (ml/min)\r\n * Relies on findRate(i) to get rates for calculating the average\r\n * @param {The current reading index} i\r\n */\r\nexport function findAverageRate(report) {\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < report.readings.length; i++) {\r\n        sum += findRate(i, report);\r\n    }\r\n\r\n    return sum / (report.readings.length - 1);\r\n}\r\n\r\n/**\r\n * Returns severity rating based on average rate\r\n * See severityRatings.js for severity rating values\r\n * @param {Average flow rate} avgRate\r\n */\r\nexport function findSeverityRating(avgRate) {\r\n    if (avgRate >= SeverityRatings.None.min)\r\n        return SeverityRatings.None;\r\n    if (avgRate >= SeverityRatings.Strong.min && avgRate < SeverityRatings.Strong.max)\r\n        return SeverityRatings.Strong;\r\n    if (avgRate >= SeverityRatings.Weak.min && avgRate < SeverityRatings.Weak.max)\r\n        return SeverityRatings.Weak;\r\n    else return SeverityRatings.None;\r\n}\r\n\r\n","import React, {Component, useEffect, useState} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\nimport {SeverityRatings} from \"../../reports/severityRatings\";\r\nimport { findAverageRate, findSeverityRating, findRate } from '../../reports/reportsDataPackager';\r\n\r\nconst Table = () => {\r\n    const rawReports = useSelector(selectReports);\r\n\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n\r\n\r\n    const [state, setState] = useState(filterReadings());\r\n\r\n\r\n\r\n    /**\r\n     * Create an array to use for a table row from reading data\r\n     */\r\n    function filterReadings(){\r\n        \r\n\r\n        if (curReport == undefined) return{reports: []};\r\n\r\n        let readingsArr = [];\r\n        for(let i = 0; i < curReport.readings.length; i++){\r\n            readingsArr[i] = {\r\n\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i, curReport)\r\n\r\n            };\r\n        }\r\n        return {reports: readingsArr};\r\n    }\r\n\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const {id, Time, Volume,Rate} = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate.toPrecision(4)}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        try{\r\n            let header = Object.keys(state.reports[0])\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toUpperCase() === \"ID\") {\r\n                return <th key={index}>{key.toUpperCase()}</th>\r\n            }\r\n            if (key.toUpperCase() === \"TIME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n            }\r\n\r\n\r\n            if (key.toUpperCase() === \"VOLUME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n            }\r\n            if (key.toUpperCase() === \"RATE\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n            }\r\n        })\r\n        }\r\n        catch (e){\r\n            return <th key = {0}>No Readings To Display</th>;\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n     //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                    <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                <table class=\"table table-light table-striped table-hover\">\r\n                    <tbody>\r\n                        <tr class=\"table-dark\">\r\n                            <th class=\"text-center\">AVERAGE (mL/min)</th>\r\n                            <th className=\"text-center\">SEVERITY RATING</th>\r\n                        </tr>\r\n                        <tr class=\"table-striped\">\r\n                            <td className=\"text-center\">{findAverageRate(curReport).toPrecision(4)}</td>\r\n                            <td class=\"text-center\">{findSeverityRating(findAverageRate(curReport)).name}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","//The Page we are displaying for the baer Initialize view\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport reportsSlice, {addReading, selectCurId, selectReports, selectCurReadingID, setGatheringData} from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport  Table  from '../baer-results/table';\r\nimport { Modal, Button, Form, Container, Row, Col, } from 'react-bootstrap';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  \r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n  const curID = useSelector(selectCurReadingID);\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n  const dispatch = useDispatch();\r\n\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n  const [state, setState] = useState(initializeState);\r\n\r\n  function endProtocol() {\r\n\r\n    //mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n    //go to the results page\r\n    dispatch(setPage(\"/Infiltrometer/baer-results\"))\r\n  }\r\n\r\n    /* Modal -------------------------------------------------------------- */\r\n    const [show, setShow] = useState(false);\r\n    const [validated, setValidated] = useState(false);\r\n    const handleClose = () => {setShow(false); setPlaying(false)};\r\n    const handleShow = () => setShow(true);\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      setValidated(true);\r\n      const form = event.currentTarget;\r\n      const volumeReading = document.getElementById(\"volumeReading\").value;\r\n      if (form.checkValidity() === false) {\r\n        event.stopPropagation();\r\n      }\r\n      else {\r\n        handleClose();\r\n        setValidated(false);\r\n        //calculate the total number of elapsed seconds\r\n        let secondsElapsed = (curID + 1) * timeInterval;\r\n      \r\n        //set the volume and time in the replication store\r\n        dispatch(setLastVolume(volumeReading));\r\n        dispatch(setVolume(volumeReading));\r\n        dispatch(setSecondsElapsed(secondsElapsed));\r\n        \r\n        //add the reading using the reports slice\r\n        dispatch(addReading({volume: volumeReading, secondsElapsed}));\r\n      }\r\n    };\r\n    /* --------------------------------------------------------------------- */\r\n\r\n  return (\r\n      <>\r\n        <Container className=\"mt-3\">\r\n          <div class=\"rounded border shadow\">\r\n            <h1 className=\"pt-5 display-4\">Current Replication: {curID+1}</h1>\r\n            <Row>\r\n              <Col>\r\n                <div className=\"mt-4 timer-wrapper\">\r\n                  <CountdownCircleTimer\r\n                    key={state.key}\r\n                    isPlaying = {state.timerIsPlaying}\r\n                    duration={Number(timeInterval)}\r\n                    colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                    onComplete={() => handleShow()}\r\n                  >\r\n                    {renderTime}\r\n                  </CountdownCircleTimer>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"text-center\">\r\n              <Col className=\"mt-4\">\r\n                <Button \r\n                  variant=\"dark\" \r\n                  className=\"w-50\"\r\n                  size=\"lg\"\r\n                  disabled={state.timerIsPlaying}\r\n                  onClick = {()=>{ setState({timerIsPlaying: true, key: state.key+1});}}\r\n                >\r\n                  {!state.timerIsPlaying? \"Start Replication\" : \"Replication Running...\"}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"text-center\">\r\n              <Col className=\"mt-2\">\r\n                <Button \r\n                  variant=\"secondary\" \r\n                  className=\"w-50\"\r\n                  size=\"lg\"\r\n                  onClick={endProtocol}\r\n                >\r\n                    End Protocol\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-4\">\r\n              <Col>\r\n                <Table>{/* This table is rendered from table.js */}</Table>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Container>\r\n\r\n        <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          backdrop=\"static\"\r\n          centered\r\n        >        \r\n          <Modal.Header>\r\n            <Modal.Title>Enter volumetric data for replication: {curID+1}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form \r\n              noValidate \r\n              validated={validated} \r\n              onSubmit={handleSubmit}\r\n            >\r\n              <Form.Group>\r\n                <Form.Text muted>\r\n                  Previous volume: {maxVolume} mL\r\n                </Form.Text>\r\n                <Form.Control\r\n                required\r\n                type=\"number\"\r\n                step=\"any\"\r\n                size=\"lg\"\r\n                min=\"0\"\r\n                max={maxVolume}\r\n                id=\"volumeReading\"\r\n                placeholder=\"Volume (mL)\"\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  Please enter a valid reading, or hit \"Cancel\".\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Modal.Footer>\r\n                <Button \r\n                  variant=\"outline-secondary\" \r\n                  size=\"lg\" \r\n                  onClick={handleClose}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button \r\n                  type=\"submit\" \r\n                  variant=\"dark\" \r\n                  size=\"lg\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n    );\r\n\r\n}\r\n\r\nexport default BaerReplicationView;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectCurId, selectReports } from \"../../reports/reportsSlice\";\r\nimport Table from \"./table\";\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { makeCSV } from \"../../reports/reportsDataPackager\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { selectNotes, setNotes } from \"../../reports/reportsSlice\";\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\n\r\nconst BaerResultsView = () => {\r\n\r\n  const reports = useSelector(selectReports);\r\n  const curReport = reports[useSelector(selectCurId)];\r\n  const notes = useSelector(selectNotes);\r\n\r\n  const dispatch = useDispatch();\r\n  const [state, setState] = useState(notes);\r\n  const changeNotes = (event) => {\r\n    dispatch(setNotes(event));\r\n    setState(event);\r\n  }\r\n  useEffect(() => setState(notes), []);\r\n  \r\n  return (\r\n      <Container className=\"mt-3\">\r\n        <div class=\"rounded border shadow\">\r\n          <h1 className=\"pt-5 display-4\">Results</h1>\r\n          <Row className=\"mt-4\">\r\n            <Col>\r\n              <Table>{/* This table is rendered from table.js */}</Table>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"justify-content-center mb-5\">\r\n            <Col xs={11}>\r\n              <h1 className=\"display-6\">Add Notes to Report</h1>\r\n              <TextareaAutosize className=\"w-100\" value={state} onChange={(e) => changeNotes(e.target.value)}/>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"my-2 text-center\">\r\n            <Col>\r\n              <Button\r\n                variant=\"dark\"\r\n                className=\"w-50\"\r\n                size=\"lg\"\r\n                onClick={() => dispatch(setPage(\"/Infiltrometer/baer-initialize\"))}\r\n              >\r\n                New Test\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-center\">\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                className=\"w-50\"\r\n                size=\"lg\"\r\n                onClick={() => dispatch(setPage(\"/Infiltrometer/reports\"))}\r\n              >\r\n                Reports\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-2 mb-5 text-center\">\r\n            <Col>\r\n              <CSVLink \r\n                {/*onClick ->*/ ...makeCSV(curReport)} \r\n                class=\"btn btn-success btn-lg w-50\"\r\n              >\r\n                Download Report\r\n              </CSVLink>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n  );\r\n}\r\nexport default BaerResultsView;","const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","import React from 'react';\r\nimport {methods} from '../regression/regression-js';\r\nexport function RegressionTesting(){\r\n\r\n    function handleChange(event) {\r\n    state.value = event.target.value;\r\n  }\r\n  let state = {\r\n      value: \"\",\r\n      results: {}\r\n  };\r\n  function handleSubmit(event) {\r\n    //create the data values\r\n    let points= state.value.split(\" \");\r\n    for (let i = 0; i < points.length; i ++){\r\n        points[i] = points[i].split(',');\r\n    }\r\n    state.results = methods.polynomial(points, { order: 2, precision: 15 });\r\n\r\n    alert('Points were submitted: ' + points + \"\\nRegression output: \" + state.results.string);\r\n    console.log(state.results);\r\n  }\r\n    return(\r\n        <div>\r\n\r\n        \r\n        <form>\r\n        <label>\r\n          Data Points: {state.value}\r\n          <input type=\"text\" onChange={handleChange}></input>\r\n        </label>\r\n        \r\n        </form>\r\n            <div>\r\n                <button onClick = {handleSubmit}>\r\n                    Submit For Regression\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\n//Used to redirect to new pages from global state\r\n export const Redirector = () =>{\r\n\r\n    const curPage = useLocation().pathname;\r\n    const page = useSelector(selectPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    \r\n    //reset the page\r\n    if (curPage == page) {\r\n        dispatch(setPage(null));\r\n        return null;\r\n    }\r\n    \r\n    \r\n\r\n    return page!=null ? <Redirect to ={page}/> : null;\r\n  }\r\n","import React from \"react\"\n\nexport function BaerLogo(props){\n    return(\n        <svg viewBox = {\"0 0 \" + props.width + \" \" +props.height} width=\"127\" height=\"53\">\n            <path  d=\"M34 29L34 31L35.4722 32.5L36.6944 34.0556L37.1944 35L37.4722 37L37 39L36.6667 40L36.3333 41L35.3333 44L35 45L34.6944 46L34.4167 47L34.1111 49L34.1111 50L34.3889 52L34.7778 54L34.9167 55L34.9722 57L34.9167 58L34.7778 59L34.3611 61L34.1389 62L33.8611 63L33.3889 65L33.1944 66L32.8056 68L32.3889 70L32.0833 72L31.9167 74L31.7778 75L31.3889 77L31.0833 79L31.0278 80L31 82L31 84L31 87L31 90L31 91L31.0278 93L31.0833 94L31.2222 95L31.7222 97L32.6389 98.9167L34.1111 100.583L36 102L37 102.667L38 103.333L40 104.611L41 105.194L43 106.389L45 107.611L47 108.75L48 109.222L50 110.222L51 110.75L53 111.5L54.9722 111.583L55.8889 111.25L57.2778 109.889L57.8333 108.056L57.7222 107.056L57 105L58.5 104.333L60.0556 103.583L62 102.889L63 102.639L64 102.389L66 102.083L68 102L69 102L71 101.917L73 101.611L74 101.389L75 101.222L77 101.111L79 101.472L80 101.833L81 102.167L82 102.556L83 102.833L85 103.361L86 103.611L88 103.833L90 103.583L90.9444 103.333L91.9444 102.972L92.5 102.806L94 102L93.4722 100.583L92.5 99.4167L90.9167 98.25L89.9722 97.75L88.0833 96.5278L86.5 94.9167L85.9444 93.9722L85.4722 93L84.8333 91L84.5556 90L83.7222 88L82.5278 86L81.75 85L79.9722 83L79 82L77 80.0833L76 79.2222L74 77.6111L72 75.9167L70.1111 74.0556L69.3056 73.0556L68.7778 72.5L68 71L70.0556 70.9167L72 70.5278L74 69.7222L75 69.1667L77 68.0278L79 67.1667L80 66.9722L82 67.25L83 67.5556L84.9444 67.9167L85.5 67.9722L87 68L87 66.5L86.9167 64.9444L86.75 64L86.5278 63L86.1389 62L85.1389 60.0833L83.75 58.5L82.9167 57.9444L81 57.25L80 57.0833L78 57L77 57L75 56.9722L74 56.8889L72 56.3056L70.0556 55.1944L69.5 54.75L68 54L68 52L69.25 51.2222L69.6667 50.6944L71.1389 48.9722L72.6389 47.0278L73.3889 46.0833L75.0556 44.3889L75.9444 43.6111L77.5278 41.9167L78.1389 40.9722L78.7222 40L79.1389 39.0556L79.7222 37.5L80 36L78.5 35.3056L77.9444 35.3333L76.9444 35.2778L75 35.6944L73 36.3889L72 36.8333L70 37.7778L69 38.2222L68 38.7778L67 39.25L65 40.3611L64.0556 40.9167L63.0556 41.3611L62.5 41.6667L61 42L61 38.9444L61 37L61.0278 35L61.25 33L61.5 32L62.3889 30L62.9167 29L63.6944 27L63.9722 25L64 23L64 22.0556L64 19L61.9444 19L60 18.9167L58 18.5278L57 18.1667L55 17.4722L53 17.1111L52 17.1111L51 17.2222L49 17.6389L47 18.1667L46 18.4722L44.0833 19.5L43.2222 20.25L42.4167 21.0833L41 22.9722L39.5833 24.75L38.7778 25.5278L37.0278 26.7778L35.5 27.7778L34 29M53 21L52.2778 22.1389L51.75 22.3333L50 23L51 21L53 21M63 27L62.2222 27.7222L61.75 27.75L60.9444 27.9444L59 28L59.7778 27.2778L60.25 27.25L61.0556 27.0556L63 27M39 29.3333L39.3333 29.6667L38.6667 29.6667L39 29.3333M65 56L64.2222 57.5L62.9444 58.9444L62.0278 59.6944L61.5 60.2222L60 61L60.7778 59.5L62.0556 58.0556L62.9722 57.3056L63.5 56.7778L65 56M64.6667 59.6667L64.6667 60.3333L64.3333 60.3333L64.3333 59.6667L64.6667 59.6667M59 61L58 63L57 63L57 62L59 61M65.6667 62.6667L65.6667 63.3333L65.3333 63.3333L65.3333 62.6667L65.6667 62.6667M70.6667 84.6667L70.6667 85L70.3333 85.3333L70.3333 84.6667L70.6667 84.6667M70 87L69.9167 88.5L69.7778 89.0556L69.3333 90.9444L68.9722 91.9444L68.8056 92.5L68 94L67.5278 93.2222L67.6667 92.6944L67.75 91.8889L68.3333 90.0278L68.6389 89.1111L69.0278 88.3056L69.1944 87.7778L70 87M36 88L39 88L40 89L35 89L36 88M42 89L41 90L42 89M67 95L66 96L67 95z\"/>\n        </svg>\n    );\n}\n\n\n","\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { BaerLogo } from \"./baerLogo\";\r\nexport const NavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initialState = {\r\n        collapsed: false\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n    return(\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n\r\n            <Navbar.Brand href=\"https://www.mtu.edu/computing/\" >\r\n                <div class=\"container\">\r\n                    <div class = \"row\">\r\n                         <div class = \"col\">\r\n                            <BaerLogo width = {1} height = {110}>\r\n                            </BaerLogo>\r\n                        </div>\r\n                        <div class = \"col\">\r\n                             <img\r\n                                src=\"https://www.mtu.edu/mtu_resources/images/download-central/logos/husky-icon/white.png\"\r\n                                width=\"56\"\r\n                                className=\"d-inline-block align-top\"\r\n                                alt=\"MTU logo\"\r\n                                />\r\n                               \r\n                        </div>\r\n                       \r\n                    </div>\r\n                </div>\r\n                \r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                    <Nav.Link onClick = {()=>dispatch(setPage(\"/Infiltrometer\"))}>\r\n                        About Us\r\n                    </Nav.Link>\r\n                    <NavDropdown title=\"New Test\" id=\"new-test-drop-down\">\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/baer-initialize/\"))}>\r\n                            BAER protocol</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <Nav.Link onClick={()=>dispatch(setPage(\"/Infiltrometer/reports/\"))}>\r\n                        My Reports\r\n                    </Nav.Link>\r\n                     <NavDropdown title=\"Manuals\" id=\"manuals-drop-down\">\r\n                         <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-baer/\"))}>\r\n                            BAER\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-infiltrometer/\"))}>\r\n                            Infiltrometer</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                    </NavDropdown>\r\n                </Nav>\r\n                <Nav>\r\n                    <Nav.Link href=\"https://github.com/2021-SD-UI/Infiltrometer/\">\r\n                        GitHub\r\n                    </Nav.Link>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport {Document, Page, pdfjs} from 'react-pdf';\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nexport default function SinglePagePDFView(props) {\r\n    \r\n    let {pdf, reload} = props\r\n    \r\n    const [numPages, setNumPages] = useState(null);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n\r\n    function onDocumentLoadSuccess({numPages}) {\r\n        \r\n        if (reload){\r\n           \r\n            previousPage(); nextPage(); reload = false;\r\n        }\r\n        setNumPages(numPages);\r\n        setPageNumber(1);\r\n    }\r\n    \r\n    function changePage(offset) {\r\n        setPageNumber(prevPageNumber => prevPageNumber + offset);\r\n    }\r\n    function previousPage() {\r\n        changePage(-1);\r\n    }\r\n    function nextPage() {\r\n        changePage(1);\r\n    }\r\n   \r\n    return (\r\n        <div class=\"container\">\r\n            <div class = \"row mt-2\"/>\r\n            <div class = \"row text-center\">\r\n                <div class = \"col-4\"></div>\r\n                <div class = \"col-4\" >\r\n                      <Document\r\n                    file={pdf}\r\n                    options = {{workerSrc :\"/pdf.worker.js\"}}\r\n                    onLoadSuccess = {onDocumentLoadSuccess}\r\n                    >\r\n                    <Page pageNumber= {pageNumber}/>\r\n                    \r\n                    </Document>\r\n                </div>\r\n                <div class = \"col-4\" ></div>\r\n                <div class = \"row mt-2\"/>\r\n                <div class = \"row\">\r\n                    <p>\r\n                        Page {pageNumber || (numPages ? 1 :\"--\")} of {numPages || \"--\"}\r\n                    </p>\r\n                   <div class = \"col-2\"/>\r\n                    <div class = \"col\">\r\n                        <button type=\"button\" class=\"btn btn-secondary w-100\" disabled ={pageNumber<=1} onClick={previousPage}>\r\n                            Previous\r\n                        </button>\r\n                    </div>\r\n                    <div class = \"col-2\"/>\r\n                    <div class = \"col\">\r\n                        <button type=\"button\" class=\"btn btn-dark w-100\" disabled={pageNumber>=numPages} onClick ={nextPage}>\r\n                            Next\r\n                        </button>\r\n                    </div>\r\n                    <div class = \"col-2\"/>\r\n                </div>\r\n                <div class = \"row mt-\"/>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n\r\n    \r\n    );\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Protocols } from \"./protocols\";\r\nimport { removeReport, selectReports, setCurId } from \"./reportsSlice\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { makeCSV, makeCSVFromGroupOfReports } from \"./reportsDataPackager\";\r\nimport { selectCurId } from \"./reportsSlice\";\r\nimport React, { useState } from \"react\";\r\nimport { Container, Row, Col, Form, Button, Table, Alert } from \"react-bootstrap\";\r\nconst ReportsTable = () => {\r\n\r\n    const [selectedReports, setSelectedReports] = useState({});\r\n    const numberOfSelectedReports = Object.keys(selectedReports).length;\r\n\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)]\r\n    const dispatch = useDispatch();\r\n    /**\r\n     * Map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return Object.keys(reports).map(reportID => {\r\n\r\n            const report = reports[reportID]\r\n            return (\r\n                <>\r\n                    <tr key={report.id}>\r\n                        <td>\r\n                            <Container className=\"my-2\">\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form>\r\n                                            <Form.Check\r\n                                                label={formatDate(report.date)}\r\n                                                checked={selectedReports[report.id] != undefined}\r\n                                                onChange={() => {\r\n                                                    if (selectedReports[report.id] != undefined) {\r\n                                                        deselectReport(report);\r\n                                                    }\r\n                                                    else {\r\n                                                        selectReport(report);\r\n                                                    }\r\n\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                        </Form>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                        <td>\r\n                            <Container className=\"my-2\">\r\n                                <Row>\r\n                                    {report.infiltrometerData.site}\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                        <td>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Button\r\n                                            variant=\"dark\"\r\n                                            className=\"w-100 my-1\"\r\n                                            onClick={() => { showReport(report) }}\r\n                                        >\r\n                                            View\r\n                                        </Button>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Button\r\n                                            variant=\"danger\"\r\n                                            className=\"w-100 my-1\"\r\n                                            onClick={() => { deleteReport(report) }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                    </tr>\r\n                </>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Deselects and deletes the provided report\r\n     * @param {\r\n     * } report \r\n     */\r\n    function deleteReport(report) {\r\n        //delete the report from selected if it is in selected\r\n        if (selectedReports[report.id] != undefined) deselectReport(report);\r\n\r\n        //remove the report from the store\r\n        dispatch(removeReport(report.id))\r\n    }\r\n\r\n    /**\r\n     * Deletes all the currently selected reports\r\n     */\r\n    function deleteAllSelected() {\r\n\r\n        let reportKeys = Object.keys(selectedReports);\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            deleteReport(selectedReports[reportKeys[i]]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the report from the selected reports\r\n     * @param {} report \r\n     */\r\n    function deselectReport(report) {\r\n        var _repo = { ...selectedReports };\r\n        delete _repo[report.id];\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Adds the report to the selected reports\r\n     * @param {} report \r\n     */\r\n    function selectReport(report) {\r\n        var _repo = { ...selectedReports };\r\n        _repo[report.id] = report;\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Selects all the reports\r\n     */\r\n    function selectAll() {\r\n        let reportKeys = Object.keys(reports);\r\n        var _repo = { ...selectedReports };\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            _repo[reportKeys[i]] = reports[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Unselects all reports\r\n     */\r\n    function unselectAll() {\r\n        let reportKeys = Object.keys(reports);\r\n        var _repo = { ...selectedReports };\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            delete _repo[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n\r\n    function showReport(report) {\r\n        switch (report.protocol) {\r\n            case Protocols.Baer:\r\n                dispatch(setCurId(report.id));\r\n                dispatch(setPage(\"/Infiltrometer/baer-results\"));\r\n\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function formatDate(date) {\r\n        let d = new Date(date);\r\n        if (d.toDateString() === new Date().toDateString()) {\r\n            return \"Today\";\r\n        }\r\n        return (d.toDateString());\r\n    }\r\n\r\n    /**\r\n     * Create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        let header = ['Date', 'Site', 'Options'];\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toLowerCase() === \"site\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Site</th>\r\n            }\r\n            if (key.toLowerCase() === \"date\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Date</th>\r\n            }\r\n            if (key.toLowerCase() == \"options\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Options</th>\r\n            }\r\n\r\n        })\r\n    }\r\n    /**\r\n     * Conditional renderer for the download and delete buttons that require selecting\r\n     */\r\n    function SelectButtons() {\r\n\r\n        if (numberOfSelectedReports > 0) {\r\n            return (\r\n                <>\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            className=\"w-100\"\r\n                            onClick={() => { deleteAllSelected() }}\r\n                        >\r\n                            Delete ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <CSVLink {...makeCSVFromGroupOfReports(selectedReports)} class=\"btn btn-success w-100\">\r\n                            Download ({numberOfSelectedReports})\r\n                        </CSVLink>\r\n                    </Col>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            disabled\r\n                            variant=\"secondary\"\r\n                            className=\"w-100\"\r\n                        >\r\n                            Delete ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            disabled\r\n                            variant=\"secondary\"\r\n                            className=\"w-100\"\r\n                        >\r\n                            Download ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n                </>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n    //see if there is any data\r\n    if (Object.keys(reports).length > 0) {\r\n        //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <Container className=\"mt-3\">\r\n                <div class=\"rounded border shadow\">\r\n                    <h1 className=\"my-5 display-4\">Reports</h1>\r\n                    <Row className=\"justify-content-center m-2\">\r\n                        <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                            <Button\r\n                                variant=\"dark\"\r\n                                className=\"w-100\"\r\n                                onClick={() => { selectAll() }}\r\n                            >\r\n                                Select All\r\n                            </Button>\r\n                        </Col>\r\n                        <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                className=\"w-100\"\r\n                                onClick={() => { unselectAll() }}\r\n                            >\r\n                                Unselect All\r\n                            </Button>\r\n                        </Col>\r\n                        <SelectButtons />\r\n                    </Row>\r\n                    <Row className=\"m-3\">\r\n                        <Col>\r\n                            <Table light striped bordered hover id='students'>\r\n                                <tbody>\r\n                                    <tr>{renderTableHeader()}</tr>\r\n                                    {renderTableData()}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container className=\"mt-3\">\r\n                <div class=\"rounded border shadow\">\r\n                    <Row>\r\n                        <h1 className=\"display-4\">No Saved Reports</h1>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Alert variant=\"danger w-50\" className=\"text-center\">Click \"New Test\" to start creating a report.</Alert>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default ReportsTable;","export default __webpack_public_path__ + \"static/media/MiniDiskManual.606fae66.pdf\";","export default __webpack_public_path__ + \"static/media/FieldGuide.31fa5636.pdf\";","\r\nimport React from \"react\";\r\nimport SinglePagePDFView from \"./pdf-viewer\"\r\nimport MiniDiskManual from './MiniDiskManual.pdf';\r\nimport FieldGuide from './FieldGuide.pdf'\r\nexport const MiniDiskManualView = ()=> {\r\n    return(<SinglePagePDFView pdf = {MiniDiskManual}/>)\r\n}\r\nexport const FieldGuideManualView = () =>{\r\n  return(<SinglePagePDFView pdf = {FieldGuide}/>)\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer/baer-results/BaerResultsView';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nimport { NavBar } from './features/navBar/NavBar';\r\nimport SinglePagePDFView from \"./features/pdfviewer/pdf-viewer\";\r\nimport ReportsTable from './features/reports/ReportsTable';\r\nimport { MiniDiskManualView, FieldGuideManualView } from './features/pdfviewer/Manuals';\r\nconst  App = ()=> {\r\n  return (\r\n    \r\n    <BrowserRouter>\r\n    <title>Infiltrometer Companion</title>\r\n          <NavBar/>\r\n          <Redirector/>\r\n          <Switch>\r\n           \r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <h1>\r\n                  Home Page\r\n                </h1>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/manuals-baer\">\r\n              <FieldGuideManualView/>\r\n            \r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/manuals-infiltrometer\">\r\n              <MiniDiskManualView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/reports\">\r\n               <ReportsTable/>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {baerInitializeSlice} from \"../baer-initialize/bear-initializeSlice\";\r\n\r\n\r\n\r\nconst initialState = {\r\n    notes: \"hi im a note\"\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n      setNotes: (state, action)=>{\r\n\r\n          state.notes = action.payload;\r\n          console.log(state.notes);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers }  from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\nimport {reducer as reduxFormReducer} from 'redux-form'\r\nimport  redirectReducer  from '../features/page-redirection/redirector-slice';\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from 'redux-persist-indexeddb-storage';\r\n\r\nconst reducers = combineReducers({\r\n  baerInitialize: baerInitializeReducer,\r\n  baerReplication: baerReplicationReducer,\r\n  baerResults: baerResultsReducer,\r\n  counter: counterReducer,\r\n  reports: reportsSlice,\r\n  form: reduxFormReducer,\r\n  redirector: redirectReducer\r\n\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage :storage('myDB'),\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig,reducers);\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: persistedReducer\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  { PersistGate } from 'redux-persist/integration/react';\r\nimport {persistStore} from 'redux-persist';\r\n\r\nlet persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>   \r\n        <App />\r\n      </PersistGate>  \r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}