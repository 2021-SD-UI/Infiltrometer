{"version":3,"sources":["features/reports/reportsSlice.js","features/reports/protocols.js","app/soilTypes.js","features/baer/baer-initialize/bear-initializeSlice.js","features/baer/baer-replication/bear-replicationSlice.js","features/page-redirection/redirector-slice.js","app/infiltrometerType.js","features/baer/baer-initialize/BaerInitializeView.js","features/reports/severityRatings.js","features/baer/baer-results/table.js","features/baer/baer-replication/BaerReplicationView.js","features/baer/baer-results/BaerResultsView.js","features/regression/regression-js.js","features/regression/RegressionTesting.js","features/page-redirection/Redirector.js","features/navBar/NavBar.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/baer/baer-results/bear-resultsSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["reportsSlice","createSlice","name","initialState","reports","curId","reducers","newReport","state","action","id","date","payload","protocol","readings","infiltrometerData","gatheringData","addReading","setGatheringData","actions","selectReports","selectCurId","selectCurReadingID","length","Protocols","soilTypes","nh0","alpha","baerInitializeSlice","initialVolume","coordinates","lat","long","soilType","infiltrometerRadius","infiltrometerSuction","timeInterval","setInitialVolume","setInfiltrometerSuction","setTimeInterval","setSoilType","setInfiltrometerData","selectSoilType","baerInitialize","selectInitialVolume","selectInfiltrometerData","selectTimeInterval","baerReplicationSlice","volume","secondsElapsed","lastVolume","setVolume","Number","setSecondsElapsed","setLastVolume","selectLastVolume","baerReplication","redirectSlice","page","setPage","selectPage","redirector","infiltrometerTypes","radius","displayName","renderField","input","label","type","meta","touched","error","placeholder","connect","reduxForm","form","validate","values","errors","suction","onSubmit","dispatch","Date","toString","props","useSelector","change","handleSubmit","soilTypeSelected","pristine","reset","submitting","curSoilType","soilValues","curInfiltrometerData","useDispatch","setFormSoilType","setInfiltrometerType","infiltrometerType","useEffect","class","Form","expand","bg","variant","for","Field","component","className","FormLabel","DropdownButton","title","Dropdown","Item","onSelect","value","disabled","onClick","SeverityRatings","min","max","Infinity","Table","avgRate","curReport","useState","filterReadings","findRate","i","findAverageRate","sum","readingsArr","Time","Volume","Rate","Object","keys","map","key","index","console","log","toUpperCase","report","toPrecision","renderTime","remainingTime","BaerReplicationView","maxVolume","Math","timerIsPlaying","setState","curID","getVolumeReading","playing","volumeReading","prompt","validated","isNaN","parseFloat","window","confirm","isPlaying","duration","colors","onComplete","BaerResultsView","determinationCoefficient","data","results","predictions","observations","forEach","d","push","mean","reduce","a","observation","ssyy","difference","accum","prediction","residual","round","number","precision","factor","methods","linear","options","len","n","run","rise","gradient","intercept","predict","x","points","point","equation","r2","string","exponential","denominator","exp","b","coeffA","coeffB","logarithmic","power","polynomial","lhs","rhs","k","order","l","c","j","coefficients","matrix","maxrow","abs","tmp","total","gaussianElimination","v","coeff","reverse","RegressionTesting","onChange","event","target","split","alert","Redirector","curPage","useLocation","pathname","to","NavBar","collapsed","Navbar","collapseOnSelect","Container","Brand","src","width","height","alt","Toggle","Collapse","Nav","Link","NavDropdown","Divider","href","App","exact","path","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","baerResultsSlice","store","configureStore","reducer","baerInitializeReducer","baerReplicationReducer","baerResults","baerResultsReducer","counter","counterReducer","reduxFormReducer","redirectReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2badcb8d.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:[],\r\n    curId: -1\r\n    \r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId++;\r\n      state.reports = [...state.reports,(\r\n        {\r\n            id: state.curId,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerData: action.payload.infiltrometerData,\r\n            gatheringData: true,\r\n        }\r\n      )];\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action)=>{\r\n      //add the reading to the end of the list of readings\r\n        state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings, \r\n        action.payload]; \r\n    },\r\n    //sets the current gathering data report\r\n    setGatheringData: (state, action)=>{\r\n      state.reports[state.curId].gatheringData = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading, setGatheringData } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport const selectGatheringData = (state) => state.reports.reports[state.reports.curId].gatheringData;\r\nexport default reportsSlice.reducer;","//Contains the reference to all protocol names\r\nexport const Protocols = {\r\n    Baer: \"BAER_PROTOCOL\",\r\n    Standard: \"TIME_PROTOCOL\",\r\n    Experimental: \"VOLUME_PROTOCOL \"\r\n}","//contains the single reference to the soil types to be used in reports under key \"soilType\"\r\nexport const soilTypes = {\r\n    clay: {nh0:1.09,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0.005 /* positive number,*/},\r\n    clayLoam:  {\r\n        nh0:1.31,\r\n         /* positive number, of n/h0*/ \r\n         alpha: 0.019 /* positive number,*/},\r\n    loam:  {nh0:1.56,\r\n         /* positive number, of n/h0*/ \r\n         alpha: .036 /* positive number,*/},\r\n     sand: {\r\n          alpha: 0.145,\r\n          nh0: 2.68\r\n     },\r\n     sandyClay:{\r\n          alpha: 0.027,\r\n          nh0: 1.23\r\n     },\r\n     loamySand:{\r\n          alpha: 0.124,\r\n          nh0: 2.28\r\n     },\r\n     sandyClayLoam:{\r\n          alpha: .059,\r\n          nh0: 1.48\r\n     },\r\n     sandyLoam:{\r\n          alpha: 0.075,\r\n          nh0: 1.89\r\n     },\r\n     silt:{\r\n          alpha: 0.016,\r\n          nh0: 1.37\r\n     },\r\n     siltLoam:{\r\n          alpha: .02,\r\n          nh0: 1.41\r\n     },\r\n     siltyClay:{\r\n          alpha: 0.005,\r\n          nh0: 1.09\r\n     },\r\n     siltyClayLoam:{\r\n          alpha: 0.01,\r\n          nh0: 1.23\r\n     }\r\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\n\r\n\r\n const initialState = {  \r\n        initialVolume: 0,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: {\r\n          nh0: 0,\r\n          alpha: 0\r\n        },\r\n        \r\n        infiltrometerRadius: 0,\r\n        infiltrometerSuction: 0,\r\n        timeInterval: 30\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n    name: 'baerInitialize',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload;\r\n    \r\n    },\r\n    setInfiltrometerSuction: (state, action)=>{\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action)=>{\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType:(state, action)=>{\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData:(state, action)=>{\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\n\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\n\r\n\r\n//export the actions\r\nexport const {  setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType,setInfiltrometerData } = baerInitializeSlice.actions;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","import {  createSlice } from '@reduxjs/toolkit';\r\n\r\n/**\r\n * Initialize all the data associated with a reading....\r\n * Dispatch the addReading action from the reportsSlice after validating the reading\r\n */\r\nconst initialState = {\r\n  volume: 0,\r\n  secondsElapsed: 0,\r\n  lastVolume: 0\r\n};\r\n\r\nexport const baerReplicationSlice = createSlice({\r\n    name: 'baerReplication',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    /**\r\n     *Sets the current volume in the reading \r\n     * @param {the current state} state \r\n     * @param {must contain a volume payload} action \r\n     */\r\n    setVolume: (state, action)=>{\r\n      state.volume = Number(action.payload);\r\n    }\r\n    ,\r\n    setSecondsElapsed: (state, action)=>{\r\n      state.secondsElapsed = Number(action.payload);\r\n    }\r\n    ,\r\n    setLastVolume:(state, action)=>{\r\n      state.lastVolume = Number(action.payload);\r\n    }\r\n\r\n  }\r\n});\r\n\r\nexport const {setVolume, setSecondsElapsed, setLastVolume} = baerReplicationSlice.actions;\r\n\r\n\r\nexport const selectLastVolume = (state) => state.baerReplication.lastVolume;\r\n\r\nexport default baerReplicationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    page: null\r\n};\r\n\r\nexport const redirectSlice = createSlice({\r\n  name: 'redirector',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     setPage: (state, action) => {\r\n      state.page = action.payload;\r\n    }}\r\n});\r\n\r\nexport const {setPage} = redirectSlice.actions;\r\nexport const selectPage = (state) => state.redirector.page;\r\n\r\nexport default redirectSlice.reducer;","export const infiltrometerTypes = {\r\n   MiniDisk:{\r\n       radius: 2.25,\r\n       displayName: \"Mini Disk\"\r\n   },\r\n   MiniDiskV1:{\r\n       radius: 1.6,\r\n       displayName: \"Mini Disk Version 1\"\r\n   }\r\n}","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addReading, newReport, selectCurId, selectReports } from '../../reports/reportsSlice';\r\nimport {Protocols} from '../../reports/protocols'\r\nimport { selectInitialVolume, selectInfiltrometerData,\r\n  selectInfiltrometerRadius, selectInfiltrometerSuction,\r\nsetInitialVolume,\r\nsetInfiltrometerSuction, setTimeInterval, selectTimeInterval,setSoilType,selectSoilType, setInfiltrometerData} from './bear-initializeSlice';\r\nimport { setLastVolume, setSecondsElapsed } from '../baer-replication/bear-replicationSlice';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\nimport {Field, formValueSelector, reduxForm} from 'redux-form'\r\nimport { connect } from 'react-redux';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { Button, Form, FormLabel, Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport { infiltrometerTypes } from '../../../app/infiltrometerType';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error} }) => (\r\n  <div>\r\n    \r\n    <div>\r\n      <input {...input} placeholder={label} type={type}/>\r\n      {touched && ((error && <span>{error}</span>))}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.volume) {\r\n    errors.volume = 'Required'\r\n  } else if (values.volume < 0) {\r\n    errors.volume = 'Must be a value greater than zero'\r\n  }\r\n\r\n\r\n  if (!values.suction) {\r\n    errors.suction = 'Required'\r\n  } else if (Number(values.suction) >= 0) {\r\n    errors.suction = 'Must be a negative value'\r\n  }\r\n\r\n\r\n  if (!values.timeInterval) {\r\n    errors.timeInterval = 'Required'\r\n  } else if (Number(values.timeInterval) <= 0) {\r\n    errors.timeInterval = 'Time interval must be greater than 0'\r\n  }\r\n\r\n  if (!values.radius) {\r\n    errors.radius = \"Required\"\r\n  } else if (Number(values.radius) <= 0) { \r\n    errors.radius = 'Radius must be larger than 0'\r\n  }\r\n\r\n  if (!values.nh0){\r\n    errors.nh0 = \"Required\"\r\n  }\r\n  else if (Number(values.nh0) < 0){\r\n    errors.nh0 = 'Must be a positive number'\r\n  }\r\n   if (!values.alpha){\r\n    errors.alpha = \"Required\"\r\n  }\r\n  else if (Number(values.alpha) < 0){\r\n    errors.alpha = 'Must be a positive number'\r\n  }\r\n\r\n  return errors\r\n}\r\n\r\n\r\n\r\n\r\nconst BaerInitializeView = (props) => {\r\n  const infiltrometerData = useSelector(selectInfiltrometerData);\r\n  const { change, soilTypeSelected, handleSubmit, pristine, reset, submitting, soilValues } = props\r\n\r\n\r\n  //current soil type in the store\r\n  const curSoilType = useSelector(selectSoilType);\r\n  const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n\r\n  const dispatch = useDispatch();\r\n  /**\r\n   * Adds a new Baer prototocol report using the reports slice\r\n   * \r\n   */\r\n  const setFormSoilType = (soilType)=>{\r\n    if (soilType){\r\n      change(\"nh0\", soilType.nh0);\r\n      change(\"alpha\",soilType.alpha);\r\n\r\n      dispatch(setSoilType({\r\n          nh0: soilType.nh0,\r\n          alpha:soilType.alpha\r\n      }));\r\n    }\r\n    \r\n  }\r\n  const setInfiltrometerType = (infiltrometerType) =>{\r\n    change(\"radius\", infiltrometerType.radius);\r\n   \r\n  }\r\n\r\n  //the empty second array means \"Only execute once\"\r\n  useEffect(()=>{\r\n    loadDataAtStart();\r\n  }, []);\r\n\r\n\r\n  function loadDataAtStart(){\r\n    \r\n    //this is a check to say \"if not initial\"\r\n    if (curInfiltrometerData.infiltrometerRadius != 0){\r\n      //get the current report and populate data\r\n      change(\"radius\", curInfiltrometerData.infiltrometerRadius);\r\n      change(\"nh0\", curSoilType.nh0);\r\n      change(\"alpha\",curSoilType.alpha);\r\n      change(\"volume\", curInfiltrometerData.initialVolume);\r\n      change(\"suction\", curInfiltrometerData.infiltrometerSuction);\r\n      change(\"timeInterval\", curInfiltrometerData.timeInterval);\r\n    }  \r\n\r\n    \r\n\r\n\r\n  }\r\n\r\n  return (\r\n\r\n  \r\n        \r\n  <div class=\"container mt-5\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 bg-light rounded border shadow\">\r\n\r\n  <Form onSubmit = {handleSubmit} expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n    <div class=\"form-group row pt-4\">\r\n      <div class=\"col-4\"></div>\r\n      <label for=\"volume\" class=\"col-sm-2 col-form-label text-center fw-bolder\">Initial Volume (mL)</label>\r\n      <div class=\"col-sm-2 text-center\">\r\n        <Field name=\"volume\" type =\"number\" component={renderField} label=\"Initial Volume\"/>\r\n      </div>\r\n      <div class=\"col-4\"></div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <div className=\"col-4\"></div>\r\n      <FormLabel for=\"suction\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Suction (cm)</FormLabel>\r\n      <div class=\"col-sm-2 text-center \">\r\n      <Field name=\"suction\" type=\"number\" component={renderField} label=\"Suction\"/>\r\n      </div>\r\n      <div className=\"col-4\"></div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <div className=\"col-4\"></div>\r\n      <FormLabel for=\"timeInterval\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Time Interval (sec)</FormLabel>\r\n      <div class=\"col-sm-2 text-center \">\r\n      <Field name=\"timeInterval\" type=\"number\" component={renderField} label=\"Time Interval\"/>\r\n      </div>\r\n      <div className=\"col-4\"></div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <div className=\"col-4\"></div>\r\n      <FormLabel for=\"radius\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Radius (cm)</FormLabel>\r\n      <div class = \"form-group col-sm-2 text-center \">\r\n        <div className=\"col-4\"></div>\r\n        <div class=\"form-group row\">\r\n      <div class=\"col-sm-10\">\r\n      <DropdownButton  title=\"Preset Infiltrometer Types\" component=\"select\" bg=\"dark\" variant=\"dark\">\r\n        <Dropdown.Item onSelect = {()=>setInfiltrometerType(infiltrometerTypes.MiniDisk)}>\r\n          {infiltrometerTypes.MiniDisk.displayName}\r\n        </Dropdown.Item>\r\n        <Dropdown.Item onSelect = {()=>setInfiltrometerType(infiltrometerTypes.MiniDiskV1)}>\r\n          {infiltrometerTypes.MiniDiskV1.displayName}\r\n        </Dropdown.Item>\r\n      </DropdownButton>\r\n        </div>\r\n          <Field name=\"radius\" type=\"number\"  component={renderField} label=\"Radius\"/>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"row pt-2\">\r\n      <div className=\"col-4\"></div>\r\n      <label for=\"soilType\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Soil Type</label>\r\n     \r\n    <div class=\"col-sm-2\">\r\n\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-sm-10 text-center \">\r\n\r\n\r\n           <DropdownButton  title=\"Preset Soil Types\" component=\"select\" bg=\"dark\" variant=\"dark\">\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.clay)} >Clay</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.clayLoam)} >Clay Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.loam)} >Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.loamySand)} >Loamy Sand</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.sand)} >Sand</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.sandyClay)} >Sandy Clay</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.sandyLoam)} >Sandy Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.silt)} >Silt</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.siltLoam)} >Silt Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.siltyClay)} >Silty Clay</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.siltyClayLoam)} >Silty Clay Loam</Dropdown.Item>\r\n            </DropdownButton>\r\n\r\n          </div>\r\n         \r\n          <div  class=\"col-sm-10 text-center \">\r\n            <FormLabel for=\"nh0\" class=\"mt-2 mb-2 fw-bolder\" >(NH/O)</FormLabel>\r\n            <Field name=\"nh0\" component={renderField} type=\"number\" value=\"nh0\" label=\"NH0\"/>\r\n          </div>\r\n          <div class=\"col-sm-10 text-center \">\r\n            <FormLabel for=\"alpha\" class=\"mt-2 mb-2 fw-bolder\">(Alpha)</FormLabel>\r\n            <Field name=\"alpha\" component={renderField} type=\"number\" value=\"alpha\" label=\"Alpha\"/>\r\n          </div>\r\n          \r\n\r\n        </div>\r\n\r\n    </div>\r\n      <div className=\"col-4\"></div>\r\n    </div>\r\n\r\n\r\n\r\n     <div class=\"form-group row pt-4 \">\r\n       <div class=\"col-4\"></div>\r\n       <div class=\"col-sm-4\">\r\n          <button class=\"btn btn-dark w-100\"  type=\"submit\"  disabled={submitting}>Start Protocol</button>\r\n       </div>\r\n       <div class = \"row mt-2\"/>\r\n       <div class=\"col-4\"></div>\r\n     </div>\r\n      <div class=\"form-group row pb-4\">\r\n        <div class=\"col-4\"></div>\r\n        <div class=\"col-sm-4\">\r\n          <button type=\"button\" class=\"btn btn-secondary w-100\"  disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n        </div>\r\n        <div className=\"col-4\"></div>\r\n      </div>\r\n\r\n  </Form>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n     );\r\n}\r\nconst onSubmit = (values, dispatch) => {\r\n\r\n  \r\n  let infiltrometerData = {\r\n     initialVolume: Number(values.volume),\r\n        \r\n              coordinates: {\r\n                lat:0,\r\n                long: 0,\r\n                },\r\n                soilType:\r\n                  {\r\n                    nh0: values.nh0,\r\n                    alpha: values.alpha\r\n                  },\r\n                infiltrometerRadius: values.radius,       \r\n                timeInterval: Number(values.timeInterval),\r\n                infiltrometerSuction: Number(values.suction),\r\n  }\r\n  //set the infitrometer data in the store\r\n  dispatch(setInfiltrometerData(infiltrometerData));\r\n  //set the last volume to the initial volume for the replication view\r\n  dispatch(setLastVolume(infiltrometerData.initialVolume));\r\n  //send out the new report to the store\r\n  dispatch(newReport(  {\r\n            date: (new Date()).toString(),\r\n            protocol: Protocols.Baer,\r\n            infiltrometerData\r\n  }));\r\n\r\n  //add the intial reading\r\n  dispatch(addReading({\r\n    volume: Number(values.volume),\r\n    secondsElapsed: 0\r\n  }));\r\n\r\n  //change the page\r\n  dispatch(setPage(\"/Infiltrometer/baer-replication\"));\r\n}\r\n\r\n\r\nexport default connect()(reduxForm({\r\n  form: 'baerInitializeForm',\r\n  validate,\r\n  onSubmit\r\n\r\n})(BaerInitializeView));","//Contains the reference to all protocol names\r\nexport const SeverityRatings = {\r\n    Strong: {min: 0, max: 3},\r\n    Weak: {min: 3, max: 8},\r\n    None: {min: 8, max: Infinity}\r\n}","import React, {Component, useEffect, useState} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\nimport {SeverityRatings} from \"../../reports/severityRatings\";\r\n\r\nconst Table =()=> {\r\n    const rawReports = useSelector(selectReports);\r\n\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n\r\n\r\n    const [state, setState] = useState(filterReadings());\r\n\r\n    /**\r\n     * Find ml/min for a reading\r\n     * @param {The current reading index} i\r\n     */\r\n    function findRate(i){\r\n        if(i>0){\r\n\r\n            let deltaV = curReport.readings[i-1].volume - curReport.readings[i].volume;\r\n            let deltaT = curReport.readings[i].secondsElapsed - curReport.readings[i-1].secondsElapsed;\r\n            return (deltaV)/(deltaT/60);\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find average rate (ml/min)\r\n     * Relies on findRate(i) to get rates for calculating the average\r\n     * @param {The current reading index} i\r\n     */\r\n    function findAverageRate() {\r\n        let sum = 0;\r\n\r\n        for(let i = 0; i < curReport.readings.length; i++) {\r\n            sum += findRate(i);\r\n        }\r\n\r\n        return sum/(curReport.readings.length - 1);\r\n    }\r\n\r\n    /**\r\n     * Returns severity rating based on average rate\r\n     * See severityRatings.js for severity rating values\r\n     * @param {Average flow rate} avgRate\r\n     */\r\n    function findSeverityRating(avgRate) {\r\n        if (avgRate >= SeverityRatings.None.min)\r\n            return <td className=\"text-center\">None</td>\r\n        if (avgRate >= SeverityRatings.Strong.min && avgRate < SeverityRatings.Strong.max)\r\n            return <td className=\"text-center\">Strong</td>\r\n        if (avgRate >= SeverityRatings.Weak.min && avgRate < SeverityRatings.Weak.max)\r\n            return <td className=\"text-center\">Weak</td>\r\n        else return <td className=\"text-center\">N/A</td>\r\n    }\r\n\r\n    /**\r\n     * Create an array to use for a table row from reading data\r\n     */\r\n    function filterReadings(){\r\n        let readingsArr = [];\r\n        for(let i = 0; i < curReport.readings.length; i++){\r\n            readingsArr[i] = {\r\n\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i)\r\n\r\n            };\r\n        }\r\n        return {reports: readingsArr};\r\n    }\r\n\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const {id, Time, Volume,Rate} = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate.toPrecision(4)}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        let header = Object.keys(state.reports[0])\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toUpperCase() === \"ID\") {\r\n                return <th key={index}>{key.toUpperCase()}</th>\r\n            }\r\n            if (key.toUpperCase() === \"TIME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n            }\r\n\r\n\r\n            if (key.toUpperCase() === \"VOLUME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n            }\r\n            if (key.toUpperCase() === \"RATE\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n     //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div>\r\n                <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                    <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                <table class=\"table table-light table-striped table-hover\">\r\n                    <tbody>\r\n                        <tr class=\"table-dark\">\r\n                            <th class=\"text-center\">AVERAGE (mL/min)</th>\r\n                            <th className=\"text-center\">SEVERITY RATING</th>\r\n                        </tr>\r\n                        <tr class=\"table-striped\">\r\n                            <td className=\"text-center\">{findAverageRate().toPrecision(4)}</td>\r\n                            {findSeverityRating(findAverageRate())}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport reportsSlice, {addReading, selectCurId, selectReports, selectCurReadingID, setGatheringData} from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { useEffect } from 'react';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport  Table  from '../baer-results/table';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n\r\n  //the max allowed volume\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n  const dispatch = useDispatch();\r\n\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n\r\n  const [state, setState] = useState(initializeState);\r\n\r\n  //use to set the timer is playing variable\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n  const curID = useSelector(selectCurReadingID);\r\n\r\n  function endProtocol(){\r\n\r\n    //mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n\r\n    //go to the results page\r\n    dispatch(setPage(\"/Infiltrometer/baer-results\"))\r\n  }\r\n\r\n  // This function will be called when the timer reaches zero.\r\n  function getVolumeReading() {\r\n\r\n      //stop the timer from running\r\n      setPlaying(false);\r\n\r\n      let volumeReading = prompt(\"Enter volumetric data below.\");\r\n      let validated = false;\r\n\r\n      // Validate user input -------------------------------------------------------------------------\r\n      while(validated == false) {\r\n          // If user hits the cancel button\r\n          if (volumeReading == null)\r\n              return;\r\n          // Volume reading should be a non-negative number that is less than previous/initial volume.\r\n          else if (volumeReading > maxVolume || volumeReading < 0 || isNaN(parseFloat(volumeReading))) {\r\n              window.confirm(\"Invalid input! Make sure your volume reading is a number less than or equal to: \" + maxVolume);\r\n              volumeReading = prompt(\"Enter volumetric data below.\");\r\n          }\r\n          else\r\n              validated = true;\r\n      }\r\n      // ---------------------------------------------------------------------------------------------\r\n\r\n      //calculate the total number of elapsed seconds\r\n      let secondsElapsed = (curID + 1) * timeInterval;\r\n      \r\n      //set the volume and time in the replication store\r\n      dispatch(setLastVolume(volumeReading));\r\n      dispatch(setVolume(volumeReading));\r\n      dispatch(setSecondsElapsed(secondsElapsed));\r\n      \r\n      //add the reading using the reports slice\r\n      dispatch(addReading({volume: volumeReading, secondsElapsed}));\r\n  }\r\n\r\n  return (\r\n       \r\n      <div class=\"container-fluid\">\r\n        <div class = \"container\">\r\n            <div class = \"row mt-5\"/>\r\n            <div class =\"row\">\r\n                <div class=\"col-2\"></div>\r\n                <div class=\"col-8 text-center\">\r\n                    <div class=\"display-4 \">\r\n                      Current Replication: {curID}\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-2\"></div>\r\n            </div>\r\n            <div class = \"row mt-5\"/>\r\n        </div>\r\n          \r\n        <div class=\"row-12\">\r\n            \r\n          <div class=\"col-4\"/>\r\n          <div class =\"timer-wrapper\">\r\n            <CountdownCircleTimer\r\n                key={state.key}\r\n                isPlaying = {state.timerIsPlaying}\r\n                duration={Number(timeInterval)}\r\n                colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                onComplete={() => getVolumeReading()}\r\n              >\r\n                {renderTime}\r\n            </CountdownCircleTimer>\r\n          </div>\r\n          <div class=\"col-4\"/>\r\n        </div>\r\n\r\n        <div class = \"container\">\r\n          <div class = \"row mt-4\"/>\r\n          <div class = \"row-8 text-center\">\r\n            <div class=\"btn btn-dark w-50\"\r\n              disabled={state.timerIsPlaying}\r\n              onClick = {()=>{\r\n              setState({\r\n                timerIsPlaying: true,\r\n                key: state.key+1}\r\n                );\r\n                }}> {\r\n                  !state.timerIsPlaying? \"Start Replication\" : \"Replication Running...\" \r\n                    }\r\n            </div>\r\n          </div>\r\n          <div class = \"row mt-2\"/>\r\n          <div class = \"row-8 text-center\">\r\n            <div class=\"btn btn-secondary w-50\" onClick = {endProtocol}>\r\n              End Protocol\r\n            </div>\r\n          </div>\r\n          <div class = \"row mt-2\"/>\r\n        </div>\r\n\r\n          <div class =\"container\">\r\n            <div class=\"row-4\">\r\n              <div class = \"row mt-4\"/>\r\n                <Table  class=\"col-8\"/>\r\n              <div class = \"row mt-4\"/>\r\n            </div>\r\n          </div>\r\n\r\n            \r\n         <div class = \"col-10\"/>\r\n      </div>);\r\n\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<BaerReplicationView />, rootElement);\r\nexport default BaerReplicationView;","//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {selectReports} from \"../../reports/reportsSlice\";\r\nimport Table from \"./table\";\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\n\r\n\r\nconst  BaerResultsView = ()=> {\r\n  const reports = useSelector(selectReports);\r\n  const dispatch = useDispatch();\r\n\r\n  return (<div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8 text-center\">\r\n          <h1>Baer Results View</h1>\r\n\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8\">\r\n          <div class=\"container\">\r\n              <Table></Table>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n      </div>\r\n      <div className=\"row\">\r\n          <div className=\"col-sm-2\"></div>\r\n          <div className=\"col-sm-8 text-center\">\r\n              <button class=\"btn btn-dark\" onClick ={\r\n                ()=>dispatch(setPage(\"/Infiltrometer/baer-initialize\"))\r\n              }>  \r\n              New Test</button>\r\n          \r\n          </div>\r\n          <div className=\"col-sm-2\"></div>\r\n      </div>\r\n    </div>);\r\n}\r\nexport default BaerResultsView;","const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","import React from 'react';\r\nimport {methods} from '../regression/regression-js';\r\nexport function RegressionTesting(){\r\n\r\n    function handleChange(event) {\r\n    state.value = event.target.value;\r\n  }\r\n  let state = {\r\n      value: \"\",\r\n      results: {}\r\n  };\r\n  function handleSubmit(event) {\r\n    //create the data values\r\n    let points= state.value.split(\" \");\r\n    for (let i = 0; i < points.length; i ++){\r\n        points[i] = points[i].split(',');\r\n    }\r\n    state.results = methods.polynomial(points, { order: 2, precision: 15 });\r\n\r\n    alert('Points were submitted: ' + points + \"\\nRegression output: \" + state.results.string);\r\n    console.log(state.results);\r\n  }\r\n    return(\r\n        <div>\r\n\r\n        \r\n        <form>\r\n        <label>\r\n          Data Points: {state.value}\r\n          <input type=\"text\" onChange={handleChange}></input>\r\n        </label>\r\n        \r\n        </form>\r\n            <div>\r\n                <button onClick = {handleSubmit}>\r\n                    Submit For Regression\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\n//Used to redirect to new pages from global state\r\n export const Redirector = () =>{\r\n\r\n    const curPage = useLocation().pathname;\r\n    const page = useSelector(selectPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    \r\n    //reset the page\r\n    if (curPage == page) {\r\n        dispatch(setPage(null));\r\n        return null;\r\n    }\r\n    \r\n    \r\n\r\n    return page!=null ? <Redirect to ={page}/> : null;\r\n  }\r\n","\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nexport const NavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initialState = {\r\n        collapsed: false\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n    return(\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n\r\n            <Navbar.Brand>\r\n                 <img\r\n                    src=\"https://github.com/2021-SD-UI/Infiltrometer/blob/dev/infiltrometer21/src/features/navBar/MTU_Logo.png\"\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                    alt=\"MTU logo\"\r\n                    />\r\n                    Infiltrometer Companion\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                    <Nav.Link onClick = {()=>dispatch(setPage(\"/Infiltrometer\"))}>\r\n                        About Us\r\n                    </Nav.Link>\r\n                    <NavDropdown title=\"New Test\" id=\"new-test-drop-down\">\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/baer-initialize/\"))}>\r\n                            BAER protocol</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <Nav.Link onClick={()=>dispatch(setPage(\"/Infiltrometer/reports/\"))}>\r\n                        My Reports\r\n                    </Nav.Link>\r\n                     <NavDropdown title=\"Manuals\" id=\"manuals-drop-down\">\r\n                         <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-baer/\"))}>\r\n                            BAER\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-infiltrometer/\"))}>\r\n                            Infiltrometer</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                    </NavDropdown>\r\n                </Nav>\r\n                <Nav>\r\n                    <Nav.Link href=\"https://github.com/2021-SD-UI/Infiltrometer/\">\r\n                        GitHub\r\n                    </Nav.Link>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer/baer-results/BaerResultsView';\r\nimport { ShowReportsButton } from './features/reports/ShowReportsButon';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nimport { NavBar } from './features/navBar/NavBar';\r\nconst  App = ()=> {\r\n  return (\r\n    \r\n    <BrowserRouter>\r\n    <title>Infiltrometer Companion</title>\r\n          <NavBar/>\r\n          <Redirector/>\r\n          <Switch>\r\n           \r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <h1>\r\n                  Home Page\r\n                </h1>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/manuals-baer\">\r\n               <h1>\r\n                    TODO: Baer Manual\r\n                </h1>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/manuals-infiltrometer\">\r\n               <h1>\r\n                  TODO: infiltrometer Manual\r\n                </h1>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/reports\">\r\n               <h1>\r\n                  TODO: Reports Page\r\n                </h1>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n    volume: 0,\r\n    secondsElapsed: 0,\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\nimport {reducer as reduxFormReducer} from 'redux-form'\r\nimport  redirectReducer  from '../features/page-redirection/redirector-slice';\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    baerInitialize: baerInitializeReducer,\r\n    baerReplication: baerReplicationReducer,\r\n    baerResults: baerResultsReducer,\r\n    counter: counterReducer,\r\n    reports: reportsSlice,\r\n    form: reduxFormReducer,\r\n    redirector: redirectReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n       \r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}