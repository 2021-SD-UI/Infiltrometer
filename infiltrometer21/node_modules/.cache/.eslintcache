[{"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\index.js":"1","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\App.js":"2","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js":"3","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\store.js":"4","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\BaerReplicationView.js":"5","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\bear-initializeSlice.js":"6","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\bear-replicationSlice.js":"7","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ShowReportsButon.js":"8","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\BaerInitializeView.js":"9","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\bear-resultsSlice.js":"10","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js":"11","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js":"12","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\BaerResultsView.js":"13","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js":"14","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js":"15","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js":"16","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js":"17","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js":"18","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js":"19","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js":"20","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\table.js":"21"},{"size":707,"mtime":1632591552516,"results":"22","hashOfConfig":"23"},{"size":1470,"mtime":1632695213606,"results":"24","hashOfConfig":"23"},{"size":5151,"mtime":1632591545509,"results":"25","hashOfConfig":"23"},{"size":931,"mtime":1632672160761,"results":"26","hashOfConfig":"23"},{"size":4621,"mtime":1632695213607,"results":"27","hashOfConfig":"23"},{"size":2724,"mtime":1632672160762,"results":"28","hashOfConfig":"23"},{"size":1182,"mtime":1632591552514,"results":"29","hashOfConfig":"23"},{"size":504,"mtime":1632591545507,"results":"30","hashOfConfig":"23"},{"size":6411,"mtime":1632695213607,"results":"31","hashOfConfig":"23"},{"size":393,"mtime":1632602610375,"results":"32","hashOfConfig":"23"},{"size":1377,"mtime":1632769373695,"results":"33","hashOfConfig":"23"},{"size":1085,"mtime":1632591545506,"results":"34","hashOfConfig":"23"},{"size":1646,"mtime":1632694915377,"results":"35","hashOfConfig":"23"},{"size":2819,"mtime":1632591545505,"results":"36","hashOfConfig":"23"},{"size":569,"mtime":1632591552512,"results":"37","hashOfConfig":"23"},{"size":175,"mtime":1632591545507,"results":"38","hashOfConfig":"23"},{"size":202,"mtime":1632591545504,"results":"39","hashOfConfig":"23"},{"size":9271,"mtime":1632591545506,"results":"40","hashOfConfig":"23"},{"size":603,"mtime":1632672160762,"results":"41","hashOfConfig":"23"},{"size":547,"mtime":1632672160763,"results":"42","hashOfConfig":"23"},{"size":2694,"mtime":1632774623803,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1i4jf6k",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\index.js",[],["97","98"],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\App.js",["99"],"import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer-results/BaerResultsView';\r\nimport { ShowReportsButton } from './features/reports/ShowReportsButon';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nconst  App = ()=> {\r\n  return (\r\n    <BrowserRouter>\r\n          <Redirector/>\r\n          <Switch>\r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <Link to=\"/Infiltrometer/baer-initialize\">Baer Initialize View</Link>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\store.js",["100"],"import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\nimport {reducer as reduxFormReducer} from 'redux-form'\r\nimport  redirectReducer  from '../features/page-redirection/redirector-slice';\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    baerInitialize: baerInitializeReducer,\r\n    baerReplication: baerReplicationReducer,\r\n    baerResults: baerResultsReducer,\r\n    counter: counterReducer,\r\n    reports: reportsSlice,\r\n    form: reduxFormReducer,\r\n    redirector: redirectReducer\r\n  },\r\n});\r\n","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\BaerReplicationView.js",["101","102","103","104","105","106","107"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport {addReading} from '../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { useEffect } from 'react';\r\nimport { setPage } from '../page-redirection/redirector-slice';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n \r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n\r\n  //the max allowed volume\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n   const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n  \r\n  \r\n  const [state, setState] = useState(initializeState);\r\n\r\n  //use to set the key variable\r\n  const setKey = (key) => setState({...state, key});\r\n  //use to set the timer is playing variable\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n \r\n  function endProtocol(){\r\n\r\n    //go to the results page\r\n    dispatch(setPage(\"/Infiltrometer/baer-results\"))\r\n  }\r\n  // This function will be called when the timer reaches zero.\r\n  function getVolumeReading() {\r\n\r\n      //stop the timer from running\r\n      setPlaying(false);\r\n\r\n      let volumeReading = Number(prompt(\"Enter volumetric data below.\",0));\r\n\r\n      //don't record if cancel was pressed\r\n      if (!volumeReading) return;\r\n      // Notify user of invalid input if volume reading is greater than last volume or is negative.\r\n      while (volumeReading > maxVolume\r\n         || volumeReading < 0) {\r\n          window.confirm(\"Invalid input! Make sure your volume reading is less than or equal to: \" + maxVolume );\r\n          volumeReading = Number(prompt(\"Enter volumetric data below.\",0));\r\n          //don't record if cancel was pressed\r\n          if (!volumeReading) return;\r\n      }\r\n      //calculate the total number of elapsed seconds\r\n      let secondsElapsed = (state.key+1) * timeInterval;\r\n      \r\n      //set the volume and time in the replication store\r\n      dispatch(setLastVolume(volumeReading));\r\n      dispatch(setVolume(volumeReading));\r\n      dispatch(setSecondsElapsed(secondsElapsed));\r\n      \r\n      //add the reading using the reports slice\r\n      dispatch(addReading(\r\n            \r\n            {volume: volumeReading, secondsElapsed}      \r\n      ));\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <div className=\"timer-wrapper\">\r\n          <CountdownCircleTimer\r\n              key={state.key}\r\n              isPlaying = {state.timerIsPlaying}\r\n              duration={Number(timeInterval)}\r\n              colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n              onComplete={() => getVolumeReading()}\r\n          >\r\n            {renderTime}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n          <div>\r\n            Last Volume: {maxVolume}\r\n          </div>\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n             <button type=\"submit\" class=\"btn btn-primary\" disabled={state.timerIsPlaying} onClick = {()=>{\r\n              setState({\r\n                timerIsPlaying: true,\r\n                key: state.key+1}\r\n                );\r\n\r\n             }}>{\r\n            \r\n            !state.timerIsPlaying? \"Start Replication\" : \"Replication Running...\"\r\n            \r\n            }</button>\r\n            <button type=\"submit\" class=\"btn btn-secondary\" onClick = {endProtocol}>\r\n              End Protocol\r\n            </button>\r\n          </div>\r\n           \r\n        </div>\r\n      </div>);\r\n\r\n\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<BaerReplicationView />, rootElement);\r\nexport default BaerReplicationView;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\bear-initializeSlice.js",["108","109"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { soilTypes } from '../../app/soilTypes';\r\n\r\n\r\n const initialState = {  \r\n        initialVolume: 0,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: soilTypes.clay,\r\n        \r\n        infiltrometerRadius: 0,\r\n        \r\n        timeInterval: 30\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n    name: 'baerInitialize',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    //Update the appropritate values to the provided infiltrometer type  \r\n    \r\n    setInfiltrometerType: (state, action) => {\r\n      \r\n      switch (action.payload.infiltrometerType){\r\n        default:\r\n          //set the radius to 0\r\n          state.infiltrometerR = 0;\r\n          break;\r\n\r\n      }\r\n    },\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload;\r\n    \r\n    },\r\n    setInfiltrometerSuction: (state, action)=>{\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action)=>{\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType:(state, action)=>{\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData:(state, action)=>{\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\nexport const selectInfiltrometerType = (state) => state.baerInitialize.infiltrometerType;\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\n\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\n\r\n\r\n//export the actions\r\nexport const { setInfiltrometerType, setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType,setInfiltrometerData } = baerInitializeSlice.actions;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\bear-replicationSlice.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ShowReportsButon.js",["110","111","112"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {selectReports\r\n} from './reportsSlice';\r\n\r\nlet reports;\r\nfunction PrintReports(){\r\n  reports = useSelector(selectReports)\r\n  console.log(reports);\r\n}\r\n\r\nexport function ShowReportsButton() {\r\n    const reports = useSelector(selectReports);\r\n\r\n    return(\r\n    <div>\r\n        <button onClick={()=>console.log(reports)}>\r\n            Show Reports in Store\r\n        </button>\r\n    </div>\r\n\r\n  );\r\n\r\n}","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\BaerInitializeView.js",["113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { newReport } from '../reports/reportsSlice';\r\nimport {Protocols} from '../reports/protocols'\r\nimport { selectInitialVolume, selectInfiltrometerData,\r\n  selectInfiltrometerRadius, selectInfiltrometerSuction,\r\nsetInitialVolume,\r\nsetInfiltrometerSuction, setTimeInterval, selectTimeInterval,setSoilType,selectSoilType, setInfiltrometerData} from './bear-initializeSlice';\r\nimport { Redirect } from 'react-router';\r\nimport { useEffect } from 'react';\r\nimport { setLastVolume } from '../baer-replication/bear-replicationSlice';\r\nimport { soilTypes } from '../../app/soilTypes';\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport { connect } from 'react-redux';\r\nimport { setPage } from '../page-redirection/redirector-slice';\r\n\r\n\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error} }) => (\r\n  <div>\r\n    \r\n    <div>\r\n      <input {...input} placeholder={label} type={type}/>\r\n      {touched && ((error && <span>{error}</span>))}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.volume) {\r\n    errors.volume = 'Required'\r\n  } else if (values.volume < 0) {\r\n    errors.volume = 'Must be a value greater than zero'\r\n  }\r\n\r\n\r\n  if (!values.suction) {\r\n    errors.suction = 'Required'\r\n  } else if (Number(values.suction) <= 0) {\r\n    errors.suction = 'Must be a positive value'\r\n  }\r\n\r\n\r\n  if (!values.timeInterval) {\r\n    errors.timeInterval = 'Required'\r\n  } else if (Number(values.timeInterval) <= 0) {\r\n    errors.timeInterval = 'Time interval must be greater than 0'\r\n  }\r\n\r\n  if (!values.radius) {\r\n    errors.radius = \"Required\"\r\n  } else if (Number(values.radius) <= 0) { \r\n    errors.radius = 'Radius must be larger than 0'\r\n  }\r\n  return errors\r\n}\r\n\r\n\r\n\r\n\r\nconst BaerInitializeView = (props) => {\r\n  const infiltrometerData = useSelector(selectInfiltrometerData);\r\n  const { handleSubmit, pristine, reset, submitting } = props\r\n  \r\n\r\n  //current soil type in the store\r\n  const curSoilType = useSelector(selectSoilType);\r\n  \r\n  \r\n\r\n  const dispatch = useDispatch();\r\n  /**\r\n   * Adds a new Baer prototocol report using the reports slice\r\n   */\r\n\r\n\r\n\r\n\r\n  return (\r\n  <div class = \"col-sm\">\r\n  <div>\r\n    <h1>\r\n      Initialize Baer Protocol\r\n    </h1>\r\n      <Link to =\"/Infiltrometer/baer-replication\">To Replication View</Link>\r\n    </div>\r\n        <div>\r\n\r\n    </div>\r\n  <div class=\"container\">\r\n\r\n\r\n\r\n  <form onSubmit = {handleSubmit}>\r\n    <div class=\"fo,r-group row\">\r\n      <label for=\"volume\" class=\"col-sm-2 col-form-label\" >Initial Volume</label>\r\n      <div class=\"col-sm-10\">\r\n        <Field name=\"volume\" type =\"number\" component={renderField} label=\"Initial Volume\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"for-group row\">\r\n      <label for=\"suction\" class=\"col-sm-2 col-form-label\" >Suction</label>\r\n      <div class=\"col-sm-10\">\r\n      <Field name=\"suction\" type=\"number\" component={renderField} label=\"Suction\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"for-group row\">\r\n      <label for=\"timeInterval\" class=\"col-sm-2 col-form-label\" >Time Interval</label>\r\n      <div class=\"col-sm-10\">\r\n      <Field name=\"timeInterval\" type=\"number\" component={renderField} label=\"Time Interval\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"for-group row\">\r\n      <label for=\"radius\" class=\"col-sm-2 col-form-label\" >Radius</label>\r\n      <div class=\"col-sm-10\">\r\n      <Field name=\"radius\" type=\"number\" component={renderField} label=\"Radius\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <legend class=\"col-form-label col-sm-2 pt-0\">Soil Type</legend>\r\n      <div class=\"col-sm-10\">\r\n\r\n        <div class=\"form-check\">\r\n          <label><Field name=\"soilType\" component=\"input\" type=\"radio\"  value=\"clay\"/> Clay</label>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"col-sm-10\">\r\n\r\n        <div class=\"form-check\">\r\n          <label><Field name=\"soilType\" component=\"input\" type=\"radio\" value=\"loam\"/> Loam</label>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"col-sm-10\">\r\n\r\n        <div class=\"form-check\">\r\n          <label><Field name=\"soilType\" component=\"input\" type=\"radio\" value=\"clayLoam\"/> Clay Loam</label>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"col-sm-10\">\r\n\r\n        <div class=\"form-check\">\r\n          <label><Field name=\"soilType\" component=\"input\" type=\"radio\" value=\"custom\" /> Custom</label>\r\n          <Field name=\"nh0\" component=\"input\" type=\"number\" value=\"nh0\"/>\r\n          <Field name=\"alpha\" component=\"input\" type=\"number\" value=\"alpha\"/>\r\n\r\n        </div>\r\n\r\n    </div>\r\n    </div>\r\n\r\n    \r\n  \r\n    <div>\r\n      <button type=\"submit\" class=\"btn btn-primary\" disabled={submitting}>Start Protocol</button>\r\n      <button type=\"button\" class=\"btn btn-secondary\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n    </div>\r\n  </form>\r\n\r\n    </div>\r\n  </div>\r\n     );\r\n}\r\nconst onSubmit = (values, dispatch) => {\r\n\r\nlet soilType = soilTypes.default;\r\nswitch (values.soilType) {\r\n    case \"clay\":\r\n      soilType = soilTypes.clay;\r\n      break;\r\n    case \"clayLoam\":\r\n       soilType = soilTypes.clayLoam;\r\n      break;\r\n    case \"loam\":\r\n       soilType = soilTypes.loam;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  let infiltrometerData = {\r\n     initialVolume: Number(values.volume),\r\n        \r\n              coordinates: {\r\n                lat:0,\r\n                long: 0,\r\n                },\r\n                soilType,\r\n                infiltrometerRadius: values.radius,       \r\n                timeInterval: Number(values.timeInterval),\r\n                infiltrometerSuction: Number(values.suction),\r\n  }\r\n  //set the infitrometer data in the store\r\n  dispatch(setInfiltrometerData(infiltrometerData));\r\n  //set the last volume to the initial volume for the replication view\r\n  dispatch(setLastVolume(infiltrometerData.initialVolume));\r\n  //send out the new report to the store\r\n  dispatch(newReport(  {\r\n            date: (new Date()).toString(),\r\n            protocol: Protocols.Baer,\r\n            infiltrometerData\r\n  }));\r\n\r\n  //change the page\r\n  dispatch(setPage(\"/Infiltrometer/baer-replication\"));\r\n}\r\nexport default connect()(reduxForm({\r\n  form: 'baerInitializeForm',\r\n  validate,\r\n  onSubmit\r\n\r\n})(BaerInitializeView));","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\bear-resultsSlice.js",["127"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n    volume: 0,\r\n    secondsElapsed: 0,\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js",["128"],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\BaerResultsView.js",["129","130","131","132"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {selectReports} from \"../reports/reportsSlice\";\r\nimport Table from \"./table\";\r\n\r\n\r\nconst  BaerResultsView = ()=> {\r\n  const reports = useSelector(selectReports);\r\n\r\n\r\n\r\n    function ml_min(vol,seconds){\r\n        return vol * seconds * 60;\r\n    }\r\n\r\n  function makeTableBody(reports,i){\r\n\r\n      return (\r\n          <tr>\r\n              <td>{i}</td>\r\n              <td>{reports[0].readings[i].volume}</td>\r\n              <td>{reports[0].readings[i].secondsElapsed}</td>\r\n              <td>{ml_min(reports[0].readings[i].volume,reports[0].readings[i].secondsElapsed)}</td>\r\n\r\n          </tr>\r\n      )\r\n  }\r\n    function makeTable(reports,i){\r\n        Table.constructor(i,reports[0].readings[i].secondsElapsed,ml_min(reports[0].readings[i].volume,reports[0].readings[i].secondsElapsed),reports[0].readings[i].volume);\r\n    }\r\n\r\n\r\n  return (<div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-9 text-lg-center\">\r\n          <h1>Baer Results View</h1>\r\n\r\n        </div>\r\n        <div class=\"col-sm-1\"></div>\r\n      <Link to =\"/Infiltrometer/baer-initialize\">To Initialize View</Link>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-9\">\r\n          <div class=\"container\">\r\n              <Table></Table>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-sm-1\"></div>\r\n      </div>\r\n    </div>);\r\n}\r\nexport default BaerResultsView;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js",["133"],"const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js",["134","135"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\n//Used to redirect to new pages from global state\r\n export const Redirector = () =>{\r\n\r\n    const curPage = useLocation().pathname;\r\n    const page = useSelector(selectPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //reset the page\r\n    if (curPage == page) {\r\n        dispatch(setPage(null));\r\n        return null;\r\n    }\r\n\r\n    return page!=null ? <Redirect to ={page}/> : null;\r\n  }\r\n","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\table.js",["136","137","138","139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":7,"column":10,"nodeType":"146","messageId":"147","endLine":7,"endColumn":27},{"ruleId":"144","severity":1,"message":"148","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":25},{"ruleId":"144","severity":1,"message":"149","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":14},{"ruleId":"144","severity":1,"message":"150","line":4,"column":8,"nodeType":"146","messageId":"147","endLine":4,"endColumn":16},{"ruleId":"144","severity":1,"message":"151","line":8,"column":51,"nodeType":"146","messageId":"147","endLine":8,"endColumn":62},{"ruleId":"144","severity":1,"message":"152","line":8,"column":64,"nodeType":"146","messageId":"147","endLine":8,"endColumn":78},{"ruleId":"144","severity":1,"message":"153","line":11,"column":8,"nodeType":"146","messageId":"147","endLine":11,"endColumn":16},{"ruleId":"144","severity":1,"message":"154","line":12,"column":10,"nodeType":"146","messageId":"147","endLine":12,"endColumn":19},{"ruleId":"144","severity":1,"message":"155","line":52,"column":9,"nodeType":"146","messageId":"147","endLine":52,"endColumn":15},{"ruleId":"144","severity":1,"message":"156","line":1,"column":10,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"157","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":21},{"ruleId":"144","severity":1,"message":"158","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":25},{"ruleId":"144","severity":1,"message":"157","line":2,"column":23,"nodeType":"146","messageId":"147","endLine":2,"endColumn":34},{"ruleId":"144","severity":1,"message":"159","line":7,"column":10,"nodeType":"146","messageId":"147","endLine":7,"endColumn":22},{"ruleId":"144","severity":1,"message":"158","line":3,"column":16,"nodeType":"146","messageId":"147","endLine":3,"endColumn":24},{"ruleId":"144","severity":1,"message":"160","line":7,"column":10,"nodeType":"146","messageId":"147","endLine":7,"endColumn":29},{"ruleId":"144","severity":1,"message":"161","line":8,"column":3,"nodeType":"146","messageId":"147","endLine":8,"endColumn":28},{"ruleId":"144","severity":1,"message":"162","line":8,"column":30,"nodeType":"146","messageId":"147","endLine":8,"endColumn":56},{"ruleId":"144","severity":1,"message":"163","line":9,"column":1,"nodeType":"146","messageId":"147","endLine":9,"endColumn":17},{"ruleId":"144","severity":1,"message":"164","line":10,"column":1,"nodeType":"146","messageId":"147","endLine":10,"endColumn":24},{"ruleId":"144","severity":1,"message":"165","line":10,"column":26,"nodeType":"146","messageId":"147","endLine":10,"endColumn":41},{"ruleId":"144","severity":1,"message":"166","line":10,"column":43,"nodeType":"146","messageId":"147","endLine":10,"endColumn":61},{"ruleId":"144","severity":1,"message":"151","line":10,"column":62,"nodeType":"146","messageId":"147","endLine":10,"endColumn":73},{"ruleId":"144","severity":1,"message":"167","line":11,"column":10,"nodeType":"146","messageId":"147","endLine":11,"endColumn":18},{"ruleId":"144","severity":1,"message":"154","line":12,"column":10,"nodeType":"146","messageId":"147","endLine":12,"endColumn":19},{"ruleId":"144","severity":1,"message":"168","line":65,"column":9,"nodeType":"146","messageId":"147","endLine":65,"endColumn":26},{"ruleId":"144","severity":1,"message":"169","line":70,"column":9,"nodeType":"146","messageId":"147","endLine":70,"endColumn":20},{"ruleId":"144","severity":1,"message":"170","line":74,"column":9,"nodeType":"146","messageId":"147","endLine":74,"endColumn":17},{"ruleId":"144","severity":1,"message":"156","line":1,"column":10,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"156","line":1,"column":10,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"144","severity":1,"message":"157","line":4,"column":21,"nodeType":"146","messageId":"147","endLine":4,"endColumn":32},{"ruleId":"144","severity":1,"message":"171","line":10,"column":9,"nodeType":"146","messageId":"147","endLine":10,"endColumn":16},{"ruleId":"144","severity":1,"message":"172","line":18,"column":12,"nodeType":"146","messageId":"147","endLine":18,"endColumn":25},{"ruleId":"144","severity":1,"message":"173","line":30,"column":14,"nodeType":"146","messageId":"147","endLine":30,"endColumn":23},{"ruleId":"144","severity":1,"message":"174","line":311,"column":10,"nodeType":"146","messageId":"147","endLine":311,"endColumn":23},{"ruleId":"144","severity":1,"message":"175","line":4,"column":10,"nodeType":"146","messageId":"147","endLine":4,"endColumn":15},{"ruleId":"176","severity":1,"message":"177","line":14,"column":17,"nodeType":"178","messageId":"179","endLine":14,"endColumn":19},{"ruleId":"144","severity":1,"message":"180","line":1,"column":16,"nodeType":"146","messageId":"147","endLine":1,"endColumn":25},{"ruleId":"144","severity":1,"message":"154","line":1,"column":27,"nodeType":"146","messageId":"147","endLine":1,"endColumn":36},{"ruleId":"144","severity":1,"message":"181","line":11,"column":19,"nodeType":"146","messageId":"147","endLine":11,"endColumn":27},{"ruleId":"182","severity":1,"message":"183","line":47,"column":40,"nodeType":"184","messageId":"185","endLine":47,"endColumn":42},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'ShowReportsButton' is defined but never used.","Identifier","unusedVar","'combineReducers' is defined but never used.","'Link' is defined but never used.","'ReactDOM' is defined but never used.","'setSoilType' is defined but never used.","'selectSoilType' is defined but never used.","'_default' is defined but never used.","'useEffect' is defined but never used.","'setKey' is assigned a value but never used.","'createAsyncThunk' is defined but never used.","'useDispatch' is defined but never used.","'useState' is defined but never used.","'PrintReports' is defined but never used.","'selectInitialVolume' is defined but never used.","'selectInfiltrometerRadius' is defined but never used.","'selectInfiltrometerSuction' is defined but never used.","'setInitialVolume' is defined but never used.","'setInfiltrometerSuction' is defined but never used.","'setTimeInterval' is defined but never used.","'selectTimeInterval' is defined but never used.","'Redirect' is defined but never used.","'infiltrometerData' is assigned a value but never used.","'curSoilType' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'reports' is assigned a value but never used.","'makeTableBody' is defined but never used.","'makeTable' is defined but never used.","'createWrapper' is defined but never used.","'Route' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used.","'setState' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]