[{"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\index.js":"1","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\App.js":"2","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js":"3","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\store.js":"4","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js":"5","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js":"6","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js":"7","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\Manuals.js":"8","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js":"9","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js":"10","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\pdf-viewer.js":"11","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js":"12","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js":"13","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js":"14","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js":"15","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js":"16","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js":"17","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ReportsTable.js":"18","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js":"19","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js":"20","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js":"21","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js":"22","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js":"23","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js":"24","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js":"25","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsDataPackager.js":"26","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\severityRatings.js":"27"},{"size":937,"mtime":1635051665263,"results":"28","hashOfConfig":"29"},{"size":2132,"mtime":1634770138884,"results":"30","hashOfConfig":"29"},{"size":5151,"mtime":1632591545509,"results":"31","hashOfConfig":"29"},{"size":1219,"mtime":1635051665250,"results":"32","hashOfConfig":"29"},{"size":547,"mtime":1632672160763,"results":"33","hashOfConfig":"29"},{"size":657,"mtime":1633367672700,"results":"34","hashOfConfig":"29"},{"size":1085,"mtime":1632591545506,"results":"35","hashOfConfig":"29"},{"size":371,"mtime":1634770138945,"results":"36","hashOfConfig":"29"},{"size":2398,"mtime":1634594637614,"results":"37","hashOfConfig":"29"},{"size":2624,"mtime":1633887762895,"results":"38","hashOfConfig":"29"},{"size":2535,"mtime":1634770138953,"results":"39","hashOfConfig":"29"},{"size":2819,"mtime":1632591545505,"results":"40","hashOfConfig":"29"},{"size":393,"mtime":1633015101866,"results":"41","hashOfConfig":"29"},{"size":2364,"mtime":1633537773285,"results":"42","hashOfConfig":"29"},{"size":1182,"mtime":1633015101860,"results":"43","hashOfConfig":"29"},{"size":7190,"mtime":1635051665256,"results":"44","hashOfConfig":"29"},{"size":10572,"mtime":1635199322177,"results":"45","hashOfConfig":"29"},{"size":4549,"mtime":1635090058815,"results":"46","hashOfConfig":"29"},{"size":2053,"mtime":1635090058814,"results":"47","hashOfConfig":"29"},{"size":9271,"mtime":1632591545506,"results":"48","hashOfConfig":"29"},{"size":202,"mtime":1632591545504,"results":"49","hashOfConfig":"29"},{"size":1118,"mtime":1633680265290,"results":"50","hashOfConfig":"29"},{"size":3852,"mtime":1635090058814,"results":"51","hashOfConfig":"29"},{"size":202,"mtime":1633367672696,"results":"52","hashOfConfig":"29"},{"size":175,"mtime":1632591545507,"results":"53","hashOfConfig":"29"},{"size":2517,"mtime":1635090058816,"results":"54","hashOfConfig":"29"},{"size":222,"mtime":1635051665258,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1i4jf6k",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\index.js",[],["123","124"],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\App.js",["125","126"],"import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer/baer-results/BaerResultsView';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nimport { NavBar } from './features/navBar/NavBar';\r\nimport SinglePagePDFView from \"./features/pdfviewer/pdf-viewer\";\r\nimport ReportsTable from './features/reports/ReportsTable';\r\nimport { MiniDiskManualView, FieldGuideManualView } from './features/pdfviewer/Manuals';\r\nconst  App = ()=> {\r\n  return (\r\n    \r\n    <BrowserRouter>\r\n    <title>Infiltrometer Companion</title>\r\n          <NavBar/>\r\n          <Redirector/>\r\n          <Switch>\r\n           \r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <h1>\r\n                  Home Page\r\n                </h1>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/manuals-baer\">\r\n              <FieldGuideManualView/>\r\n            \r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/manuals-infiltrometer\">\r\n              <MiniDiskManualView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/reports\">\r\n               <ReportsTable/>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\store.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js",["127","128","129"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\n//Used to redirect to new pages from global state\r\n export const Redirector = () =>{\r\n\r\n    const curPage = useLocation().pathname;\r\n    const page = useSelector(selectPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    \r\n    //reset the page\r\n    if (curPage == page) {\r\n        dispatch(setPage(null));\r\n        return null;\r\n    }\r\n    \r\n    \r\n\r\n    return page!=null ? <Redirect to ={page}/> : null;\r\n  }\r\n","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\Manuals.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js",["130","131"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:{},\r\n    curId: \"-1\"\r\n    \r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId = uuidv4();\r\n      \r\n      let newReport = \r\n        {\r\n            id: state.curId,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerData: action.payload.infiltrometerData,\r\n            gatheringData: true,\r\n        }\r\n      //add it to the reports\r\n      state.reports[newReport.id] = newReport; \r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action)=>{\r\n      //add the reading to the end of the list of readings\r\n        state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings, \r\n        action.payload]; \r\n    },\r\n    //sets the current gathering data report\r\n    setGatheringData: (state, action)=>{\r\n      state.reports[state.curId].gatheringData = action.payload;\r\n    },\r\n    removeReport: (state, action)=>{\r\n      \r\n\r\n      //remove the report with the id provided in action.payload\r\n      delete state.reports[action.payload];\r\n\r\n      //if the current report is the one we are trying to delete, set a new current id\r\n      if (state.curId == action.payload){\r\n        state.curId = Object.keys(state.reports)[0];\r\n      }\r\n      \r\n\r\n      \r\n    },\r\n    setCurId: (state, action)=>{\r\n      state.curId = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading, setGatheringData,removeReport,setCurId } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport const selectGatheringData = (state) => state.reports.reports[state.reports.curId].gatheringData;\r\nexport default reportsSlice.reducer;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js",["132","133","134","135"],"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nexport const NavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initialState = {\r\n        collapsed: false\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n    return(\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n\r\n            <Navbar.Brand href=\"https://www.mtu.edu/computing/\" >\r\n                 <img\r\n                    src=\"https://www.mtu.edu/mtu_resources/images/download-central/logos/husky-icon/white.png\"\r\n                    width=\"56\"\r\n                    className=\"d-inline-block align-top\"\r\n                    alt=\"MTU logo\"\r\n                    />\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                    <Nav.Link onClick = {()=>dispatch(setPage(\"/Infiltrometer\"))}>\r\n                        About Us\r\n                    </Nav.Link>\r\n                    <NavDropdown title=\"New Test\" id=\"new-test-drop-down\">\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/baer-initialize/\"))}>\r\n                            BAER protocol</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <Nav.Link onClick={()=>dispatch(setPage(\"/Infiltrometer/reports/\"))}>\r\n                        My Reports\r\n                    </Nav.Link>\r\n                     <NavDropdown title=\"Manuals\" id=\"manuals-drop-down\">\r\n                         <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-baer/\"))}>\r\n                            BAER\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-infiltrometer/\"))}>\r\n                            Infiltrometer</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                    </NavDropdown>\r\n                </Nav>\r\n                <Nav>\r\n                    <Nav.Link href=\"https://github.com/2021-SD-UI/Infiltrometer/\">\r\n                        GitHub\r\n                    </Nav.Link>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n\r\n\r\n}","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\pdf-viewer.js",["136"],"import React, { useEffect, useState } from 'react';\r\nimport {Document, Page, pdfjs} from 'react-pdf';\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nexport default function SinglePagePDFView(props) {\r\n    \r\n    let {pdf, reload} = props\r\n    \r\n    const [numPages, setNumPages] = useState(null);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n\r\n    function onDocumentLoadSuccess({numPages}) {\r\n        \r\n        if (reload){\r\n           \r\n            previousPage(); nextPage(); reload = false;\r\n        }\r\n        setNumPages(numPages);\r\n        setPageNumber(1);\r\n    }\r\n    \r\n    function changePage(offset) {\r\n        setPageNumber(prevPageNumber => prevPageNumber + offset);\r\n    }\r\n    function previousPage() {\r\n        changePage(-1);\r\n    }\r\n    function nextPage() {\r\n        changePage(1);\r\n    }\r\n   \r\n    return (\r\n        <div class=\"container\">\r\n            <div class = \"row mt-2\"/>\r\n            <div class = \"row text-center\">\r\n                <div class = \"col-4\"></div>\r\n                <div class = \"col-4\" >\r\n                      <Document\r\n                    file={pdf}\r\n                    options = {{workerSrc :\"/pdf.worker.js\"}}\r\n                    onLoadSuccess = {onDocumentLoadSuccess}\r\n                    >\r\n                    <Page pageNumber= {pageNumber}/>\r\n                    \r\n                    </Document>\r\n                </div>\r\n                <div class = \"col-4\" ></div>\r\n                <div class = \"row mt-2\"/>\r\n                <div class = \"row\">\r\n                    <p>\r\n                        Page {pageNumber || (numPages ? 1 :\"--\")} of {numPages || \"--\"}\r\n                    </p>\r\n                   <div class = \"col-2\"/>\r\n                    <div class = \"col\">\r\n                        <button type=\"button\" class=\"btn btn-secondary w-100\" disabled ={pageNumber<=1} onClick={previousPage}>\r\n                            Previous\r\n                        </button>\r\n                    </div>\r\n                    <div class = \"col-2\"/>\r\n                    <div class = \"col\">\r\n                        <button type=\"button\" class=\"btn btn-dark w-100\" disabled={pageNumber>=numPages} onClick ={nextPage}>\r\n                            Next\r\n                        </button>\r\n                    </div>\r\n                    <div class = \"col-2\"/>\r\n                </div>\r\n                <div class = \"row mt-\"/>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n\r\n    \r\n    );\r\n}","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js",["137"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n    volume: 0,\r\n    secondsElapsed: 0,\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js",["138","139","140"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\n\r\n\r\n const initialState = {  \r\n        initialVolume: 0,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: {\r\n          nh0: 0,\r\n          alpha: 0\r\n        },\r\n        \r\n        infiltrometerRadius: 0,\r\n        infiltrometerSuction: 0,\r\n        timeInterval: 30\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n    name: 'baerInitialize',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload;\r\n    \r\n    },\r\n    setInfiltrometerSuction: (state, action)=>{\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action)=>{\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType:(state, action)=>{\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData:(state, action)=>{\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\n\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\n\r\n\r\n//export the actions\r\nexport const {  setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType,setInfiltrometerData } = baerInitializeSlice.actions;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js",["141","142","143","144","145","146","147"],"//The Page we are displaying for the baer Initialize view\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport reportsSlice, {addReading, selectCurId, selectReports, selectCurReadingID, setGatheringData} from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport  Table  from '../baer-results/table';\r\nimport { Modal, Button, Form, } from 'react-bootstrap';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n\r\n  //the max allowed volume\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n  const dispatch = useDispatch();\r\n\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n\r\n  const [state, setState] = useState(initializeState);\r\n\r\n  //use to set the timer is playing variable\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n  const curID = useSelector(selectCurReadingID);\r\n\r\n  function endProtocol(){\r\n\r\n    //mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n\r\n    //go to the results page\r\n    dispatch(setPage(\"/Infiltrometer/baer-results\"))\r\n  }\r\n\r\n    /* Modal -------------------------------------------------------------- */\r\n    const [show, setShow] = useState(false);\r\n    const [validated, setValidated] = useState(false);\r\n    const handleClose = () => {setShow(false); setPlaying(false)};\r\n    const handleShow = () => setShow(true);\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      setValidated(true);\r\n      const form = event.currentTarget;\r\n      const volumeReading = document.getElementById(\"volumeReading\").value;\r\n      if (form.checkValidity() === false) {\r\n        event.stopPropagation();\r\n      }\r\n      else {\r\n        handleClose();\r\n        setValidated(false);\r\n        //calculate the total number of elapsed seconds\r\n        let secondsElapsed = (curID + 1) * timeInterval;\r\n      \r\n        //set the volume and time in the replication store\r\n        dispatch(setLastVolume(volumeReading));\r\n        dispatch(setVolume(volumeReading));\r\n        dispatch(setSecondsElapsed(secondsElapsed));\r\n        \r\n        //add the reading using the reports slice\r\n        dispatch(addReading({volume: volumeReading, secondsElapsed}));\r\n      }\r\n    };\r\n    /* --------------------------------------------------------------------- */\r\n\r\n  return (\r\n       \r\n      <div class=\"container-fluid\">\r\n        <div class = \"container\">\r\n            <div class = \"row mt-5\"/>\r\n            <div class =\"row\">\r\n                <div class=\"col-2\"></div>\r\n                <div class=\"col-8 text-center\">\r\n                    <div class=\"display-4 \">\r\n                      Current Replication: {curID}\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-2\"></div>\r\n            </div>\r\n            <div class = \"row mt-5\"/>\r\n        </div>\r\n          \r\n        <div class=\"row-12\">\r\n            \r\n          <div class=\"col-4\"/>\r\n          <div class =\"timer-wrapper\">\r\n            <CountdownCircleTimer\r\n                key={state.key}\r\n                isPlaying = {state.timerIsPlaying}\r\n                duration={Number(timeInterval)}\r\n                colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                onComplete={() => handleShow()}\r\n              >\r\n                {renderTime}\r\n            </CountdownCircleTimer>\r\n          </div>\r\n          <div class=\"col-4\"/>\r\n        </div>\r\n\r\n        <div class = \"container\">\r\n          <div class = \"row mt-4\"/>\r\n          <div class = \"row-8 text-center\">\r\n            <div class=\"btn btn-dark w-50\"\r\n              disabled={state.timerIsPlaying}\r\n              onClick = {()=>{\r\n              setState({\r\n                timerIsPlaying: true,\r\n                key: state.key+1}\r\n                );\r\n                }}> {\r\n                  !state.timerIsPlaying? \"Start Replication\" : \"Replication Running...\" \r\n                    }\r\n            </div>\r\n          </div>\r\n          <div class = \"row mt-2\"/>\r\n          <div class = \"row-8 text-center\">\r\n            <div class=\"btn btn-secondary w-50\" onClick = {endProtocol}>\r\n              End Protocol\r\n            </div>\r\n          </div>\r\n          <div class = \"row mt-2\"/>\r\n        </div>\r\n\r\n          <div class =\"container\">\r\n            <div class=\"row-4\">\r\n              <div class = \"row mt-4\"/>\r\n                <Table  class=\"col-8\"/>\r\n              <div class = \"row mt-4\"/>\r\n            </div>\r\n          </div>\r\n\r\n      <>\r\n        <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          backdrop=\"static\"\r\n          centered\r\n        >        \r\n          <Modal.Header>\r\n            <Modal.Title>Enter volumetric data for replication: {curID+1}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n              <Form.Group>\r\n                <Form.Text muted>\r\n                Previous volume: {maxVolume} mL\r\n                </Form.Text>\r\n                <Form.Control\r\n                required\r\n                type=\"number\"\r\n                step=\"any\"\r\n                size=\"lg\"\r\n                min=\"0\"\r\n                max={maxVolume}\r\n                id=\"volumeReading\"\r\n                placeholder=\"Volume (mL)\"\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  Please enter a valid reading, or hit \"Cancel\".\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Modal.Footer>\r\n                <Button variant=\"outline-secondary\" size=\"lg\" onClick={handleClose}>\r\n                  Cancel\r\n                </Button>\r\n                <Button type=\"submit\" variant=\"dark\" size=\"lg\">\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n            \r\n         <div class = \"col-10\"/>\r\n      </div>);\r\n\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<BaerReplicationView />, rootElement);\r\nexport default BaerReplicationView;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js",["148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166"],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ReportsTable.js",["167","168","169"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Protocols } from \"./protocols\";\r\nimport { removeReport, selectReports, setCurId } from \"./reportsSlice\";\r\nimport {CSVLink} from \"react-csv\";\r\nimport {makeCSV} from \"./reportsDataPackager\";\r\nimport {selectCurId} from \"./reportsSlice\";\r\n\r\nconst ReportsTable = () =>{\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)]\r\n    const dispatch = useDispatch();\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return Object.keys(reports).map(reportID => {\r\n\r\n            const report = reports[reportID]\r\n            return (\r\n                <tr key={report.id} >\r\n                    <td >{report.date}</td>\r\n                    <td>{report.protocol}</td>\r\n                    <td class>\r\n                        <div class = \"container\">\r\n                            <div class = \"row\">\r\n                                <div class = \"col\">\r\n                                    <div class=\"btn btn-dark  w-100\"\r\n                                    onClick = {()=>showReport(report)}>\r\n                                        View\r\n                                    </div>\r\n                                </div>\r\n                                <div class = \"col\">\r\n                                    <CSVLink {...makeCSV(report)} class=\"btn btn-success w-100\">\r\n                                        Download\r\n                                    </CSVLink>\r\n                                </div>\r\n                                <div class = \"col\">\r\n                                    <div class=\"btn btn-danger  w-100\"\r\n                                    onClick = {()=>dispatch(removeReport(report.id))}>\r\n                                        Delete\r\n                                    </div>\r\n                                </div>\r\n                               \r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    function showReport(report){\r\n        switch(report.protocol){\r\n            case Protocols.Baer:\r\n                dispatch(setCurId(report.id));\r\n                dispatch(setPage(\"/Infiltrometer/baer-results\"));\r\n\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        let header = ['Date','Protocol' , 'Options'];\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toLowerCase() === \"protocol\") {\r\n                return <th key={index}>Protocol</th>\r\n            }\r\n            if (key.toLowerCase() === \"date\") {\r\n                return <th key={index}>Date</th>\r\n            }\r\n            if (key.toLowerCase() == \"options\"){\r\n                return <th key={index}></th>\r\n            }\r\n           \r\n        })\r\n    }\r\n\r\n\r\n    //see if there is any data\r\n    if (Object.keys(reports).length > 0){\r\n        //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div class = \"container\">\r\n                <div class = \"row mt-2\" ></div>\r\n                <div class = \"row\">\r\n                    <div class = \"col-1\"></div>\r\n                    <div class = \"col-10\">\r\n                        <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                            <tbody>\r\n                            <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                            {renderTableData()}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class = \"col-1\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <div class = \"container\">\r\n                <div class = \"row mt-2\"></div>\r\n                <div class = \"row\">\r\n                    <div class=\"display-4 text-center\">\r\n                      No Saved Reports\r\n                    </div>\r\n                    <div class=\"text-center\">\r\n                        Click \"New Test\" to create a report.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n     \r\n}\r\nexport default ReportsTable;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js",["170"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\nimport Table from \"./table\";\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport {CSVLink} from \"react-csv\";\r\nimport {makeCSV} from \"../../reports/reportsDataPackager\";\r\nconst  BaerResultsView = ()=> {\r\n  const reports = useSelector(selectReports);\r\n  const curReport = reports[useSelector(selectCurId)];\r\n  const dispatch = useDispatch();\r\n\r\n  return (<div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8 text-center\">\r\n          <h1>Baer Results View</h1>\r\n\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8\">\r\n          <div class=\"container\">\r\n              <Table></Table>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n      </div>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class = \"col-2\"></div>\r\n          <div class=\"col text-center\">\r\n              <div class=\"btn btn-dark w-50\" onClick ={\r\n                ()=>dispatch(setPage(\"/Infiltrometer/baer-initialize\"))\r\n                }>  \r\n                New Test\r\n              </div>\r\n              <div class = \"row mt-2\"></div>\r\n           \r\n              \r\n              <div class=\"btn btn-secondary w-50\" onClick ={\r\n                ()=>dispatch(setPage(\"/Infiltrometer/reports\"))\r\n                }>\r\n                Reports\r\n              </div>\r\n              <div class = \"row mt-4\"></div>\r\n              <CSVLink {...makeCSV(curReport)}  class=\"btn btn-success w-25\">\r\n                  Download\r\n              </CSVLink>\r\n\r\n          </div>\r\n          <div class = \"col-2\"></div>\r\n        </div>\r\n      </div>\r\n \r\n    </div>);\r\n}\r\nexport default BaerResultsView;","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js",["171"],"const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js",["172","173","174","175","176","177"],"import React, {Component, useEffect, useState} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\nimport {SeverityRatings} from \"../../reports/severityRatings\";\r\nimport { findAverageRate, findSeverityRating, findRate } from '../../reports/reportsDataPackager';\r\nconst Table =()=> {\r\n    const rawReports = useSelector(selectReports);\r\n\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n\r\n\r\n    const [state, setState] = useState(filterReadings());\r\n\r\n\r\n\r\n    /**\r\n     * Create an array to use for a table row from reading data\r\n     */\r\n    function filterReadings(){\r\n        \r\n\r\n        if (curReport == undefined) return{reports: []};\r\n\r\n        let readingsArr = [];\r\n        for(let i = 0; i < curReport.readings.length; i++){\r\n            readingsArr[i] = {\r\n\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i, curReport)\r\n\r\n            };\r\n        }\r\n        return {reports: readingsArr};\r\n    }\r\n\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const {id, Time, Volume,Rate} = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate.toPrecision(4)}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        try{\r\n            let header = Object.keys(state.reports[0])\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toUpperCase() === \"ID\") {\r\n                return <th key={index}>{key.toUpperCase()}</th>\r\n            }\r\n            if (key.toUpperCase() === \"TIME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n            }\r\n\r\n\r\n            if (key.toUpperCase() === \"VOLUME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n            }\r\n            if (key.toUpperCase() === \"RATE\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n            }\r\n        })\r\n        }\r\n        catch (e){\r\n            return <th key = {0}>No Readings To Display</th>;\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n     //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div>\r\n                <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                    <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                <table class=\"table table-light table-striped table-hover\">\r\n                    <tbody>\r\n                        <tr class=\"table-dark\">\r\n                            <th class=\"text-center\">AVERAGE (mL/min)</th>\r\n                            <th className=\"text-center\">SEVERITY RATING</th>\r\n                        </tr>\r\n                        <tr class=\"table-striped\">\r\n                            <td className=\"text-center\">{findAverageRate(curReport).toPrecision(4)}</td>\r\n                            <td class=\"text-center\">{findSeverityRating(findAverageRate(curReport)).name}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsDataPackager.js",[],"C:\\Users\\caboo\\OneDrive\\Documents\\GitHub\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\severityRatings.js",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":3,"column":40,"nodeType":"184","messageId":"185","endLine":3,"endColumn":44},{"ruleId":"182","severity":1,"message":"186","line":10,"column":8,"nodeType":"184","messageId":"185","endLine":10,"endColumn":25},{"ruleId":"182","severity":1,"message":"187","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":15},{"ruleId":"182","severity":1,"message":"188","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":19},{"ruleId":"189","severity":1,"message":"190","line":16,"column":17,"nodeType":"191","messageId":"192","endLine":16,"endColumn":19},{"ruleId":"182","severity":1,"message":"193","line":1,"column":10,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"190","line":59,"column":23,"nodeType":"191","messageId":"192","endLine":59,"endColumn":25},{"ruleId":"182","severity":1,"message":"194","line":2,"column":23,"nodeType":"184","messageId":"185","endLine":2,"endColumn":34},{"ruleId":"182","severity":1,"message":"195","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":20},{"ruleId":"182","severity":1,"message":"196","line":13,"column":12,"nodeType":"184","messageId":"185","endLine":13,"endColumn":17},{"ruleId":"182","severity":1,"message":"197","line":13,"column":19,"nodeType":"184","messageId":"185","endLine":13,"endColumn":27},{"ruleId":"182","severity":1,"message":"188","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"193","line":1,"column":10,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"193","line":1,"column":10,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"198","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":21},{"ruleId":"182","severity":1,"message":"199","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":19},{"ruleId":"182","severity":1,"message":"200","line":3,"column":8,"nodeType":"184","messageId":"185","endLine":3,"endColumn":16},{"ruleId":"182","severity":1,"message":"201","line":6,"column":8,"nodeType":"184","messageId":"185","endLine":6,"endColumn":20},{"ruleId":"182","severity":1,"message":"202","line":6,"column":35,"nodeType":"184","messageId":"185","endLine":6,"endColumn":46},{"ruleId":"182","severity":1,"message":"203","line":6,"column":48,"nodeType":"184","messageId":"185","endLine":6,"endColumn":61},{"ruleId":"182","severity":1,"message":"204","line":7,"column":51,"nodeType":"184","messageId":"185","endLine":7,"endColumn":62},{"ruleId":"182","severity":1,"message":"205","line":7,"column":64,"nodeType":"184","messageId":"185","endLine":7,"endColumn":78},{"ruleId":"182","severity":1,"message":"206","line":10,"column":8,"nodeType":"184","messageId":"185","endLine":10,"endColumn":16},{"ruleId":"182","severity":1,"message":"183","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":14},{"ruleId":"182","severity":1,"message":"207","line":3,"column":16,"nodeType":"184","messageId":"185","endLine":3,"endColumn":24},{"ruleId":"182","severity":1,"message":"202","line":5,"column":33,"nodeType":"184","messageId":"185","endLine":5,"endColumn":44},{"ruleId":"182","severity":1,"message":"203","line":5,"column":46,"nodeType":"184","messageId":"185","endLine":5,"endColumn":59},{"ruleId":"182","severity":1,"message":"208","line":7,"column":10,"nodeType":"184","messageId":"185","endLine":7,"endColumn":29},{"ruleId":"182","severity":1,"message":"209","line":8,"column":3,"nodeType":"184","messageId":"185","endLine":8,"endColumn":28},{"ruleId":"182","severity":1,"message":"210","line":8,"column":30,"nodeType":"184","messageId":"185","endLine":8,"endColumn":56},{"ruleId":"182","severity":1,"message":"211","line":9,"column":1,"nodeType":"184","messageId":"185","endLine":9,"endColumn":17},{"ruleId":"182","severity":1,"message":"212","line":10,"column":1,"nodeType":"184","messageId":"185","endLine":10,"endColumn":24},{"ruleId":"182","severity":1,"message":"213","line":10,"column":26,"nodeType":"184","messageId":"185","endLine":10,"endColumn":41},{"ruleId":"182","severity":1,"message":"214","line":10,"column":43,"nodeType":"184","messageId":"185","endLine":10,"endColumn":61},{"ruleId":"182","severity":1,"message":"215","line":11,"column":25,"nodeType":"184","messageId":"185","endLine":11,"endColumn":42},{"ruleId":"182","severity":1,"message":"216","line":13,"column":16,"nodeType":"184","messageId":"185","endLine":13,"endColumn":33},{"ruleId":"182","severity":1,"message":"217","line":16,"column":10,"nodeType":"184","messageId":"185","endLine":16,"endColumn":16},{"ruleId":"182","severity":1,"message":"218","line":79,"column":9,"nodeType":"184","messageId":"185","endLine":79,"endColumn":26},{"ruleId":"182","severity":1,"message":"219","line":80,"column":19,"nodeType":"184","messageId":"185","endLine":80,"endColumn":35},{"ruleId":"182","severity":1,"message":"220","line":80,"column":80,"nodeType":"184","messageId":"185","endLine":80,"endColumn":90},{"ruleId":"221","severity":1,"message":"222","line":112,"column":6,"nodeType":"223","endLine":112,"endColumn":8,"suggestions":"224"},{"ruleId":"189","severity":1,"message":"225","line":118,"column":50,"nodeType":"191","messageId":"192","endLine":118,"endColumn":52},{"ruleId":"182","severity":1,"message":"226","line":11,"column":11,"nodeType":"184","messageId":"185","endLine":11,"endColumn":20},{"ruleId":"227","severity":1,"message":"228","line":73,"column":40,"nodeType":"229","messageId":"230","endLine":73,"endColumn":42},{"ruleId":"189","severity":1,"message":"190","line":81,"column":35,"nodeType":"191","messageId":"192","endLine":81,"endColumn":37},{"ruleId":"182","severity":1,"message":"183","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":14},{"ruleId":"182","severity":1,"message":"231","line":311,"column":10,"nodeType":"184","messageId":"185","endLine":311,"endColumn":23},{"ruleId":"182","severity":1,"message":"232","line":1,"column":16,"nodeType":"184","messageId":"185","endLine":1,"endColumn":25},{"ruleId":"182","severity":1,"message":"188","line":1,"column":27,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"233","line":4,"column":9,"nodeType":"184","messageId":"185","endLine":4,"endColumn":24},{"ruleId":"182","severity":1,"message":"197","line":12,"column":19,"nodeType":"184","messageId":"185","endLine":12,"endColumn":27},{"ruleId":"189","severity":1,"message":"190","line":22,"column":23,"nodeType":"191","messageId":"192","endLine":22,"endColumn":25},{"ruleId":"227","severity":1,"message":"228","line":61,"column":40,"nodeType":"229","messageId":"230","endLine":61,"endColumn":42},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'SinglePagePDFView' is defined but never used.","'Route' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'createAsyncThunk' is defined but never used.","'useSelector' is defined but never used.","'selectPage' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'useDispatch' is defined but never used.","'soilTypes' is defined but never used.","'ReactDOM' is defined but never used.","'reportsSlice' is defined but never used.","'selectCurId' is defined but never used.","'selectReports' is defined but never used.","'setSoilType' is defined but never used.","'selectSoilType' is defined but never used.","'_default' is defined but never used.","'useState' is defined but never used.","'selectInitialVolume' is defined but never used.","'selectInfiltrometerRadius' is defined but never used.","'selectInfiltrometerSuction' is defined but never used.","'setInitialVolume' is defined but never used.","'setInfiltrometerSuction' is defined but never used.","'setTimeInterval' is defined but never used.","'selectTimeInterval' is defined but never used.","'setSecondsElapsed' is defined but never used.","'formValueSelector' is defined but never used.","'Button' is defined but never used.","'infiltrometerData' is assigned a value but never used.","'soilTypeSelected' is assigned a value but never used.","'soilValues' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadDataAtStart'. Either include it or remove the dependency array.","ArrayExpression",["236"],"Expected '!==' and instead saw '!='.","'curReport' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'createWrapper' is defined but never used.","'Component' is defined but never used.","'SeverityRatings' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},"Update the dependencies array to be: [loadDataAtStart]",{"range":"239","text":"240"},[3401,3403],"[loadDataAtStart]"]