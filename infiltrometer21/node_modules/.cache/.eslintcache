[{"E:\\Infiltrometer\\infiltrometer21\\src\\index.js":"1","E:\\Infiltrometer\\infiltrometer21\\src\\App.js":"2","E:\\Infiltrometer\\infiltrometer21\\src\\app\\store.js":"3","E:\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js":"4","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js":"5","E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\Manuals.js":"6","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js":"7","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js":"8","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js":"9","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js":"10","E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js":"11","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js":"12","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js":"13","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js":"14","E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\pdf-viewer.js":"15","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js":"16","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ReportsTable.js":"17","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js":"18","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js":"19","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js":"20","E:\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js":"21","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js":"22","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js":"23","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js":"24","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsDataPackager.js":"25","E:\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js":"26","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\severityRatings.js":"27","E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\baerLogo.js":"28"},{"size":937,"mtime":1634940410132,"results":"29","hashOfConfig":"30"},{"size":2132,"mtime":1634735380478,"results":"31","hashOfConfig":"30"},{"size":1242,"mtime":1635943382561,"results":"32","hashOfConfig":"30"},{"size":5151,"mtime":1631899423581,"results":"33","hashOfConfig":"30"},{"size":547,"mtime":1632655250899,"results":"34","hashOfConfig":"30"},{"size":371,"mtime":1634735761147,"results":"35","hashOfConfig":"30"},{"size":2398,"mtime":1635020799476,"results":"36","hashOfConfig":"30"},{"size":657,"mtime":1633130618461,"results":"37","hashOfConfig":"30"},{"size":2382,"mtime":1635443120094,"results":"38","hashOfConfig":"30"},{"size":1085,"mtime":1632005081692,"results":"39","hashOfConfig":"30"},{"size":3209,"mtime":1635863721665,"results":"40","hashOfConfig":"30"},{"size":393,"mtime":1632845160633,"results":"41","hashOfConfig":"30"},{"size":1182,"mtime":1632845156587,"results":"42","hashOfConfig":"30"},{"size":7192,"mtime":1635443832844,"results":"43","hashOfConfig":"30"},{"size":2535,"mtime":1634732833904,"results":"44","hashOfConfig":"30"},{"size":2053,"mtime":1635073408825,"results":"45","hashOfConfig":"30"},{"size":9362,"mtime":1635610309883,"results":"46","hashOfConfig":"30"},{"size":2819,"mtime":1631899423578,"results":"47","hashOfConfig":"30"},{"size":10526,"mtime":1635443184173,"results":"48","hashOfConfig":"30"},{"size":9271,"mtime":1632005979115,"results":"49","hashOfConfig":"30"},{"size":1118,"mtime":1633637220340,"results":"50","hashOfConfig":"30"},{"size":175,"mtime":1631965019821,"results":"51","hashOfConfig":"30"},{"size":202,"mtime":1631899423578,"results":"52","hashOfConfig":"30"},{"size":3852,"mtime":1635073015636,"results":"53","hashOfConfig":"30"},{"size":3797,"mtime":1635703930906,"results":"54","hashOfConfig":"30"},{"size":202,"mtime":1633277181040,"results":"55","hashOfConfig":"30"},{"size":222,"mtime":1635021820786,"results":"56","hashOfConfig":"30"},{"size":3406,"mtime":1635863576309,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"c42c6c",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Infiltrometer\\infiltrometer21\\src\\index.js",[],["128","129"],"E:\\Infiltrometer\\infiltrometer21\\src\\App.js",["130","131"],"import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer/baer-results/BaerResultsView';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nimport { NavBar } from './features/navBar/NavBar';\r\nimport SinglePagePDFView from \"./features/pdfviewer/pdf-viewer\";\r\nimport ReportsTable from './features/reports/ReportsTable';\r\nimport { MiniDiskManualView, FieldGuideManualView } from './features/pdfviewer/Manuals';\r\nconst  App = ()=> {\r\n  return (\r\n    \r\n    <BrowserRouter>\r\n    <title>Infiltrometer Companion</title>\r\n          <NavBar/>\r\n          <Redirector/>\r\n          <Switch>\r\n           \r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <h1>\r\n                  Home Page\r\n                </h1>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/manuals-baer\">\r\n              <FieldGuideManualView/>\r\n            \r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/manuals-infiltrometer\">\r\n              <MiniDiskManualView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/reports\">\r\n               <ReportsTable/>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\app\\store.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\Manuals.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js",["132","133"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:{},\r\n    curId: \"-1\"\r\n    \r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId = uuidv4();\r\n      \r\n      let newReport = \r\n        {\r\n            id: state.curId,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerData: action.payload.infiltrometerData,\r\n            gatheringData: true,\r\n        }\r\n      //add it to the reports\r\n      state.reports[newReport.id] = newReport; \r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action)=>{\r\n      //add the reading to the end of the list of readings\r\n        state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings, \r\n        action.payload]; \r\n    },\r\n    //sets the current gathering data report\r\n    setGatheringData: (state, action)=>{\r\n      state.reports[state.curId].gatheringData = action.payload;\r\n    },\r\n    removeReport: (state, action)=>{\r\n      \r\n\r\n      //remove the report with the id provided in action.payload\r\n      delete state.reports[action.payload];\r\n\r\n      //if the current report is the one we are trying to delete, set a new current id\r\n      if (state.curId == action.payload){\r\n        state.curId = Object.keys(state.reports)[0];\r\n      }\r\n      \r\n\r\n      \r\n    },\r\n    setCurId: (state, action)=>{\r\n      state.curId = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading, setGatheringData,removeReport,setCurId } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport const selectGatheringData = (state) => state.reports.reports[state.reports.curId].gatheringData;\r\nexport default reportsSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js",["134","135","136"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\n//Used to redirect to new pages from global state\r\n export const Redirector = () =>{\r\n\r\n    const curPage = useLocation().pathname;\r\n    const page = useSelector(selectPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    \r\n    //reset the page\r\n    if (curPage == page) {\r\n        dispatch(setPage(null));\r\n        return null;\r\n    }\r\n    \r\n    \r\n\r\n    return page!=null ? <Redirect to ={page}/> : null;\r\n  }\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js",["137","138","139"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\n\r\n\r\n const initialState = {  \r\n        initialVolume: 95,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: {\r\n          nh0: 2.28,\r\n          alpha: 0.124\r\n        },\r\n        \r\n        infiltrometerRadius: 2.25,\r\n        infiltrometerSuction: -1,\r\n        timeInterval: 60\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n  \r\n  name: 'baerInitialize',\r\n  \r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload;\r\n    \r\n    },\r\n    setInfiltrometerSuction: (state, action)=>{\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action)=>{\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType:(state, action)=>{\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData:(state, action)=>{\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\n\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\n\r\n\r\n//export the actions\r\nexport const {  setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType,setInfiltrometerData } = baerInitializeSlice.actions;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js",["140","141","142","143"],"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { BaerLogo } from \"./baerLogo\";\r\nexport const NavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initialState = {\r\n        collapsed: false\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n    return(\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n\r\n            <Navbar.Brand href=\"https://www.mtu.edu/computing/\" >\r\n                <div class=\"container\">\r\n                    <div class = \"row\">\r\n                         <div class = \"col\">\r\n                            <BaerLogo width = {1} height = {110}>\r\n                            </BaerLogo>\r\n                        </div>\r\n                        <div class = \"col\">\r\n                             <img\r\n                                src=\"https://www.mtu.edu/mtu_resources/images/download-central/logos/husky-icon/white.png\"\r\n                                width=\"56\"\r\n                                className=\"d-inline-block align-top\"\r\n                                alt=\"MTU logo\"\r\n                                />\r\n                               \r\n                        </div>\r\n                       \r\n                    </div>\r\n                </div>\r\n                \r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                    <Nav.Link onClick = {()=>dispatch(setPage(\"/Infiltrometer\"))}>\r\n                        About Us\r\n                    </Nav.Link>\r\n                    <NavDropdown title=\"New Test\" id=\"new-test-drop-down\">\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/baer-initialize/\"))}>\r\n                            BAER protocol</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <Nav.Link onClick={()=>dispatch(setPage(\"/Infiltrometer/reports/\"))}>\r\n                        My Reports\r\n                    </Nav.Link>\r\n                     <NavDropdown title=\"Manuals\" id=\"manuals-drop-down\">\r\n                         <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-baer/\"))}>\r\n                            BAER\r\n                        </NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/manuals-infiltrometer/\"))}>\r\n                            Infiltrometer</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                    </NavDropdown>\r\n                </Nav>\r\n                <Nav>\r\n                    <Nav.Link href=\"https://github.com/2021-SD-UI/Infiltrometer/\">\r\n                        GitHub\r\n                    </Nav.Link>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n\r\n\r\n}","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js",["144"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n    volume: 0,\r\n    secondsElapsed: 0,\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js",["145","146","147","148","149","150","151"],"//The Page we are displaying for the baer Initialize view\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport reportsSlice, {addReading, selectCurId, selectReports, selectCurReadingID, setGatheringData} from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport  Table  from '../baer-results/table';\r\nimport { Modal, Button, Form, } from 'react-bootstrap';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n\r\n  //the max allowed volume\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n  const dispatch = useDispatch();\r\n\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n\r\n  const [state, setState] = useState(initializeState);\r\n\r\n  //use to set the timer is playing variable\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n  const curID = useSelector(selectCurReadingID);\r\n\r\n  function endProtocol(){\r\n\r\n    //mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n\r\n    //go to the results page\r\n    dispatch(setPage(\"/Infiltrometer/baer-results\"))\r\n  }\r\n\r\n    /* Modal -------------------------------------------------------------- */\r\n    const [show, setShow] = useState(false);\r\n    const [validated, setValidated] = useState(false);\r\n    const handleClose = () => {setShow(false); setPlaying(false)};\r\n    const handleShow = () => setShow(true);\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      setValidated(true);\r\n      const form = event.currentTarget;\r\n      const volumeReading = document.getElementById(\"volumeReading\").value;\r\n      if (form.checkValidity() === false) {\r\n        event.stopPropagation();\r\n      }\r\n      else {\r\n        handleClose();\r\n        setValidated(false);\r\n        //calculate the total number of elapsed seconds\r\n        let secondsElapsed = (curID + 1) * timeInterval;\r\n      \r\n        //set the volume and time in the replication store\r\n        dispatch(setLastVolume(volumeReading));\r\n        dispatch(setVolume(volumeReading));\r\n        dispatch(setSecondsElapsed(secondsElapsed));\r\n        \r\n        //add the reading using the reports slice\r\n        dispatch(addReading({volume: volumeReading, secondsElapsed}));\r\n      }\r\n    };\r\n    /* --------------------------------------------------------------------- */\r\n\r\n  return (\r\n       \r\n      <div class=\"container-fluid\">\r\n        <div class = \"container\">\r\n            <div class = \"row mt-5\"/>\r\n            <div class =\"row\">\r\n                <div class=\"col-2\"></div>\r\n                <div class=\"col-8 text-center\">\r\n                    <div class=\"display-4 \">\r\n                      Current Replication: {curID+1}\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-2\"></div>\r\n            </div>\r\n            <div class = \"row mt-5\"/>\r\n        </div>\r\n          \r\n        <div class=\"row-12\">\r\n            \r\n          <div class=\"col-4\"/>\r\n          <div class =\"timer-wrapper\">\r\n            <CountdownCircleTimer\r\n                key={state.key}\r\n                isPlaying = {state.timerIsPlaying}\r\n                duration={Number(timeInterval)}\r\n                colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                onComplete={() => handleShow()}\r\n              >\r\n                {renderTime}\r\n            </CountdownCircleTimer>\r\n          </div>\r\n          <div class=\"col-4\"/>\r\n        </div>\r\n\r\n        <div class = \"container\">\r\n          <div class = \"row mt-4\"/>\r\n          <div class = \"row-8 text-center\">\r\n            <div class=\"btn btn-dark w-50\"\r\n              disabled={state.timerIsPlaying}\r\n              onClick = {()=>{\r\n              setState({\r\n                timerIsPlaying: true,\r\n                key: state.key+1}\r\n                );\r\n                }}> {\r\n                  !state.timerIsPlaying? \"Start Replication\" : \"Replication Running...\" \r\n                    }\r\n            </div>\r\n          </div>\r\n          <div class = \"row mt-2\"/>\r\n          <div class = \"row-8 text-center\">\r\n            <div class=\"btn btn-secondary w-50\" onClick = {endProtocol}>\r\n              End Protocol\r\n            </div>\r\n          </div>\r\n          <div class = \"row mt-2\"/>\r\n        </div>\r\n\r\n          <div class =\"container\">\r\n            <div class=\"row-4\">\r\n              <div class = \"row mt-4\"/>\r\n                <Table  class=\"col-8\"/>\r\n              <div class = \"row mt-4\"/>\r\n            </div>\r\n          </div>\r\n\r\n      <>\r\n        <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          backdrop=\"static\"\r\n          centered\r\n        >        \r\n          <Modal.Header>\r\n            <Modal.Title>Enter volumetric data for replication: {curID+1}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n              <Form.Group>\r\n                <Form.Text muted>\r\n                Previous volume: {maxVolume} mL\r\n                </Form.Text>\r\n                <Form.Control\r\n                required\r\n                type=\"number\"\r\n                step=\"any\"\r\n                size=\"lg\"\r\n                min=\"0\"\r\n                max={maxVolume}\r\n                id=\"volumeReading\"\r\n                placeholder=\"Volume (mL)\"\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  Please enter a valid reading, or hit \"Cancel\".\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n              <Modal.Footer>\r\n                <Button variant=\"outline-secondary\" size=\"lg\" onClick={handleClose}>\r\n                  Cancel\r\n                </Button>\r\n                <Button type=\"submit\" variant=\"dark\" size=\"lg\">\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n            \r\n         <div class = \"col-10\"/>\r\n      </div>);\r\n\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<BaerReplicationView />, rootElement);\r\nexport default BaerReplicationView;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\pdf-viewer.js",["152"],"import React, { useEffect, useState } from 'react';\r\nimport {Document, Page, pdfjs} from 'react-pdf';\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nexport default function SinglePagePDFView(props) {\r\n    \r\n    let {pdf, reload} = props\r\n    \r\n    const [numPages, setNumPages] = useState(null);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n\r\n    function onDocumentLoadSuccess({numPages}) {\r\n        \r\n        if (reload){\r\n           \r\n            previousPage(); nextPage(); reload = false;\r\n        }\r\n        setNumPages(numPages);\r\n        setPageNumber(1);\r\n    }\r\n    \r\n    function changePage(offset) {\r\n        setPageNumber(prevPageNumber => prevPageNumber + offset);\r\n    }\r\n    function previousPage() {\r\n        changePage(-1);\r\n    }\r\n    function nextPage() {\r\n        changePage(1);\r\n    }\r\n   \r\n    return (\r\n        <div class=\"container\">\r\n            <div class = \"row mt-2\"/>\r\n            <div class = \"row text-center\">\r\n                <div class = \"col-4\"></div>\r\n                <div class = \"col-4\" >\r\n                      <Document\r\n                    file={pdf}\r\n                    options = {{workerSrc :\"/pdf.worker.js\"}}\r\n                    onLoadSuccess = {onDocumentLoadSuccess}\r\n                    >\r\n                    <Page pageNumber= {pageNumber}/>\r\n                    \r\n                    </Document>\r\n                </div>\r\n                <div class = \"col-4\" ></div>\r\n                <div class = \"row mt-2\"/>\r\n                <div class = \"row\">\r\n                    <p>\r\n                        Page {pageNumber || (numPages ? 1 :\"--\")} of {numPages || \"--\"}\r\n                    </p>\r\n                   <div class = \"col-2\"/>\r\n                    <div class = \"col\">\r\n                        <button type=\"button\" class=\"btn btn-secondary w-100\" disabled ={pageNumber<=1} onClick={previousPage}>\r\n                            Previous\r\n                        </button>\r\n                    </div>\r\n                    <div class = \"col-2\"/>\r\n                    <div class = \"col\">\r\n                        <button type=\"button\" class=\"btn btn-dark w-100\" disabled={pageNumber>=numPages} onClick ={nextPage}>\r\n                            Next\r\n                        </button>\r\n                    </div>\r\n                    <div class = \"col-2\"/>\r\n                </div>\r\n                <div class = \"row mt-\"/>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n\r\n    \r\n    );\r\n}","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js",["153"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\nimport Table from \"./table\";\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport {CSVLink} from \"react-csv\";\r\nimport {makeCSV} from \"../../reports/reportsDataPackager\";\r\nconst  BaerResultsView = ()=> {\r\n  const reports = useSelector(selectReports);\r\n  const curReport = reports[useSelector(selectCurId)];\r\n  const dispatch = useDispatch();\r\n\r\n  return (<div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8 text-center\">\r\n          <h1>Baer Results View</h1>\r\n\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8\">\r\n          <div class=\"container\">\r\n              <Table></Table>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n      </div>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class = \"col-2\"></div>\r\n          <div class=\"col text-center\">\r\n              <div class=\"btn btn-dark w-50\" onClick ={\r\n                ()=>dispatch(setPage(\"/Infiltrometer/baer-initialize\"))\r\n                }>  \r\n                New Test\r\n              </div>\r\n              <div class = \"row mt-2\"></div>\r\n           \r\n              \r\n              <div class=\"btn btn-secondary w-50\" onClick ={\r\n                ()=>dispatch(setPage(\"/Infiltrometer/reports\"))\r\n                }>\r\n                Reports\r\n              </div>\r\n              <div class = \"row mt-4\"></div>\r\n              <CSVLink {...makeCSV(curReport)}  class=\"btn btn-success w-25\">\r\n                  Download\r\n              </CSVLink>\r\n\r\n          </div>\r\n          <div class = \"col-2\"></div>\r\n        </div>\r\n      </div>\r\n \r\n    </div>);\r\n}\r\nexport default BaerResultsView;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ReportsTable.js",["154","155","156","157","158","159","160"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Protocols } from \"./protocols\";\r\nimport { removeReport, selectReports, setCurId } from \"./reportsSlice\";\r\nimport {CSVLink} from \"react-csv\";\r\nimport {makeCSV, makeCSVFromGroupOfReports} from \"./reportsDataPackager\";\r\nimport {selectCurId} from \"./reportsSlice\";\r\nimport React, { useState } from \"react\";\r\nconst ReportsTable = () =>{\r\n\r\n    const [selectedReports, setSelectedReports] = useState({});\r\n    const numberOfSelectedReports = Object.keys(selectedReports).length;\r\n    \r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)]\r\n    const dispatch = useDispatch();\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return Object.keys(reports).map(reportID => {\r\n\r\n            const report = reports[reportID]\r\n            return (\r\n                <tr key={report.id} >\r\n                    <td >\r\n                        <div class = \"container\">\r\n                            <div class=\"row\">\r\n                                <div class = \"col-1\">\r\n                                    <input class=\"form-check-input\" type=\"checkbox\" value=\"\" checked={selectedReports[report.id] != undefined}\r\n                                        onClick = {\r\n                                            ()=>{\r\n                                                if (selectedReports[report.id] != undefined){\r\n                                                   deselectReport(report);\r\n                                                }\r\n                                                else{\r\n                                                   selectReport(report);\r\n                                                }\r\n                                               \r\n                                            }\r\n                                        }\r\n                                        />\r\n                                </div>\r\n                                <div class = \"col-5\">\r\n                                    {formatDate(report.date)}\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                    <td>{report.protocol}</td>\r\n                    <td>\r\n                        <div class = \"container\">\r\n                            <div class = \"row\">\r\n                                <div class = \"col\">\r\n                                    <div class=\"btn btn-dark  w-100\"\r\n                                    onClick = {()=>showReport(report)}>\r\n                                        View\r\n                                    </div>\r\n                                </div>\r\n                                <div class = \"col\">\r\n                                <div class=\"btn btn-danger  w-100\"\r\n                                    onClick = {()=>{deleteReport(report)}}>\r\n                                    Delete\r\n                                </div>\r\n                            </div>\r\n                               \r\n                               \r\n                               \r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Deselects and deletes the provided report\r\n     * @param {\r\n     * } report \r\n     */\r\n    function deleteReport(report){\r\n        //delete the report from selected if it is in selected\r\n        if (selectedReports[report.id]!=undefined) deselectReport(report);\r\n                                   \r\n        //remove the report from the store\r\n        dispatch(removeReport(report.id))        \r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Deletes all the currently selected reports\r\n     * \r\n     */\r\n    function deleteAllSelected(){\r\n        \r\n        let reportKeys = Object.keys(selectedReports);\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            deleteReport(selectedReports[reportKeys[i]]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the report from the selected reports\r\n     * @param {} report \r\n     */\r\n    function deselectReport(report){\r\n        var _repo = {...selectedReports};\r\n        delete _repo[report.id];\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Adds the report to the selected reports\r\n     * @param {} report \r\n     */\r\n    function selectReport(report){\r\n        var _repo = {...selectedReports};\r\n        _repo[report.id] = report;\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Selects all the reports\r\n     */\r\n    function selectAll(){\r\n        let reportKeys = Object.keys(reports);\r\n        var _repo = {...selectedReports};\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            _repo[reportKeys[i]] = reports[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Unselects all reports\r\n     */\r\n    function unselectAll(){\r\n      let reportKeys = Object.keys(reports);\r\n        var _repo = {...selectedReports};\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            delete _repo[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n\r\n    function showReport(report){\r\n        switch(report.protocol){\r\n            case Protocols.Baer:\r\n                dispatch(setCurId(report.id));\r\n                dispatch(setPage(\"/Infiltrometer/baer-results\"));\r\n\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    function formatDate(date){\r\n        let d = new Date(date);\r\n        if (d.toDateString() === new Date().toDateString()){\r\n            return \"Today\";\r\n        }\r\n        return (d.toDateString());\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        let header = ['Date','Protocol' , 'Options'];\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toLowerCase() === \"protocol\") {\r\n                return <th key={index}>Protocol</th>\r\n            }\r\n            if (key.toLowerCase() === \"date\") {\r\n                return <th key={index}>Date</th>\r\n            }\r\n            if (key.toLowerCase() == \"options\"){\r\n                return <th key={index}></th>\r\n            }\r\n           \r\n        })\r\n    }\r\n\r\n\r\n    //see if there is any data\r\n    if (Object.keys(reports).length > 0){\r\n        //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div class = \"container\">\r\n                <div class = \"row mt-4\" ></div>\r\n                <div class = \"row\">\r\n                    <div class = \"col-2\"></div>\r\n                    <div class = \"col-2 text-center\">\r\n                        <div class=\"btn btn-dark  w-100\"\r\n                            onClick = {()=>{selectAll()}}>\r\n                            Select all\r\n                        </div>\r\n                    </div>\r\n                     <div class = \"col-2 text-center\">\r\n                        <div class=\"btn btn-secondary  w-100\"\r\n                            onClick = {()=>{unselectAll()}}>\r\n                            Unselect all\r\n                        </div>\r\n                    </div>\r\n                    <div class = \"col-2 text-center\">\r\n                        <div class=\"btn btn-danger  w-100\"\r\n                            onClick = {()=>{deleteAllSelected()}}>\r\n                            Delete Selected ( {numberOfSelectedReports} )\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class = \"col-2 text-center\">\r\n                        <CSVLink {...makeCSVFromGroupOfReports(selectedReports)} class=\"btn btn-success w-100\">\r\n                            Download Selected ( {numberOfSelectedReports} )\r\n                        </CSVLink>\r\n                    </div>\r\n                    <div class = \"col-2\"></div>\r\n                </div>\r\n\r\n                <div class = \"row mt-2\" ></div>\r\n                <div class = \"row\">\r\n                    <div class = \"col-1\"></div>\r\n                    <div class = \"col-10\">\r\n                        <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                            <tbody>\r\n                            <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                            {renderTableData()}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class = \"col-1\"></div>\r\n                </div>\r\n                \r\n               \r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <div class = \"container\">\r\n                <div class = \"row mt-2\"></div>\r\n                <div class = \"row\">\r\n                    <div class=\"display-4 text-center\">\r\n                      No Saved Reports\r\n                    </div>\r\n                    <div class=\"text-center\">\r\n                        Click \"New Test\" to create a report.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n     \r\n}\r\nexport default ReportsTable;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js",["161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addReading, newReport, selectCurId, selectReports } from '../../reports/reportsSlice';\r\nimport {Protocols} from '../../reports/protocols'\r\nimport { selectInitialVolume, selectInfiltrometerData,\r\n  selectInfiltrometerRadius, selectInfiltrometerSuction,\r\nsetInitialVolume,\r\nsetInfiltrometerSuction, setTimeInterval, selectTimeInterval,setSoilType,selectSoilType, setInfiltrometerData} from './bear-initializeSlice';\r\nimport { setLastVolume, setSecondsElapsed } from '../baer-replication/bear-replicationSlice';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\nimport {Field, formValueSelector, reduxForm} from 'redux-form'\r\nimport { connect } from 'react-redux';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { Button, Form, FormLabel, Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport { infiltrometerTypes } from '../../../app/infiltrometerType';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error} }) => (\r\n  <div>\r\n    \r\n    <div>\r\n      <input {...input} placeholder={label} type={type}/>\r\n      {touched && ((error && <span>{error}</span>))}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.volume) {\r\n    errors.volume = 'Required'\r\n  } else if (values.volume < 0) {\r\n    errors.volume = 'Must be a value greater than zero'\r\n  }\r\n\r\n\r\n  if (!values.suction) {\r\n    errors.suction = 'Required'\r\n  } else if (Number(values.suction) >= 0) {\r\n    errors.suction = 'Must be a negative value'\r\n  }\r\n\r\n\r\n  if (!values.timeInterval) {\r\n    errors.timeInterval = 'Required'\r\n  } else if (Number(values.timeInterval) <= 0) {\r\n    errors.timeInterval = 'Time interval must be greater than 0'\r\n  }\r\n\r\n  if (!values.radius) {\r\n    errors.radius = \"Required\"\r\n  } else if (Number(values.radius) <= 0) { \r\n    errors.radius = 'Radius must be larger than 0'\r\n  }\r\n\r\n  if (!values.nh0){\r\n    errors.nh0 = \"Required\"\r\n  }\r\n  else if (Number(values.nh0) < 0){\r\n    errors.nh0 = 'Must be a positive number'\r\n  }\r\n   if (!values.alpha){\r\n    errors.alpha = \"Required\"\r\n  }\r\n  else if (Number(values.alpha) < 0){\r\n    errors.alpha = 'Must be a positive number'\r\n  }\r\n\r\n  return errors\r\n}\r\n\r\n\r\n\r\n\r\nconst BaerInitializeView = (props) => {\r\n  const { change, soilTypeSelected, handleSubmit, pristine, reset, submitting, soilValues } = props\r\n\r\n\r\n  //current soil type in the store\r\n  const curSoilType = useSelector(selectSoilType);\r\n  const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n\r\n  const dispatch = useDispatch();\r\n  /**\r\n   * Adds a new Baer prototocol report using the reports slice\r\n   * \r\n   */\r\n  const setFormSoilType = (soilType)=>{\r\n    if (soilType){\r\n      change(\"nh0\", soilType.nh0);\r\n      change(\"alpha\",soilType.alpha);\r\n\r\n      dispatch(setSoilType({\r\n          nh0: soilType.nh0,\r\n          alpha:soilType.alpha\r\n      }));\r\n    }\r\n    \r\n  }\r\n  const setInfiltrometerType = (infiltrometerType) =>{\r\n    change(\"radius\", infiltrometerType.radius);\r\n   \r\n  }\r\n\r\n  //the empty second array means \"Only execute once\"\r\n  useEffect(()=>{\r\n    loadDataAtStart();\r\n  }, []);\r\n\r\n\r\n  function loadDataAtStart(){\r\n    \r\n    //this is a check to say \"if not initial\"\r\n    \r\n      //get the current report and populate data\r\n      change(\"radius\", curInfiltrometerData.infiltrometerRadius);\r\n      change(\"nh0\", curSoilType.nh0);\r\n      change(\"alpha\",curSoilType.alpha);\r\n      change(\"volume\", curInfiltrometerData.initialVolume);\r\n      change(\"suction\", curInfiltrometerData.infiltrometerSuction);\r\n      change(\"timeInterval\", curInfiltrometerData.timeInterval);\r\n  }\r\n\r\n  return (\r\n\r\n  \r\n        \r\n  <div class=\"container mt-5\">\r\n    <div class=\"row\">\r\n      <div class=\"col-12 bg-light rounded border shadow\">\r\n\r\n  <Form onSubmit = {handleSubmit} expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n    <div class=\"form-group row pt-4\">\r\n      <div class=\"col-4\"></div>\r\n      <label for=\"volume\" class=\"col-sm-2 col-form-label text-center fw-bolder\">Initial Volume (mL)</label>\r\n      <div class=\"col-sm-2 text-center\">\r\n        <Field name=\"volume\" type=\"number\" step=\"any\" component={renderField} label=\"Initial Volume\"/>\r\n      </div>\r\n      <div class=\"col-4\"></div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <div className=\"col-4\"></div>\r\n      <FormLabel for=\"suction\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Suction (cm)</FormLabel>\r\n      <div class=\"col-sm-2 text-center \">\r\n      <Field name=\"suction\" type=\"number\" step=\"any\" component={renderField} label=\"Suction\"/>\r\n      </div>\r\n      <div className=\"col-4\"></div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <div className=\"col-4\"></div>\r\n      <FormLabel for=\"timeInterval\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Time Interval (sec)</FormLabel>\r\n      <div class=\"col-sm-2 text-center \">\r\n      <Field name=\"timeInterval\" type=\"number\" step=\"any\" component={renderField} label=\"Time Interval\"/>\r\n      </div>\r\n      <div className=\"col-4\"></div>\r\n    </div>\r\n\r\n    <div class=\"form-group row\">\r\n      <div className=\"col-4\"></div>\r\n      <FormLabel for=\"radius\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Radius (cm)</FormLabel>\r\n      <div class = \"form-group col-sm-2 text-center \">\r\n        <div className=\"col-4\"></div>\r\n        <div class=\"form-group row\">\r\n      <div class=\"col-sm-10\">\r\n      <DropdownButton  title=\"Preset Infiltrometer Types\" component=\"select\" bg=\"dark\" variant=\"dark\">\r\n        <Dropdown.Item onSelect = {()=>setInfiltrometerType(infiltrometerTypes.MiniDisk)}>\r\n          {infiltrometerTypes.MiniDisk.displayName}\r\n        </Dropdown.Item>\r\n        <Dropdown.Item onSelect = {()=>setInfiltrometerType(infiltrometerTypes.MiniDiskV1)}>\r\n          {infiltrometerTypes.MiniDiskV1.displayName}\r\n        </Dropdown.Item>\r\n      </DropdownButton>\r\n        <div class=\"row mt-1\"/>\r\n        </div>\r\n          <Field name=\"radius\" type=\"number\" step=\"any\"  component={renderField} label=\"Radius\"/>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"row pt-2\">\r\n      <div className=\"col-4\"></div>\r\n      <label for=\"soilType\" class=\"col-sm-2 col-form-label text-center fw-bolder\" >Soil Type</label>\r\n     \r\n    <div class=\"col-sm-2\">\r\n\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-sm-10 text-center \">\r\n\r\n\r\n           <DropdownButton  title=\"Preset Soil Types\" component=\"select\" bg=\"dark\" variant=\"dark\">\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.clay)} >Clay</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.clayLoam)} >Clay Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.loam)} >Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.loamySand)} >Loamy Sand</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.sand)} >Sand</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.sandyClay)} >Sandy Clay</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.sandyLoam)} >Sandy Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.silt)} >Silt</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.siltLoam)} >Silt Loam</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.siltyClay)} >Silty Clay</Dropdown.Item>\r\n              <Dropdown.Item onSelect = {()=>setFormSoilType(soilTypes.siltyClayLoam)} >Silty Clay Loam</Dropdown.Item>\r\n            </DropdownButton>\r\n\r\n          </div>\r\n         \r\n          <div  class=\"col-sm-10 text-center \">\r\n            <FormLabel for=\"nh0\" class=\"mt-2 mb-2 fw-bolder\" >(NH/O)</FormLabel>\r\n            <Field name=\"nh0\" component={renderField} type=\"number\" step=\"any\" value=\"nh0\" label=\"NH0\"/>\r\n          </div>\r\n          <div class=\"col-sm-10 text-center \">\r\n            <FormLabel for=\"alpha\" class=\"mt-2 mb-2 fw-bolder\">(Alpha)</FormLabel>\r\n            <Field name=\"alpha\" component={renderField} type=\"number\" step=\"any\" value=\"alpha\" label=\"Alpha\"/>\r\n          </div>\r\n          \r\n\r\n        </div>\r\n\r\n    </div>\r\n      <div className=\"col-4\"></div>\r\n    </div>\r\n\r\n\r\n\r\n     <div class=\"form-group row pt-4 \">\r\n       <div class=\"col-4\"></div>\r\n       <div class=\"col-sm-4\">\r\n          <button class=\"btn btn-dark w-100\"  type=\"submit\"  disabled={submitting}>Start Protocol</button>\r\n       </div>\r\n       <div class = \"row mt-2\"/>\r\n       <div class=\"col-4\"></div>\r\n     </div>\r\n      <div class=\"form-group row pb-4\">\r\n        <div class=\"col-4\"></div>\r\n        <div class=\"col-sm-4\">\r\n          <button type=\"button\" class=\"btn btn-secondary w-100\"  disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n        </div>\r\n        <div className=\"col-4\"></div>\r\n      </div>\r\n\r\n  </Form>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n     );\r\n}\r\nconst onSubmit = (values, dispatch) => {\r\n\r\n  \r\n  let infiltrometerData = {\r\n     initialVolume: Number(values.volume),\r\n        \r\n              coordinates: {\r\n                lat:0,\r\n                long: 0,\r\n                },\r\n                soilType:\r\n                  {\r\n                    nh0: values.nh0,\r\n                    alpha: values.alpha\r\n                  },\r\n                infiltrometerRadius: values.radius,       \r\n                timeInterval: Number(values.timeInterval),\r\n                infiltrometerSuction: Number(values.suction),\r\n  }\r\n  //set the infitrometer data in the store\r\n  dispatch(setInfiltrometerData(infiltrometerData));\r\n  //set the last volume to the initial volume for the replication view\r\n  dispatch(setLastVolume(infiltrometerData.initialVolume));\r\n  //send out the new report to the store\r\n  dispatch(newReport(  {\r\n            date: (new Date()).toString(),\r\n            protocol: Protocols.Baer,\r\n            infiltrometerData\r\n  }));\r\n\r\n  //add the intial reading\r\n  dispatch(addReading({\r\n    volume: Number(values.volume),\r\n    secondsElapsed: 0\r\n  }));\r\n\r\n  //change the page\r\n  dispatch(setPage(\"/Infiltrometer/baer-replication\"));\r\n}\r\n\r\n\r\nexport default connect()(reduxForm({\r\n  form: 'baerInitializeForm',\r\n  validate,\r\n  onSubmit\r\n\r\n})(BaerInitializeView));","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js",["178"],"const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js",["179","180","181","182","183","184"],"import React, {Component, useEffect, useState} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\nimport {SeverityRatings} from \"../../reports/severityRatings\";\r\nimport { findAverageRate, findSeverityRating, findRate } from '../../reports/reportsDataPackager';\r\nconst Table =()=> {\r\n    const rawReports = useSelector(selectReports);\r\n\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n\r\n\r\n    const [state, setState] = useState(filterReadings());\r\n\r\n\r\n\r\n    /**\r\n     * Create an array to use for a table row from reading data\r\n     */\r\n    function filterReadings(){\r\n        \r\n\r\n        if (curReport == undefined) return{reports: []};\r\n\r\n        let readingsArr = [];\r\n        for(let i = 0; i < curReport.readings.length; i++){\r\n            readingsArr[i] = {\r\n\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i, curReport)\r\n\r\n            };\r\n        }\r\n        return {reports: readingsArr};\r\n    }\r\n\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const {id, Time, Volume,Rate} = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate.toPrecision(4)}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        try{\r\n            let header = Object.keys(state.reports[0])\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toUpperCase() === \"ID\") {\r\n                return <th key={index}>{key.toUpperCase()}</th>\r\n            }\r\n            if (key.toUpperCase() === \"TIME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n            }\r\n\r\n\r\n            if (key.toUpperCase() === \"VOLUME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n            }\r\n            if (key.toUpperCase() === \"RATE\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n            }\r\n        })\r\n        }\r\n        catch (e){\r\n            return <th key = {0}>No Readings To Display</th>;\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n     //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div>\r\n                <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                    <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                <table class=\"table table-light table-striped table-hover\">\r\n                    <tbody>\r\n                        <tr class=\"table-dark\">\r\n                            <th class=\"text-center\">AVERAGE (mL/min)</th>\r\n                            <th className=\"text-center\">SEVERITY RATING</th>\r\n                        </tr>\r\n                        <tr class=\"table-striped\">\r\n                            <td className=\"text-center\">{findAverageRate(curReport).toPrecision(4)}</td>\r\n                            <td class=\"text-center\">{findSeverityRating(findAverageRate(curReport)).name}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsDataPackager.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\severityRatings.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\baerLogo.js",[],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":3,"column":40,"nodeType":"191","messageId":"192","endLine":3,"endColumn":44},{"ruleId":"189","severity":1,"message":"193","line":10,"column":8,"nodeType":"191","messageId":"192","endLine":10,"endColumn":25},{"ruleId":"189","severity":1,"message":"194","line":1,"column":10,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":59,"column":23,"nodeType":"197","messageId":"198","endLine":59,"endColumn":25},{"ruleId":"189","severity":1,"message":"199","line":4,"column":10,"nodeType":"191","messageId":"192","endLine":4,"endColumn":15},{"ruleId":"189","severity":1,"message":"200","line":5,"column":10,"nodeType":"191","messageId":"192","endLine":5,"endColumn":19},{"ruleId":"195","severity":1,"message":"196","line":16,"column":17,"nodeType":"197","messageId":"198","endLine":16,"endColumn":19},{"ruleId":"189","severity":1,"message":"194","line":1,"column":10,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"201","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":21},{"ruleId":"189","severity":1,"message":"202","line":3,"column":10,"nodeType":"191","messageId":"192","endLine":3,"endColumn":19},{"ruleId":"189","severity":1,"message":"203","line":2,"column":23,"nodeType":"191","messageId":"192","endLine":2,"endColumn":34},{"ruleId":"189","severity":1,"message":"204","line":3,"column":10,"nodeType":"191","messageId":"192","endLine":3,"endColumn":20},{"ruleId":"189","severity":1,"message":"205","line":14,"column":12,"nodeType":"191","messageId":"192","endLine":14,"endColumn":17},{"ruleId":"189","severity":1,"message":"206","line":14,"column":19,"nodeType":"191","messageId":"192","endLine":14,"endColumn":27},{"ruleId":"189","severity":1,"message":"194","line":1,"column":10,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"207","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":16},{"ruleId":"189","severity":1,"message":"208","line":6,"column":8,"nodeType":"191","messageId":"192","endLine":6,"endColumn":20},{"ruleId":"189","severity":1,"message":"209","line":6,"column":35,"nodeType":"191","messageId":"192","endLine":6,"endColumn":46},{"ruleId":"189","severity":1,"message":"210","line":6,"column":48,"nodeType":"191","messageId":"192","endLine":6,"endColumn":61},{"ruleId":"189","severity":1,"message":"211","line":7,"column":51,"nodeType":"191","messageId":"192","endLine":7,"endColumn":62},{"ruleId":"189","severity":1,"message":"212","line":7,"column":64,"nodeType":"191","messageId":"192","endLine":7,"endColumn":78},{"ruleId":"189","severity":1,"message":"213","line":10,"column":8,"nodeType":"191","messageId":"192","endLine":10,"endColumn":16},{"ruleId":"189","severity":1,"message":"200","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"190","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":14},{"ruleId":"189","severity":1,"message":"214","line":6,"column":9,"nodeType":"191","messageId":"192","endLine":6,"endColumn":16},{"ruleId":"189","severity":1,"message":"215","line":15,"column":11,"nodeType":"191","messageId":"192","endLine":15,"endColumn":20},{"ruleId":"195","severity":1,"message":"216","line":30,"column":130,"nodeType":"197","messageId":"198","endLine":30,"endColumn":132},{"ruleId":"195","severity":1,"message":"216","line":33,"column":80,"nodeType":"197","messageId":"198","endLine":33,"endColumn":82},{"ruleId":"195","severity":1,"message":"216","line":85,"column":39,"nodeType":"197","messageId":"198","endLine":85,"endColumn":41},{"ruleId":"217","severity":1,"message":"218","line":174,"column":40,"nodeType":"219","messageId":"220","endLine":174,"endColumn":42},{"ruleId":"195","severity":1,"message":"196","line":182,"column":35,"nodeType":"197","messageId":"198","endLine":182,"endColumn":37},{"ruleId":"189","severity":1,"message":"190","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":14},{"ruleId":"189","severity":1,"message":"221","line":3,"column":16,"nodeType":"191","messageId":"192","endLine":3,"endColumn":24},{"ruleId":"189","severity":1,"message":"209","line":5,"column":33,"nodeType":"191","messageId":"192","endLine":5,"endColumn":44},{"ruleId":"189","severity":1,"message":"210","line":5,"column":46,"nodeType":"191","messageId":"192","endLine":5,"endColumn":59},{"ruleId":"189","severity":1,"message":"222","line":7,"column":10,"nodeType":"191","messageId":"192","endLine":7,"endColumn":29},{"ruleId":"189","severity":1,"message":"223","line":8,"column":3,"nodeType":"191","messageId":"192","endLine":8,"endColumn":28},{"ruleId":"189","severity":1,"message":"224","line":8,"column":30,"nodeType":"191","messageId":"192","endLine":8,"endColumn":56},{"ruleId":"189","severity":1,"message":"225","line":9,"column":1,"nodeType":"191","messageId":"192","endLine":9,"endColumn":17},{"ruleId":"189","severity":1,"message":"226","line":10,"column":1,"nodeType":"191","messageId":"192","endLine":10,"endColumn":24},{"ruleId":"189","severity":1,"message":"227","line":10,"column":26,"nodeType":"191","messageId":"192","endLine":10,"endColumn":41},{"ruleId":"189","severity":1,"message":"228","line":10,"column":43,"nodeType":"191","messageId":"192","endLine":10,"endColumn":61},{"ruleId":"189","severity":1,"message":"229","line":11,"column":25,"nodeType":"191","messageId":"192","endLine":11,"endColumn":42},{"ruleId":"189","severity":1,"message":"230","line":13,"column":16,"nodeType":"191","messageId":"192","endLine":13,"endColumn":33},{"ruleId":"189","severity":1,"message":"231","line":16,"column":10,"nodeType":"191","messageId":"192","endLine":16,"endColumn":16},{"ruleId":"189","severity":1,"message":"232","line":79,"column":19,"nodeType":"191","messageId":"192","endLine":79,"endColumn":35},{"ruleId":"189","severity":1,"message":"233","line":79,"column":80,"nodeType":"191","messageId":"192","endLine":79,"endColumn":90},{"ruleId":"234","severity":1,"message":"235","line":111,"column":6,"nodeType":"236","endLine":111,"endColumn":8,"suggestions":"237"},{"ruleId":"189","severity":1,"message":"238","line":311,"column":10,"nodeType":"191","messageId":"192","endLine":311,"endColumn":23},{"ruleId":"189","severity":1,"message":"239","line":1,"column":16,"nodeType":"191","messageId":"192","endLine":1,"endColumn":25},{"ruleId":"189","severity":1,"message":"200","line":1,"column":27,"nodeType":"191","messageId":"192","endLine":1,"endColumn":36},{"ruleId":"189","severity":1,"message":"240","line":4,"column":9,"nodeType":"191","messageId":"192","endLine":4,"endColumn":24},{"ruleId":"189","severity":1,"message":"206","line":12,"column":19,"nodeType":"191","messageId":"192","endLine":12,"endColumn":27},{"ruleId":"195","severity":1,"message":"196","line":22,"column":23,"nodeType":"197","messageId":"198","endLine":22,"endColumn":25},{"ruleId":"217","severity":1,"message":"218","line":61,"column":40,"nodeType":"219","messageId":"220","endLine":61,"endColumn":42},"no-native-reassign",["241"],"no-negated-in-lhs",["242"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'SinglePagePDFView' is defined but never used.","'createAsyncThunk' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Route' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'soilTypes' is defined but never used.","'useSelector' is defined but never used.","'selectPage' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'ReactDOM' is defined but never used.","'reportsSlice' is defined but never used.","'selectCurId' is defined but never used.","'selectReports' is defined but never used.","'setSoilType' is defined but never used.","'selectSoilType' is defined but never used.","'_default' is defined but never used.","'makeCSV' is defined but never used.","'curReport' is assigned a value but never used.","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useState' is defined but never used.","'selectInitialVolume' is defined but never used.","'selectInfiltrometerRadius' is defined but never used.","'selectInfiltrometerSuction' is defined but never used.","'setInitialVolume' is defined but never used.","'setInfiltrometerSuction' is defined but never used.","'setTimeInterval' is defined but never used.","'selectTimeInterval' is defined but never used.","'setSecondsElapsed' is defined but never used.","'formValueSelector' is defined but never used.","'Button' is defined but never used.","'soilTypeSelected' is assigned a value but never used.","'soilValues' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadDataAtStart'. Either include it or remove the dependency array.","ArrayExpression",["243"],"'createWrapper' is defined but never used.","'Component' is defined but never used.","'SeverityRatings' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"244","fix":"245"},"Update the dependencies array to be: [loadDataAtStart]",{"range":"246","text":"247"},[3334,3336],"[loadDataAtStart]"]