[{"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\index.js":"1","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js":"2","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\App.js":"3","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\app\\store.js":"4","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\bear-replicationSlice.js":"5","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\bear-resultsSlice.js":"6","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js":"7","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ShowReportsButon.js":"8","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\BaerResultsView.js":"9","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js":"10","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js":"11","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\BaerInitializeView.js":"12","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\bear-initializeSlice.js":"13","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\BaerReplicationView.js":"14","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js":"15","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js":"16","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js":"17","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js":"18"},{"size":707,"mtime":1632337372924,"results":"19","hashOfConfig":"20"},{"size":5151,"mtime":1631139401660,"results":"21","hashOfConfig":"20"},{"size":1409,"mtime":1632337372922,"results":"22","hashOfConfig":"20"},{"size":817,"mtime":1632637628653,"results":"23","hashOfConfig":"20"},{"size":1182,"mtime":1632501029630,"results":"24","hashOfConfig":"20"},{"size":343,"mtime":1632337372924,"results":"25","hashOfConfig":"20"},{"size":1315,"mtime":1632337372924,"results":"26","hashOfConfig":"20"},{"size":504,"mtime":1632178101945,"results":"27","hashOfConfig":"20"},{"size":361,"mtime":1632178101943,"results":"28","hashOfConfig":"20"},{"size":1085,"mtime":1632178101943,"results":"29","hashOfConfig":"20"},{"size":2819,"mtime":1631139401658,"results":"30","hashOfConfig":"20"},{"size":7578,"mtime":1632653913031,"results":"31","hashOfConfig":"20"},{"size":2242,"mtime":1632652812377,"results":"32","hashOfConfig":"20"},{"size":4157,"mtime":1632522738242,"results":"33","hashOfConfig":"20"},{"size":202,"mtime":1631139401658,"results":"34","hashOfConfig":"20"},{"size":9271,"mtime":1632178101944,"results":"35","hashOfConfig":"20"},{"size":175,"mtime":1632178101945,"results":"36","hashOfConfig":"20"},{"size":569,"mtime":1632514085984,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"y2ddzx",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\index.js",[],["81","82"],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\App.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\app\\store.js",["83"],"import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\nimport {reducer as reduxFormReducer} from 'redux-form'\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    baerInitialize: baerInitializeReducer,\r\n    baerReplication: baerReplicationReducer,\r\n    baerResults: baerResultsReducer,\r\n    counter: counterReducer,\r\n    reports: reportsSlice,\r\n    form: reduxFormReducer\r\n  },\r\n});\r\n","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\bear-replicationSlice.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\bear-resultsSlice.js",["84"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n\r\n\r\n\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {}\r\n});\r\nexport default baerResultsSlice.reducer;","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js",["85"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:[],\r\n    curId: -1\r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId++;\r\n      state.reports = [...state.reports,(\r\n        {\r\n            id: state.curId,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerData: action.payload.infiltrometerData\r\n        }\r\n      )];\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action)=>{\r\n      //add the reading to the end of the list of readings\r\n        state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings, \r\n        action.payload]; \r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports;\r\n\r\nexport default reportsSlice.reducer;","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ShowReportsButon.js",["86","87","88"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {selectReports\r\n} from './reportsSlice';\r\n\r\nlet reports;\r\nfunction PrintReports(){\r\n  reports = useSelector(selectReports)\r\n  console.log(reports);\r\n}\r\n\r\nexport function ShowReportsButton() {\r\n    const reports = useSelector(selectReports);\r\n\r\n    return(\r\n    <div>\r\n        <button onClick={()=>console.log(reports)}>\r\n            Show Reports in Store\r\n        </button>\r\n    </div>\r\n\r\n  );\r\n\r\n}","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-results\\BaerResultsView.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\BaerInitializeView.js",["89","90","91","92","93","94","95","96","97","98","99","100"],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-initialize\\bear-initializeSlice.js",["101"],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\baer-replication\\BaerReplicationView.js",["102","103","104","105","106"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport {addReading} from '../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { useEffect } from 'react';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n \r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n\r\n  //the max allowed volume\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //current soil type in the store\r\n  const curSoilType = useSelector(selectSoilType);\r\n\r\n   const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n  \r\n  \r\n  const [state, setState] = useState(initializeState);\r\n\r\n  //use to set the key variable\r\n  const setKey = (key) => setState({...state, key});\r\n  //use to set the timer is playing variable\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n \r\n\r\n  // This function will be called when the timer reaches zero.\r\n  function getVolumeReading() {\r\n      let volumeReading = Number(prompt(\"Enter volumetric data below.\",0));\r\n\r\n      // Notify user of invalid input if volume reading is greater than last volume or is negative.\r\n      \r\n      while (volumeReading > maxVolume\r\n         || volumeReading < 0 || volumeReading == null) {\r\n          window.confirm(\"Invalid input! Make sure your volume reading is less than or equal to: \" + maxVolume );\r\n          volumeReading = Number(prompt(\"Enter volumetric data below.\",0));\r\n      }\r\n      // TODO: Record data to report\r\n\r\n          //TODO: set the volume in the replication store\r\n          dispatch(setLastVolume(volumeReading));\r\n          dispatch(setVolume(volumeReading));\r\n          dispatch(setSecondsElapsed(0));\r\n          dispatch(addReading(\r\n            \r\n            {volume: volumeReading, secondsElapsed: 0}\r\n            \r\n            ));\r\n          setKey(state.key + 1);\r\n      \r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <div className=\"timer-wrapper\">\r\n          <CountdownCircleTimer\r\n              key={state.key}\r\n              isPlaying = {state.timerIsPlaying}\r\n              duration={Number(timeInterval)}\r\n              colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n              onComplete={() => getVolumeReading()}\r\n          >\r\n            {renderTime}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n          <div>\r\n            Last Volume: {maxVolume}\r\n          </div>\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n             <button type=\"submit\" class=\"btn btn-primary col-md-10\" onClick = {()=>setPlaying(!state.timerIsPlaying)}>{\r\n            \r\n            !state.timerIsPlaying? \"Start \" : \"Stop \"\r\n            \r\n            } Timer</button>\r\n            <button type=\"submit\" class=\"btn btn-secondary col-md-10\">\r\n              End Protocol\r\n            </button>\r\n          </div>\r\n           \r\n        </div>\r\n        <Link to =\"/Infiltrometer/baer-results\">To Results View</Link>\r\n      </div>);\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<BaerReplicationView />, rootElement);\r\nexport default BaerReplicationView;","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js",["107"],"const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js",[],"X:\\CS4791\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":25},{"ruleId":"112","severity":1,"message":"116","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"112","severity":1,"message":"116","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"112","severity":1,"message":"117","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"118","line":2,"column":23,"nodeType":"114","messageId":"115","endLine":2,"endColumn":34},{"ruleId":"112","severity":1,"message":"119","line":7,"column":10,"nodeType":"114","messageId":"115","endLine":7,"endColumn":22},{"ruleId":"112","severity":1,"message":"120","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":19},{"ruleId":"112","severity":1,"message":"121","line":6,"column":9,"nodeType":"114","messageId":"115","endLine":6,"endColumn":18},{"ruleId":"112","severity":1,"message":"122","line":8,"column":3,"nodeType":"114","messageId":"115","endLine":8,"endColumn":28},{"ruleId":"112","severity":1,"message":"123","line":12,"column":10,"nodeType":"114","messageId":"115","endLine":12,"endColumn":19},{"ruleId":"112","severity":1,"message":"124","line":68,"column":9,"nodeType":"114","messageId":"115","endLine":68,"endColumn":21},{"ruleId":"112","severity":1,"message":"125","line":76,"column":9,"nodeType":"114","messageId":"115","endLine":76,"endColumn":20},{"ruleId":"112","severity":1,"message":"126","line":87,"column":9,"nodeType":"114","messageId":"115","endLine":87,"endColumn":26},{"ruleId":"112","severity":1,"message":"127","line":88,"column":9,"nodeType":"114","messageId":"115","endLine":88,"endColumn":17},{"ruleId":"112","severity":1,"message":"128","line":112,"column":12,"nodeType":"114","messageId":"115","endLine":112,"endColumn":33},{"ruleId":"112","severity":1,"message":"129","line":120,"column":12,"nodeType":"114","messageId":"115","endLine":120,"endColumn":36},{"ruleId":"112","severity":1,"message":"130","line":127,"column":12,"nodeType":"114","messageId":"115","endLine":127,"endColumn":27},{"ruleId":"112","severity":1,"message":"131","line":136,"column":12,"nodeType":"114","messageId":"115","endLine":136,"endColumn":32},{"ruleId":"112","severity":1,"message":"116","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"112","severity":1,"message":"132","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":16},{"ruleId":"112","severity":1,"message":"133","line":8,"column":51,"nodeType":"114","messageId":"115","endLine":8,"endColumn":62},{"ruleId":"112","severity":1,"message":"134","line":11,"column":8,"nodeType":"114","messageId":"115","endLine":11,"endColumn":16},{"ruleId":"112","severity":1,"message":"123","line":12,"column":10,"nodeType":"114","messageId":"115","endLine":12,"endColumn":19},{"ruleId":"112","severity":1,"message":"125","line":42,"column":9,"nodeType":"114","messageId":"115","endLine":42,"endColumn":20},{"ruleId":"112","severity":1,"message":"135","line":311,"column":10,"nodeType":"114","messageId":"115","endLine":311,"endColumn":23},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'createAsyncThunk' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'PrintReports' is defined but never used.","'newReport' is defined but never used.","'Protocols' is defined but never used.","'selectInfiltrometerRadius' is defined but never used.","'useEffect' is defined but never used.","'initailState' is assigned a value but never used.","'curSoilType' is assigned a value but never used.","'infiltrometerData' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'ValidateInitialVolume' is defined but never used.","'ValidateInfiltromterType' is defined but never used.","'ValidateSuction' is defined but never used.","'ValidateTimeInterval' is defined but never used.","'ReactDOM' is defined but never used.","'setSoilType' is defined but never used.","'_default' is defined but never used.","'createWrapper' is defined but never used.","no-global-assign","no-unsafe-negation"]