[{"E:\\Infiltrometer\\infiltrometer21\\src\\index.js":"1","E:\\Infiltrometer\\infiltrometer21\\src\\App.js":"2","E:\\Infiltrometer\\infiltrometer21\\src\\app\\store.js":"3","E:\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js":"4","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js":"5","E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\Manuals.js":"6","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js":"7","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js":"8","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js":"9","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js":"10","E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js":"11","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js":"12","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js":"13","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js":"14","E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\pdf-viewer.js":"15","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js":"16","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ReportsTable.js":"17","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js":"18","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js":"19","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js":"20","E:\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js":"21","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js":"22","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js":"23","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js":"24","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsDataPackager.js":"25","E:\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js":"26","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\severityRatings.js":"27","E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\baerLogo.js":"28","E:\\Infiltrometer\\infiltrometer21\\src\\features\\homepage\\HomePage.js":"29","E:\\Infiltrometer\\infiltrometer21\\src\\features\\useful-functions\\usefulFunctions.js":"30","E:\\Infiltrometer\\infiltrometer21\\src\\features\\audio\\Player.js":"31"},{"size":937,"mtime":1634940410132,"results":"32","hashOfConfig":"33"},{"size":1853,"mtime":1638364069435,"results":"34","hashOfConfig":"33"},{"size":1242,"mtime":1635943382561,"results":"35","hashOfConfig":"33"},{"size":5151,"mtime":1631899423581,"results":"36","hashOfConfig":"33"},{"size":599,"mtime":1638363307795,"results":"37","hashOfConfig":"33"},{"size":374,"mtime":1638365645878,"results":"38","hashOfConfig":"33"},{"size":2672,"mtime":1638306337727,"results":"39","hashOfConfig":"33"},{"size":1354,"mtime":1638364028570,"results":"40","hashOfConfig":"33"},{"size":2539,"mtime":1635965093826,"results":"41","hashOfConfig":"33"},{"size":1085,"mtime":1632005081692,"results":"42","hashOfConfig":"33"},{"size":3549,"mtime":1638306333790,"results":"43","hashOfConfig":"33"},{"size":583,"mtime":1635979873463,"results":"44","hashOfConfig":"33"},{"size":1182,"mtime":1632845156587,"results":"45","hashOfConfig":"33"},{"size":7044,"mtime":1638363823356,"results":"46","hashOfConfig":"33"},{"size":3463,"mtime":1638365007380,"results":"47","hashOfConfig":"33"},{"size":2758,"mtime":1638363893294,"results":"48","hashOfConfig":"33"},{"size":11643,"mtime":1638306491619,"results":"49","hashOfConfig":"33"},{"size":2819,"mtime":1631899423578,"results":"50","hashOfConfig":"33"},{"size":12636,"mtime":1638306316787,"results":"51","hashOfConfig":"33"},{"size":9271,"mtime":1632005979115,"results":"52","hashOfConfig":"33"},{"size":1118,"mtime":1633637220340,"results":"53","hashOfConfig":"33"},{"size":175,"mtime":1631965019821,"results":"54","hashOfConfig":"33"},{"size":202,"mtime":1631899423578,"results":"55","hashOfConfig":"33"},{"size":3873,"mtime":1636672911327,"results":"56","hashOfConfig":"33"},{"size":3195,"mtime":1636804790756,"results":"57","hashOfConfig":"33"},{"size":202,"mtime":1633277181040,"results":"58","hashOfConfig":"33"},{"size":222,"mtime":1635021820786,"results":"59","hashOfConfig":"33"},{"size":3422,"mtime":1636922416629,"results":"60","hashOfConfig":"33"},{"size":3122,"mtime":1638202203355,"results":"61","hashOfConfig":"33"},{"size":878,"mtime":1636805841804,"results":"62","hashOfConfig":"33"},{"size":599,"mtime":1637178083446,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"c42c6c",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"66"},"E:\\Infiltrometer\\infiltrometer21\\src\\index.js",[],["139","140"],"E:\\Infiltrometer\\infiltrometer21\\src\\App.js",["141","142"],"E:\\Infiltrometer\\infiltrometer21\\src\\app\\store.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\Manuals.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js",["143","144"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n  reports: {},\r\n  curId: \"-1\",\r\n\r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId = uuidv4();\r\n\r\n      let newReport =\r\n      {\r\n        id: state.curId,\r\n        date: action.payload.date,\r\n        protocol: action.payload.protocol,\r\n        readings: [],\r\n        infiltrometerData: action.payload.infiltrometerData,\r\n        gatheringData: true,\r\n        notes: \"\",\r\n      }\r\n      //add it to the reports\r\n      state.reports[newReport.id] = newReport;\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action) => {\r\n      //add the reading to the end of the list of readings\r\n      state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings,\r\n        action.payload];\r\n\r\n    },\r\n    //sets the current gathering data report\r\n    setGatheringData: (state, action) => {\r\n      state.reports[state.curId].gatheringData = action.payload;\r\n    },\r\n    removeReport: (state, action) => {\r\n\r\n\r\n      //remove the report with the id provided in action.payload\r\n      delete state.reports[action.payload];\r\n\r\n      //if the current report is the one we are trying to delete, set a new current id\r\n      if (state.curId == action.payload) {\r\n        state.curId = Object.keys(state.reports)[0];\r\n      }\r\n\r\n\r\n\r\n    },\r\n    setCurId: (state, action) => {\r\n      state.curId = action.payload;\r\n    },\r\n    setNotes: (state, action) => {\r\n      state.reports[state.curId].notes = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading, setGatheringData, removeReport, setCurId, setNotes } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectNotes = (state) => state.reports.reports[state.reports.curId].notes;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport const selectGatheringData = (state) => {\r\n  if (state.reports.reports[state.reports.curId] === undefined) return undefined;\r\n  else return state.reports.reports[state.reports.curId].gatheringData;\r\n}\r\nexport default reportsSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js",["145","146","147","148"],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js",["149","150","151"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\n\r\n\r\n const initialState = {  \r\n        initialVolume: 95,\r\n        \r\n        coordinates: {\r\n          lat:0,\r\n          long: 0,\r\n        },\r\n\r\n        soilType: {\r\n          nh0: 2.28,\r\n          alpha: 0.124\r\n        },\r\n        \r\n        infiltrometerRadius: 2.25,\r\n        infiltrometerSuction: -1,\r\n        timeInterval: 60,\r\n        site: \"Site\",\r\n        observation: \"Observation\",\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * We need slices to \r\n */\r\nexport const baerInitializeSlice = createSlice({\r\n  \r\n  name: 'baerInitialize',\r\n  \r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setInitialVolume: (state, action)=>{\r\n\r\n      state.initialVolume = action.payload;\r\n    \r\n    },\r\n    setInfiltrometerSuction: (state, action)=>{\r\n      state.infiltrometerSuction = action.payload;\r\n    },\r\n    setTimeInterval: (state, action)=>{\r\n      state.timeInterval = action.payload;\r\n    },\r\n    setSoilType:(state, action)=>{\r\n      state.soilType = action.payload;\r\n    },\r\n    setInfiltrometerData:(state, action)=>{\r\n      state.initialVolume = action.payload.initialVolume;\r\n      state.coordinates = action.payload.coordinates;\r\n      state.soilType = action.payload.soilType;\r\n      state.timeInterval = action.payload.timeInterval;\r\n      state.infiltrometerRadius = action.payload.infiltrometerRadius;\r\n      state.infiltrometerSuction = action.payload.infiltrometerSuction;\r\n      state.site = action.payload.site;\r\n      state.observation = action.payload.observation;\r\n    }\r\n\r\n  }\r\n});\r\n\r\n/**\r\n * A selector returning the current type of the infiltrometer\r\n * @param {*} state \r\n * @returns \r\n */\r\n\r\nexport const selectInfiltrometerRadius = (state) => state.baerInitialize.infiltrometerR;\r\n\r\nexport const selectInfiltrometerSuction = (state) => state.baerInitialize.suction;\r\n\r\nexport const selectSoilType = (state) => state.baerInitialize.soilType;\r\n\r\nexport const selectInitialVolume = (state) => state.baerInitialize.initialVolume;\r\n\r\nexport const selectInfiltrometerData = (state) => state.baerInitialize;\r\n\r\nexport const selectTimeInterval = (state) => state.baerInitialize.timeInterval;\r\n\r\n\r\n//export the actions\r\nexport const {  setInitialVolume, setInfiltrometerSuction, setTimeInterval, setSoilType,setInfiltrometerData } = baerInitializeSlice.actions;\r\n\r\n\r\n\r\nexport default baerInitializeSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js",["152","153","154","155"],"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { BaerLogo } from \"./baerLogo\";\r\nimport { Pages } from \"../page-redirection/Redirector\";\r\nexport const NavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initialState = {\r\n        collapsed: false\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Container>\r\n\r\n                <Navbar.Brand >\r\n                    <div class=\"container\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col\">\r\n                                <BaerLogo width={1} height={110}>\r\n                                </BaerLogo>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </Navbar.Brand>\r\n                <Navbar.Brand href=\"https://www.mtu.edu/computing/\" >\r\n                    <div class=\"container\">\r\n                        <div class=\"row\">\r\n\r\n                            <div class=\"col\">\r\n                                <img\r\n                                    src=\"https://www.mtu.edu/mtu_resources/images/download-central/logos/husky-icon/white.png\"\r\n                                    width=\"56\"\r\n                                    className=\"d-inline-block align-top\"\r\n                                    alt=\"MTU logo\"\r\n                                />\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"me-auto\">\r\n                        <Nav.Link onClick={() => dispatch(setPage(Pages.Homepage))}>\r\n                            Home\r\n                        </Nav.Link>\r\n                        <NavDropdown title=\"New Test\" id=\"new-test-drop-down\">\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.BaerInitializeView))}>\r\n                                BAER protocol</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        <Nav.Link onClick={() => dispatch(setPage(Pages.ReportsView))}>\r\n                            My Reports\r\n                        </Nav.Link>\r\n                        <NavDropdown title=\"Manuals\" id=\"manuals-drop-down\">\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.BaerManual))}>\r\n                                BAER\r\n                            </NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item onClick={() => dispatch(setPage(Pages.InfiltrometerManual))}>\r\n                                Infiltrometer</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Nav.Link href=\"https://github.com/2021-SD-UI/Infiltrometer/\">\r\n                            GitHub\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n\r\n\r\n}","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js",["156","157"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport {baerInitializeSlice} from \"../baer-initialize/bear-initializeSlice\";\r\n\r\n\r\n\r\nconst initialState = {\r\n    notes: \"hi im a note\"\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n      setNotes: (state, action)=>{\r\n\r\n          state.notes = action.payload;\r\n          console.log(state.notes);\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js",["158","159","160","161","162","163","164"],"//The Page we are displaying for the baer Initialize view\r\nimport React, { useState } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport reportsSlice, { addReading, selectCurId, selectReports, selectCurReadingID, setGatheringData } from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport Table from '../baer-results/table';\r\nimport { Modal, Button, Form, Container, Row, Col, } from 'react-bootstrap';\r\nimport { addGeoDataToReading } from '../../useful-functions/usefulFunctions';\r\nimport { useAudio } from '../../audio/Player';\r\nimport { Pages } from '../../page-redirection/Redirector';\r\nimport beep from '../../audio/beep-01a.mp3';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div className=\"text\">Time remaining:</div>\r\n      <div className=\"value\">{remainingTime}</div>\r\n      <div className=\"text\">seconds</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n  const curID = useSelector(selectCurReadingID);\r\n  const setPlaying = (playing) => setState({ ...state, timerIsPlaying: playing });\r\n  const dispatch = useDispatch();\r\n\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n  const [state, setState] = useState(initializeState);\r\n\r\n  function endProtocol() {\r\n\r\n    //mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n    //go to the results page\r\n    dispatch(setPage(Pages.BaerResultsView))\r\n  }\r\n\r\n  /* Modal -------------------------------------------------------------- */\r\n  const [show, setShow] = useState(false);\r\n  const [playing, toggle] = useAudio(beep);\r\n  const [validated, setValidated] = useState(false);\r\n  const handleClose = () => { setShow(false); setPlaying(false) };\r\n  const handleShow = () => {\r\n\r\n    //play audio\r\n    if (!playing) toggle();\r\n\r\n    //open the modal\r\n    setShow(true);\r\n\r\n  }\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setValidated(true);\r\n    const form = event.currentTarget;\r\n    const volumeReading = document.getElementById(\"volumeReading\").value;\r\n    if (form.checkValidity() === false) {\r\n      event.stopPropagation();\r\n    }\r\n    else {\r\n      handleClose();\r\n      setValidated(false);\r\n      //calculate the total number of elapsed seconds\r\n      let secondsElapsed = (curID + 1) * timeInterval;\r\n\r\n      //set the volume and time in the replication store\r\n      dispatch(setLastVolume(volumeReading));\r\n      dispatch(setVolume(volumeReading));\r\n      dispatch(setSecondsElapsed(secondsElapsed));\r\n\r\n      //add the reading using the reports slice\r\n      //try to gather geo data\r\n      addGeoDataToReading({ volume: volumeReading, secondsElapsed }, (newReading) => {\r\n        dispatch(addReading(newReading));\r\n      });\r\n\r\n\r\n\r\n    }\r\n  };\r\n  /* --------------------------------------------------------------------- */\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"mt-3\">\r\n        <div class=\"rounded border shadow\">\r\n          <h1 className=\"pt-5 display-4\">Current Replication: {curID + 1}</h1>\r\n          <Row>\r\n            <Col>\r\n              <div className=\"mt-4 timer-wrapper\">\r\n                <CountdownCircleTimer\r\n                  key={state.key}\r\n                  isPlaying={state.timerIsPlaying}\r\n                  duration={Number(timeInterval)}\r\n                  colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                  onComplete={() => handleShow()}\r\n                >\r\n                  {renderTime}\r\n                </CountdownCircleTimer>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-center\">\r\n            <Col className=\"mt-4\">\r\n              <Button\r\n                variant=\"dark\"\r\n                className=\"w-50\"\r\n                size=\"lg\"\r\n                disabled={state.timerIsPlaying}\r\n                onClick={() => { setState({ timerIsPlaying: true, key: state.key + 1 }); }}\r\n              >\r\n                {!state.timerIsPlaying ? \"Start Replication\" : \"Replication Running...\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-center\">\r\n            <Col className=\"mt-2\">\r\n              <Button\r\n                variant=\"secondary\"\r\n                className=\"w-50\"\r\n                size=\"lg\"\r\n                onClick={endProtocol}\r\n              >\r\n                End Protocol\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-4\">\r\n            <Col>\r\n              <Table>{/* This table is rendered from table.js */}</Table>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Enter volumetric data for replication: {curID + 1}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form\r\n            noValidate\r\n            validated={validated}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            <Form.Group>\r\n              <Form.Text muted>\r\n                Previous volume: {maxVolume} mL\r\n              </Form.Text>\r\n              <Form.Control\r\n                required\r\n                type=\"number\"\r\n                step=\"any\"\r\n                size=\"lg\"\r\n                min=\"0\"\r\n                max={maxVolume}\r\n                id=\"volumeReading\"\r\n                placeholder=\"Volume (mL)\"\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Please enter a valid reading, or hit \"Cancel\".\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Modal.Footer>\r\n              <Button\r\n                variant=\"outline-secondary\"\r\n                size=\"lg\"\r\n                onClick={handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"dark\"\r\n                size=\"lg\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default BaerReplicationView;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\pdfviewer\\pdf-viewer.js",["165","166","167","168","169"],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js",["170","171"],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ReportsTable.js",["172","173","174","175","176","177","178"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Protocols } from \"./protocols\";\r\nimport { removeReport, selectReports, setCurId } from \"./reportsSlice\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { makeCSV, makeCSVFromGroupOfReports } from \"./reportsDataPackager\";\r\nimport { selectCurId } from \"./reportsSlice\";\r\nimport React, { useState } from \"react\";\r\nimport { Container, Row, Col, Form, Button, Table, Alert } from \"react-bootstrap\";\r\nimport { Pages } from \"../page-redirection/Redirector\";\r\nconst ReportsTable = () => {\r\n\r\n    const [selectedReports, setSelectedReports] = useState({});\r\n    const numberOfSelectedReports = Object.keys(selectedReports).length;\r\n\r\n    const reports = useSelector(selectReports);\r\n    const curReport = reports[useSelector(selectCurId)]\r\n    const dispatch = useDispatch();\r\n    /**\r\n     * Map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return Object.keys(reports).map(reportID => {\r\n\r\n            const report = reports[reportID]\r\n            return (\r\n                <>\r\n                    <tr key={report.id}>\r\n                        <td>\r\n                            <Container className=\"my-2\">\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form>\r\n                                            <Form.Check\r\n                                                label={formatDate(report.date)}\r\n                                                checked={selectedReports[report.id] != undefined}\r\n                                                onChange={() => {\r\n                                                    if (selectedReports[report.id] != undefined) {\r\n                                                        deselectReport(report);\r\n                                                    }\r\n                                                    else {\r\n                                                        selectReport(report);\r\n                                                    }\r\n\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                        </Form>\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                        <td>\r\n                            <Container className=\"my-2\">\r\n                                <Row>\r\n                                    {report.infiltrometerData.site}\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                        <td>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Button\r\n                                            variant=\"dark\"\r\n                                            className=\"w-100 my-1\"\r\n                                            onClick={() => { showReport(report) }}\r\n                                        >\r\n                                            View\r\n                                        </Button>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Button\r\n                                            variant=\"danger\"\r\n                                            className=\"w-100 my-1\"\r\n                                            onClick={() => { deleteReport(report) }}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                            </Container>\r\n                        </td>\r\n                    </tr>\r\n                </>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Deselects and deletes the provided report\r\n     * @param {\r\n     * } report \r\n     */\r\n    function deleteReport(report) {\r\n        //delete the report from selected if it is in selected\r\n        if (selectedReports[report.id] != undefined) deselectReport(report);\r\n\r\n        //remove the report from the store\r\n        dispatch(removeReport(report.id))\r\n    }\r\n\r\n    /**\r\n     * Deletes all the currently selected reports\r\n     */\r\n    function deleteAllSelected() {\r\n        let selected = { ...selectedReports };\r\n        let reportKeys = Object.keys(selected);\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            deleteReport(selected[reportKeys[i]]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the report from the selected reports\r\n     * @param {} report \r\n     */\r\n    function deselectReport(report) {\r\n        var _repo = { ...selectedReports };\r\n        delete _repo[report.id];\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Adds the report to the selected reports\r\n     * @param {} report \r\n     */\r\n    function selectReport(report) {\r\n        var _repo = { ...selectedReports };\r\n        _repo[report.id] = report;\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Selects all the reports\r\n     */\r\n    function selectAll() {\r\n        let reportKeys = Object.keys(reports);\r\n        var _repo = { ...selectedReports };\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            _repo[reportKeys[i]] = reports[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n    /**\r\n     * Unselects all reports\r\n     */\r\n    function unselectAll() {\r\n        let reportKeys = Object.keys(reports);\r\n        var _repo = { ...selectedReports };\r\n        for (var i = 0; i < reportKeys.length; i++) {\r\n            delete _repo[reportKeys[i]];\r\n        }\r\n        setSelectedReports(_repo);\r\n    }\r\n\r\n    function showReport(report) {\r\n        switch (report.protocol) {\r\n            case Protocols.Baer:\r\n                dispatch(setCurId(report.id));\r\n                dispatch(setPage(Pages.BaerResultsView));\r\n\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function formatDate(date) {\r\n        let d = new Date(date);\r\n        if (d.toDateString() === new Date().toDateString()) {\r\n            return \"Today\";\r\n        }\r\n        return (d.toDateString());\r\n    }\r\n\r\n    /**\r\n     * Create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        let header = ['Date', 'Site', 'Options'];\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toLowerCase() === \"site\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Site</th>\r\n            }\r\n            if (key.toLowerCase() === \"date\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Date</th>\r\n            }\r\n            if (key.toLowerCase() == \"options\") {\r\n                return <th class=\"table-dark text-center\" key={index}>Options</th>\r\n            }\r\n\r\n        })\r\n    }\r\n    /**\r\n     * Conditional renderer for the download and delete buttons that require selecting\r\n     */\r\n    function SelectButtons() {\r\n\r\n        if (numberOfSelectedReports > 0) {\r\n            return (\r\n                <>\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            className=\"w-100\"\r\n                            onClick={() => { deleteAllSelected() }}\r\n                        >\r\n                            Delete ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <CSVLink {...makeCSVFromGroupOfReports(selectedReports)} class=\"btn btn-success w-100\">\r\n                            Download ({numberOfSelectedReports})\r\n                        </CSVLink>\r\n                    </Col>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            disabled\r\n                            variant=\"secondary\"\r\n                            className=\"w-100\"\r\n                        >\r\n                            Delete ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n\r\n                    <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                        <Button\r\n                            disabled\r\n                            variant=\"secondary\"\r\n                            className=\"w-100\"\r\n                        >\r\n                            Download ({numberOfSelectedReports})\r\n                        </Button>\r\n                    </Col>\r\n                </>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n    //see if there is any data\r\n    if (Object.keys(reports).length > 0) {\r\n        //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <Container className=\"mt-3\">\r\n                <div class=\"rounded border shadow\">\r\n                    <h1 className=\"my-5 display-4\">Reports</h1>\r\n                    <Row className=\"justify-content-center m-2\">\r\n                        <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                            <Button\r\n                                variant=\"dark\"\r\n                                className=\"w-100\"\r\n                                onClick={() => { selectAll() }}\r\n                            >\r\n                                Select All\r\n                            </Button>\r\n                        </Col>\r\n                        <Col className=\"m-2 col-6 col-md-3 col-lg-2 text-center\">\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                className=\"w-100\"\r\n                                onClick={() => { unselectAll() }}\r\n                            >\r\n                                Unselect All\r\n                            </Button>\r\n                        </Col>\r\n                        <SelectButtons />\r\n                    </Row>\r\n                    <Row className=\"m-3\">\r\n                        <Col>\r\n                            <Table light striped bordered hover id='students'>\r\n                                <tbody>\r\n                                    <tr>{renderTableHeader()}</tr>\r\n                                    {renderTableData()}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container className=\"mt-3\">\r\n                <div class=\"rounded border shadow\">\r\n                    <Row>\r\n                        <h1 className=\"display-4\">No Saved Reports</h1>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Alert variant=\"danger w-50\" className=\"text-center\">Click \"New Test\" to start creating a report.</Alert>\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default ReportsTable;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js",["179","180","181","182","183","184","185","186","187","188","189","190"],"//The Page we are displaying for the baer Initialize view\r\nimport React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addReading, newReport, selectCurId, selectReports } from '../../reports/reportsSlice';\r\nimport { Protocols } from '../../reports/protocols'\r\nimport {\r\n  selectInitialVolume, selectInfiltrometerData,\r\n  selectInfiltrometerRadius, selectInfiltrometerSuction,\r\n  setInitialVolume, setInfiltrometerSuction, setTimeInterval,\r\n  selectTimeInterval, setSoilType, selectSoilType, setInfiltrometerData\r\n} from './bear-initializeSlice';\r\nimport { setLastVolume, setSecondsElapsed, setVolume } from '../baer-replication/bear-replicationSlice';\r\nimport { soilTypes } from '../../../app/soilTypes';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport { Button, Form, Dropdown, DropdownButton, Container, Row, Col } from 'react-bootstrap';\r\nimport { infiltrometerTypes } from '../../../app/infiltrometerType';\r\nimport { addGeoDataToReading, addReadingWithGeoData } from '../../useful-functions/usefulFunctions';\r\nimport { Pages } from '../../page-redirection/Redirector';\r\nconst BaerInitializeView = () => {\r\n  const curInfiltrometerData = useSelector(selectInfiltrometerData);\r\n  const [validated, setValidated] = useState(true);\r\n  const dispatch = useDispatch();\r\n\r\n  const setRadiusPreset = (event) => {\r\n    let radius = document.getElementById(\"radius\");\r\n    radius.value = event;\r\n  }\r\n\r\n  const setSuctionPreset = (event) => {\r\n    let suction = document.getElementById(\"suction\");\r\n    suction.value = event;\r\n  }\r\n\r\n  const setSoilPreset = (event) => {\r\n    let nh0 = document.getElementById(\"nh0\");\r\n    let alpha = document.getElementById(\"alpha\");\r\n    nh0.value = event.nh0;\r\n    alpha.value = event.alpha;\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const form = event.currentTarget;\r\n    let site = document.getElementById(\"site\").value;\r\n    let observation = document.getElementById(\"observation\").value;\r\n    let volume = document.getElementById(\"volume\").value;\r\n    let suction = document.getElementById(\"suction\").value;\r\n    let timeInterval = document.getElementById(\"timeInterval\").value;\r\n    let radius = document.getElementById(\"radius\").value;\r\n    let nh0 = document.getElementById(\"nh0\").value;\r\n    let alpha = document.getElementById(\"alpha\").value;\r\n\r\n    if (form.checkValidity() === false) {\r\n      setValidated(true);\r\n      event.stopPropagation();\r\n    }\r\n    else {\r\n      let infiltrometerData = {\r\n        initialVolume: volume,\r\n        coordinates: { lat: 0, long: 0, },\r\n        soilType: { nh0: nh0, alpha: alpha },\r\n        infiltrometerRadius: radius,\r\n        timeInterval: timeInterval,\r\n        infiltrometerSuction: suction,\r\n        site,\r\n        observation\r\n      }\r\n\r\n      //set the infitrometer data in the store\r\n      dispatch(setInfiltrometerData(infiltrometerData));\r\n\r\n      //set the last volume to the initial volume for the replication view\r\n      dispatch(setInitialVolume(volume));\r\n      dispatch(setVolume(volume));\r\n      dispatch(setLastVolume(volume));\r\n\r\n      //send out the new report to the store\r\n      dispatch(newReport({\r\n        date: (new Date()).toString(),\r\n        protocol: Protocols.Baer,\r\n        infiltrometerData\r\n      }));\r\n\r\n\r\n\r\n      //try to get the geolocation data\r\n      addGeoDataToReading({ volume, secondsElapsed: 0 }, (reading) => {\r\n        dispatch(addReading(reading));\r\n\r\n        dispatch(setPage(Pages.BaerReplicationView));\r\n\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    let site = document.getElementById(\"site\"); site.value = \"\";\r\n    let observation = document.getElementById(\"observation\"); observation.value = \"\";\r\n    let volume = document.getElementById(\"volume\"); volume.value = \"\";\r\n    let suction = document.getElementById(\"suction\"); suction.value = \"\";\r\n    let timeInterval = document.getElementById(\"timeInterval\"); timeInterval.value = \"\";\r\n    let radius = document.getElementById(\"radius\"); radius.value = \"\";\r\n    let nh0 = document.getElementById(\"nh0\"); nh0.value = \"\";\r\n    let alpha = document.getElementById(\"alpha\"); alpha.value = \"\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"mt-3\">\r\n        <div class=\"rounded border shadow\">\r\n          <h1 className=\"pt-5 display-4\">Initialize BAER Protocol</h1>\r\n          <Form className=\"p-5\" noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label>Site Name</Form.Label>\r\n                  <Form.Control\r\n                    id=\"site\"\r\n                    type=\"text\"\r\n                    size=\"lg\"\r\n                    defaultValue={curInfiltrometerData.site}\r\n                    placeholder=\"Enter site name...\"\r\n                  />\r\n                  <div className=\"pt-2\" />\r\n                  <Form.Label>Observation Name</Form.Label>\r\n                  <Form.Control\r\n                    id=\"observation\"\r\n                    type=\"text\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    defaultValue={curInfiltrometerData.observation}\r\n                    placeholder=\"Enter observation...\"\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-5\">\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label>Volume (mL)</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"volume\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={curInfiltrometerData.initialVolume}\r\n                    placeholder=\"Initial Volume (mL)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label className=\"pt-3\">Suction (cm)</Form.Label>\r\n                  <DropdownButton variant=\"dark\" title=\"Preset Suction Values\">\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-0.5)}> -0.5 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-1)}> -1 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-2)}> -2 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-3)}> -3 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-4)}> -4 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-5)}> -5 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-6)}> -6 </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSuctionPreset(-7)}> -7 </Dropdown.Item>\r\n                  </DropdownButton>\r\n                  <div className=\"pt-2\" />\r\n                  <Form.Control\r\n                    required\r\n                    id=\"suction\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    max=\"0\"\r\n                    defaultValue={curInfiltrometerData.infiltrometerSuction}\r\n                    placeholder=\"Suction (cm)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label>Time (seconds)</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"timeInterval\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"1\"\r\n                    defaultValue={curInfiltrometerData.timeInterval}\r\n                    placeholder=\"Time (sec)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label className=\"pt-3\">Radius (cm)</Form.Label>\r\n                  <DropdownButton variant=\"dark\" title=\"Preset Infiltrometer Types\">\r\n                    <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDisk.radius)}>\r\n                      {infiltrometerTypes.MiniDisk.displayName}\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setRadiusPreset(infiltrometerTypes.MiniDiskV1.radius)}>\r\n                      {infiltrometerTypes.MiniDiskV1.displayName}\r\n                    </Dropdown.Item>\r\n                  </DropdownButton>\r\n                  <div className=\"pt-2\" />\r\n                  <Form.Control\r\n                    required\r\n                    id=\"radius\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={infiltrometerTypes.MiniDisk.radius}\r\n                    placeholder=\"Radius (cm)\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group>\r\n                  <Form.Label className=\"pt-3\">Soil Type</Form.Label>\r\n                  <DropdownButton variant=\"dark\" title=\"Preset Soil Types\">\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clay)}> Clay </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.clayLoam)}> Clay Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loam)}> Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.loamySand)}> Loamy Sand </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sand)}> Sand </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyClay)}> Sandy Clay </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.sandyLoam)}> Sandy Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.silt)}> Silt </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltLoam)}> Silt Loam </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClay)}> Silty Clay </Dropdown.Item>\r\n                    <Dropdown.Item onSelect={() => setSoilPreset(soilTypes.siltyClayLoam)}> Silty Clay Loam </Dropdown.Item>\r\n                  </DropdownButton>\r\n                  <div className=\"pt-2\" />\r\n                  <Form.Label>N/H0</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"nh0\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={soilTypes.loamySand.nh0}\r\n                    placeholder=\"N/H0\"\r\n                  />\r\n                  <div className=\"pt-2\" />\r\n                  <Form.Label>Alpha</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    id=\"alpha\"\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    size=\"lg\"\r\n                    min=\"0\"\r\n                    defaultValue={soilTypes.loamySand.alpha}\r\n                    placeholder=\"Alpha\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    Required!\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-4\">\r\n              <Col>\r\n                <Button type=\"submit\" variant=\"dark\" size=\"lg\" className=\"w-100\">Start Protocol</Button>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n              <Col>\r\n                <Button variant=\"danger\" size=\"sm\" className=\"w-100\" onClick={handleReset}>Clear Values</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </Container>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default BaerInitializeView;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js",["191"],"const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js",["192","193","194","195","196","197"],"import React, {Component, useEffect, useState} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\nimport {SeverityRatings} from \"../../reports/severityRatings\";\r\nimport { findAverageRate, findSeverityRating, findRate } from '../../reports/reportsDataPackager';\r\n\r\nconst Table = () => {\r\n    const rawReports = useSelector(selectReports);\r\n\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n\r\n\r\n    const [state, setState] = useState(filterReadings());\r\n\r\n\r\n\r\n    /**\r\n     * Create an array to use for a table row from reading data\r\n     */\r\n    function filterReadings(){\r\n        \r\n\r\n        if (curReport == undefined) return{reports: []};\r\n\r\n        let readingsArr = [];\r\n        for(let i = 0; i < curReport.readings.length; i++){\r\n            readingsArr[i] = {\r\n\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i, curReport)\r\n\r\n            };\r\n        }\r\n        return {reports: readingsArr};\r\n    }\r\n\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const {id, Time, Volume,Rate} = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate.toPrecision(4)}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        try{\r\n            let header = Object.keys(state.reports[0])\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toUpperCase() === \"ID\") {\r\n                return <th key={index}>{key.toUpperCase()}</th>\r\n            }\r\n            if (key.toUpperCase() === \"TIME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n            }\r\n\r\n\r\n            if (key.toUpperCase() === \"VOLUME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n            }\r\n            if (key.toUpperCase() === \"RATE\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n            }\r\n        })\r\n        }\r\n        catch (e){\r\n            return <th key = {0}>No Readings To Display</th>;\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n     //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                    <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                <table class=\"table table-light table-striped table-hover\">\r\n                    <tbody>\r\n                        <tr class=\"table-dark\">\r\n                            <th class=\"text-center\">AVERAGE (mL/min)</th>\r\n                            <th className=\"text-center\">SEVERITY RATING</th>\r\n                        </tr>\r\n                        <tr class=\"table-striped\">\r\n                            <td className=\"text-center\">{findAverageRate(curReport).toPrecision(4)}</td>\r\n                            <td class=\"text-center\">{findSeverityRating(findAverageRate(curReport)).name}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsDataPackager.js",["198"],"import { SeverityRatings } from \"./severityRatings\";\r\n\r\n\r\n/**\r\n * create a csv of the current report\r\n * @param {The current report} i\r\n */\r\nexport function makeCSV(curReport) {\r\n\r\n\r\n    let obj = {};\r\n    obj[curReport.id] = curReport;\r\n    return makeCSVFromGroupOfReports(obj);\r\n\r\n}\r\n\r\n\r\nfunction handleTextForCSV(text) {\r\n    if (text == undefined) return (\"\");\r\n    return text.toString().replaceAll('\"', '\"\"');\r\n\r\n}\r\n/**\r\n * \r\n * @param {Object of key-report pairs} reportGroup \r\n * @returns \r\n */\r\nexport function makeCSVFromGroupOfReports(reportGroup) {\r\n    let data = [['Date', 'Protocol', 'Soil Alpha', 'Soil NH/O', 'Average Rate (mL/min)', 'Severity Rating', 'Site Name', 'Observation Name',\r\n        'Notes', 'Replication Number', 'Time (sec)', 'Volume(mL)', 'Rate(mL / min)', 'Latitude', 'Longitude']];\r\n    Object.keys(reportGroup).forEach(reportID => {\r\n        let curReport = reportGroup[reportID];\r\n        let curReportData = [curReport.date, curReport.protocol, curReport.infiltrometerData.soilType.alpha, curReport.infiltrometerData.soilType.nh0,\r\n        findAverageRate(curReport), findSeverityRating(findAverageRate(curReport)).name, handleTextForCSV(curReport.infiltrometerData.site),\r\n        handleTextForCSV(curReport.infiltrometerData.observation), handleTextForCSV(curReport.notes)];\r\n\r\n        let i = 0;\r\n        //readings data\r\n        curReport.readings.forEach(reading => {\r\n            //reading data\r\n            let row = [...curReportData];\r\n\r\n            row.push((i + 1).toString(), reading.secondsElapsed,\r\n                reading.volume,\r\n                findRate(i, curReport), reading.lat, reading.lon);\r\n\r\n            data.push(row);\r\n            i++;\r\n        });\r\n    });\r\n    return { data, filename: \"reports.csv\" }\r\n}\r\n\r\n/**\r\n * Find ml/min for a reading\r\n * @param {The current reading index} i\r\n */\r\nexport function findRate(readingIndex, report) {\r\n    if (readingIndex > 0) {\r\n\r\n        let deltaV = report.readings[readingIndex - 1].volume - report.readings[readingIndex].volume;\r\n        let deltaT = report.readings[readingIndex].secondsElapsed - report.readings[readingIndex - 1].secondsElapsed;\r\n        return (deltaV) / (deltaT / 60);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Find average rate (ml/min)\r\n * Relies on findRate(i) to get rates for calculating the average\r\n * @param {The current reading index} i\r\n */\r\nexport function findAverageRate(report) {\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < report.readings.length; i++) {\r\n        sum += findRate(i, report);\r\n    }\r\n\r\n    return sum / (report.readings.length - 1);\r\n}\r\n\r\n/**\r\n * Returns severity rating based on average rate\r\n * See severityRatings.js for severity rating values\r\n * @param {Average flow rate} avgRate\r\n */\r\nexport function findSeverityRating(avgRate) {\r\n    if (avgRate >= SeverityRatings.None.min)\r\n        return SeverityRatings.None;\r\n    if (avgRate >= SeverityRatings.Strong.min && avgRate < SeverityRatings.Strong.max)\r\n        return SeverityRatings.Strong;\r\n    if (avgRate >= SeverityRatings.Weak.min && avgRate < SeverityRatings.Weak.max)\r\n        return SeverityRatings.Weak;\r\n    else return SeverityRatings.None;\r\n}\r\n\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\severityRatings.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\baerLogo.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\homepage\\HomePage.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\useful-functions\\usefulFunctions.js",["199"],"import { useDispatch } from \"react-redux\";\r\n/**\r\n * \r\n * @param {Returns the reading with geo data, if possible\r\n * If geo data cannot be collected, fills with \"N/A\"} reading \r\n * @param {Function to call after finishing adding the data, takes the new reading\r\n * as a param} onFinished \r\n */\r\nexport function addGeoDataToReading(reading, onFinished) {\r\n    const dispatch = useDispatch;\r\n\r\n    //try to get the geolocation data\r\n    navigator.geolocation.getCurrentPosition((pos) => {\r\n        //add the intial reading\r\n        onFinished({\r\n            ...reading,\r\n            lat: pos.coords.latitude,\r\n            lon: pos.coords.longitude,\r\n        });\r\n\r\n    },\r\n        (err) => {\r\n            //add the intial reading\r\n            onFinished({\r\n                ...reading,\r\n                lat: \"N/A\",\r\n                lon: \"N/A\"\r\n            });\r\n        }\r\n    )\r\n\r\n}","E:\\Infiltrometer\\infiltrometer21\\src\\features\\audio\\Player.js",["200","201","202"],"import React, { useState, useEffect } from \"react\";\r\n\r\nexport const useAudio = url => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    const toggle = () => setPlaying(!playing);\r\n\r\n    useEffect(() => {\r\n        playing ? audio.play() : audio.pause();\r\n    },\r\n        [playing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        audio.addEventListener('ended', () => setPlaying(false));\r\n        return () => {\r\n            audio.removeEventListener('ended', () => setPlaying(false));\r\n        };\r\n    }, []);\r\n\r\n    return [playing, toggle];\r\n};\r\n",{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":3,"column":37,"nodeType":"209","messageId":"210","endLine":3,"endColumn":41},{"ruleId":"207","severity":1,"message":"211","line":7,"column":10,"nodeType":"209","messageId":"210","endLine":7,"endColumn":27},{"ruleId":"207","severity":1,"message":"212","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"213","severity":1,"message":"214","line":61,"column":23,"nodeType":"215","messageId":"216","endLine":61,"endColumn":25},{"ruleId":"207","severity":1,"message":"217","line":4,"column":10,"nodeType":"209","messageId":"210","endLine":4,"endColumn":15},{"ruleId":"207","severity":1,"message":"218","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":19},{"ruleId":"207","severity":1,"message":"219","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":20},{"ruleId":"207","severity":1,"message":"220","line":6,"column":24,"nodeType":"209","messageId":"210","endLine":6,"endColumn":35},{"ruleId":"207","severity":1,"message":"212","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"221","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":21},{"ruleId":"207","severity":1,"message":"222","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":19},{"ruleId":"207","severity":1,"message":"223","line":2,"column":23,"nodeType":"209","messageId":"210","endLine":2,"endColumn":34},{"ruleId":"207","severity":1,"message":"224","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":20},{"ruleId":"207","severity":1,"message":"225","line":15,"column":12,"nodeType":"209","messageId":"210","endLine":15,"endColumn":17},{"ruleId":"207","severity":1,"message":"226","line":15,"column":19,"nodeType":"209","messageId":"210","endLine":15,"endColumn":27},{"ruleId":"207","severity":1,"message":"212","line":1,"column":10,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"227","line":2,"column":9,"nodeType":"209","messageId":"210","endLine":2,"endColumn":28},{"ruleId":"207","severity":1,"message":"228","line":3,"column":8,"nodeType":"209","messageId":"210","endLine":3,"endColumn":16},{"ruleId":"207","severity":1,"message":"219","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":20},{"ruleId":"207","severity":1,"message":"220","line":6,"column":36,"nodeType":"209","messageId":"210","endLine":6,"endColumn":47},{"ruleId":"207","severity":1,"message":"229","line":6,"column":49,"nodeType":"209","messageId":"210","endLine":6,"endColumn":62},{"ruleId":"207","severity":1,"message":"230","line":7,"column":51,"nodeType":"209","messageId":"210","endLine":7,"endColumn":62},{"ruleId":"207","severity":1,"message":"231","line":7,"column":64,"nodeType":"209","messageId":"210","endLine":7,"endColumn":78},{"ruleId":"207","severity":1,"message":"232","line":10,"column":8,"nodeType":"209","messageId":"210","endLine":10,"endColumn":16},{"ruleId":"207","severity":1,"message":"218","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":26},{"ruleId":"207","severity":1,"message":"233","line":13,"column":12,"nodeType":"209","messageId":"210","endLine":13,"endColumn":17},{"ruleId":"207","severity":1,"message":"234","line":13,"column":19,"nodeType":"209","messageId":"210","endLine":13,"endColumn":27},{"ruleId":"207","severity":1,"message":"235","line":14,"column":12,"nodeType":"209","messageId":"210","endLine":14,"endColumn":22},{"ruleId":"207","severity":1,"message":"236","line":14,"column":24,"nodeType":"209","messageId":"210","endLine":14,"endColumn":37},{"ruleId":"207","severity":1,"message":"208","line":2,"column":10,"nodeType":"209","messageId":"210","endLine":2,"endColumn":14},{"ruleId":"237","severity":1,"message":"238","line":26,"column":36,"nodeType":"239","endLine":26,"endColumn":38,"suggestions":"240"},{"ruleId":"207","severity":1,"message":"241","line":6,"column":10,"nodeType":"209","messageId":"210","endLine":6,"endColumn":17},{"ruleId":"207","severity":1,"message":"242","line":17,"column":11,"nodeType":"209","messageId":"210","endLine":17,"endColumn":20},{"ruleId":"213","severity":1,"message":"243","line":36,"column":85,"nodeType":"215","messageId":"216","endLine":36,"endColumn":87},{"ruleId":"213","severity":1,"message":"243","line":38,"column":84,"nodeType":"215","messageId":"216","endLine":38,"endColumn":86},{"ruleId":"213","severity":1,"message":"243","line":100,"column":40,"nodeType":"215","messageId":"216","endLine":100,"endColumn":42},{"ruleId":"244","severity":1,"message":"245","line":186,"column":40,"nodeType":"246","messageId":"247","endLine":186,"endColumn":42},{"ruleId":"213","severity":1,"message":"214","line":194,"column":35,"nodeType":"215","messageId":"216","endLine":194,"endColumn":37},{"ruleId":"207","severity":1,"message":"220","line":4,"column":33,"nodeType":"209","messageId":"210","endLine":4,"endColumn":44},{"ruleId":"207","severity":1,"message":"229","line":4,"column":46,"nodeType":"209","messageId":"210","endLine":4,"endColumn":59},{"ruleId":"207","severity":1,"message":"248","line":7,"column":3,"nodeType":"209","messageId":"210","endLine":7,"endColumn":22},{"ruleId":"207","severity":1,"message":"249","line":8,"column":3,"nodeType":"209","messageId":"210","endLine":8,"endColumn":28},{"ruleId":"207","severity":1,"message":"250","line":8,"column":30,"nodeType":"209","messageId":"210","endLine":8,"endColumn":56},{"ruleId":"207","severity":1,"message":"251","line":9,"column":21,"nodeType":"209","messageId":"210","endLine":9,"endColumn":44},{"ruleId":"207","severity":1,"message":"252","line":9,"column":46,"nodeType":"209","messageId":"210","endLine":9,"endColumn":61},{"ruleId":"207","severity":1,"message":"253","line":10,"column":3,"nodeType":"209","messageId":"210","endLine":10,"endColumn":21},{"ruleId":"207","severity":1,"message":"230","line":10,"column":23,"nodeType":"209","messageId":"210","endLine":10,"endColumn":34},{"ruleId":"207","severity":1,"message":"231","line":10,"column":36,"nodeType":"209","messageId":"210","endLine":10,"endColumn":50},{"ruleId":"207","severity":1,"message":"254","line":12,"column":25,"nodeType":"209","messageId":"210","endLine":12,"endColumn":42},{"ruleId":"207","severity":1,"message":"255","line":17,"column":31,"nodeType":"209","messageId":"210","endLine":17,"endColumn":52},{"ruleId":"207","severity":1,"message":"256","line":311,"column":10,"nodeType":"209","messageId":"210","endLine":311,"endColumn":23},{"ruleId":"207","severity":1,"message":"257","line":1,"column":16,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"218","line":1,"column":27,"nodeType":"209","messageId":"210","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"258","line":4,"column":9,"nodeType":"209","messageId":"210","endLine":4,"endColumn":24},{"ruleId":"207","severity":1,"message":"226","line":13,"column":19,"nodeType":"209","messageId":"210","endLine":13,"endColumn":27},{"ruleId":"213","severity":1,"message":"214","line":23,"column":23,"nodeType":"215","messageId":"216","endLine":23,"endColumn":25},{"ruleId":"244","severity":1,"message":"245","line":62,"column":40,"nodeType":"246","messageId":"247","endLine":62,"endColumn":42},{"ruleId":"213","severity":1,"message":"214","line":19,"column":14,"nodeType":"215","messageId":"216","endLine":19,"endColumn":16},{"ruleId":"207","severity":1,"message":"259","line":10,"column":11,"nodeType":"209","messageId":"210","endLine":10,"endColumn":19},{"ruleId":"207","severity":1,"message":"260","line":1,"column":8,"nodeType":"209","messageId":"210","endLine":1,"endColumn":13},{"ruleId":"237","severity":1,"message":"261","line":12,"column":9,"nodeType":"239","endLine":12,"endColumn":18,"suggestions":"262"},{"ruleId":"237","severity":1,"message":"261","line":20,"column":8,"nodeType":"239","endLine":20,"endColumn":10,"suggestions":"263"},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'RegressionTesting' is defined but never used.","'createAsyncThunk' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Route' is defined but never used.","'useEffect' is defined but never used.","'reportsSlice' is defined but never used.","'selectCurId' is defined but never used.","'useDispatch' is defined but never used.","'soilTypes' is defined but never used.","'useSelector' is defined but never used.","'selectPage' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'baerInitializeSlice' is defined but never used.","'ReactDOM' is defined but never used.","'selectReports' is defined but never used.","'setSoilType' is defined but never used.","'selectSoilType' is defined but never used.","'_default' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'finalValue' is assigned a value but never used.","'setFinalValue' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'notes'. Either include it or remove the dependency array.","ArrayExpression",["266"],"'makeCSV' is defined but never used.","'curReport' is assigned a value but never used.","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'selectInitialVolume' is defined but never used.","'selectInfiltrometerRadius' is defined but never used.","'selectInfiltrometerSuction' is defined but never used.","'setInfiltrometerSuction' is defined but never used.","'setTimeInterval' is defined but never used.","'selectTimeInterval' is defined but never used.","'setSecondsElapsed' is defined but never used.","'addReadingWithGeoData' is defined but never used.","'createWrapper' is defined but never used.","'Component' is defined but never used.","'SeverityRatings' is defined but never used.","'dispatch' is assigned a value but never used.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.",["267"],["268"],"no-global-assign","no-unsafe-negation",{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},"Update the dependencies array to be: [notes]",{"range":"275","text":"276"},"Update the dependencies array to be: [audio, playing]",{"range":"277","text":"278"},"Update the dependencies array to be: [audio]",{"range":"279","text":"280"},[1133,1135],"[notes]",[328,337],"[audio, playing]",[556,558],"[audio]"]