[{"E:\\Infiltrometer\\infiltrometer21\\src\\index.js":"1","E:\\Infiltrometer\\infiltrometer21\\src\\App.js":"2","E:\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js":"3","E:\\Infiltrometer\\infiltrometer21\\src\\app\\store.js":"4","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ShowReportsButon.js":"5","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js":"6","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js":"7","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js":"8","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js":"9","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js":"10","E:\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js":"11","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js":"12","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js":"13","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js":"14","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js":"15","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js":"16","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js":"17","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js":"18","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js":"19","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js":"20","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js":"21","E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js":"22","E:\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js":"23"},{"size":707,"mtime":1632315152597,"results":"24","hashOfConfig":"25"},{"size":1727,"mtime":1633388329384,"results":"26","hashOfConfig":"25"},{"size":5151,"mtime":1631899423581,"results":"27","hashOfConfig":"25"},{"size":946,"mtime":1632845148787,"results":"28","hashOfConfig":"25"},{"size":504,"mtime":1631964263984,"results":"29","hashOfConfig":"25"},{"size":1813,"mtime":1633389090259,"results":"30","hashOfConfig":"25"},{"size":1085,"mtime":1632005081692,"results":"31","hashOfConfig":"25"},{"size":657,"mtime":1633130618461,"results":"32","hashOfConfig":"25"},{"size":547,"mtime":1632655250899,"results":"33","hashOfConfig":"25"},{"size":2819,"mtime":1631899423578,"results":"34","hashOfConfig":"25"},{"size":1117,"mtime":1632780081472,"results":"35","hashOfConfig":"25"},{"size":9271,"mtime":1632005979115,"results":"36","hashOfConfig":"25"},{"size":202,"mtime":1631899423578,"results":"37","hashOfConfig":"25"},{"size":175,"mtime":1631965019821,"results":"38","hashOfConfig":"25"},{"size":1182,"mtime":1632845156587,"results":"39","hashOfConfig":"25"},{"size":2364,"mtime":1633523510379,"results":"40","hashOfConfig":"25"},{"size":393,"mtime":1632845160633,"results":"41","hashOfConfig":"25"},{"size":9614,"mtime":1633524434450,"results":"42","hashOfConfig":"25"},{"size":1412,"mtime":1633127811752,"results":"43","hashOfConfig":"25"},{"size":5242,"mtime":1633386001759,"results":"44","hashOfConfig":"25"},{"size":3206,"mtime":1633014963635,"results":"45","hashOfConfig":"25"},{"size":1811,"mtime":1633273771458,"results":"46","hashOfConfig":"25"},{"size":202,"mtime":1633277181040,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"c42c6c",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"E:\\Infiltrometer\\infiltrometer21\\src\\index.js",[],["106","107"],"E:\\Infiltrometer\\infiltrometer21\\src\\App.js",["108","109"],"import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport BaerInitializeView from './features/baer/baer-initialize/BaerInitializeView';\r\nimport BaerReplicationView from './features/baer/baer-replication/BaerReplicationView';\r\nimport BaerResultsView from './features/baer/baer-results/BaerResultsView';\r\nimport { ShowReportsButton } from './features/reports/ShowReportsButon';\r\nimport { RegressionTesting } from './features/regression/RegressionTesting';\r\nimport { Redirector } from './features/page-redirection/Redirector';\r\nimport { NavBar } from './features/navBar/NavBar';\r\nconst  App = ()=> {\r\n  return (\r\n    <BrowserRouter>\r\n          <NavBar/>\r\n          <Redirector/>\r\n          <Switch>\r\n           \r\n            <Route exact path =\"/Infiltrometer/\">\r\n              <div>\r\n                <h1>\r\n                  Home Page\r\n                </h1>\r\n              </div>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-initialize\">\r\n              <BaerInitializeView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-replication\">\r\n              <BaerReplicationView/>\r\n            </Route>\r\n            <Route exact path =\"/Infiltrometer/baer-results\">\r\n              <BaerResultsView/>\r\n            </Route>\r\n             <Route exact path =\"/Infiltrometer/testing/regression\">\r\n              <RegressionTesting/>\r\n            </Route>\r\n            \r\n             <Route exact path =\"/Infiltrometer/how-to\">\r\n               <h1>\r\n                  How-To Page\r\n                </h1>\r\n            </Route>\r\n\r\n          </Switch>\r\n          \r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\serviceWorker.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\app\\store.js",["110"],"import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport baerInitializeReducer from '../features/baer/baer-initialize/bear-initializeSlice';\r\nimport baerReplicationReducer from '../features/baer/baer-replication/bear-replicationSlice';\r\nimport baerResultsReducer from '../features/baer/baer-results/bear-resultsSlice';\r\nimport reportsSlice from '../features/reports/reportsSlice';\r\nimport {reducer as reduxFormReducer} from 'redux-form'\r\nimport  redirectReducer  from '../features/page-redirection/redirector-slice';\r\n\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    baerInitialize: baerInitializeReducer,\r\n    baerReplication: baerReplicationReducer,\r\n    baerResults: baerResultsReducer,\r\n    counter: counterReducer,\r\n    reports: reportsSlice,\r\n    form: reduxFormReducer,\r\n    redirector: redirectReducer\r\n  },\r\n});\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\ShowReportsButon.js",["111","112","113"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {selectReports\r\n} from './reportsSlice';\r\n\r\nlet reports;\r\nfunction PrintReports(){\r\n  reports = useSelector(selectReports)\r\n  console.log(reports);\r\n}\r\n\r\nexport function ShowReportsButton() {\r\n    const reports = useSelector(selectReports);\r\n\r\n    return(\r\n    <div>\r\n        <button onClick={()=>console.log(reports)}>\r\n            Show Reports in Store\r\n        </button>\r\n    </div>\r\n\r\n  );\r\n\r\n}","E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\reportsSlice.js",["114"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\n//empty array of reports\r\nconst initialState = {\r\n    reports:[],\r\n    curId: -1\r\n    \r\n};\r\n\r\nexport const reportsSlice = createSlice({\r\n  name: 'reports',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n     newReport: (state, action) => {\r\n      // Push a new report onto the report stack and increment the id\r\n      state.curId++;\r\n      state.reports = [...state.reports,(\r\n        {\r\n            id: state.curId,\r\n            date: action.payload.date,\r\n            protocol: action.payload.protocol,\r\n            readings: [],\r\n            infiltrometerData: action.payload.infiltrometerData,\r\n            gatheringData: true,\r\n        }\r\n      )];\r\n\r\n    },\r\n\r\n    /** Adds a reading to the report with the provided id\r\n     * action needs an \r\n     * @param id\r\n     * @param reading\r\n     * \r\n     */\r\n    addReading: (state, action)=>{\r\n      //add the reading to the end of the list of readings\r\n        state.reports[state.curId].readings =\r\n        [...state.reports[state.curId].readings, \r\n        action.payload]; \r\n    },\r\n    //sets the current gathering data report\r\n    setGatheringData: (state, action)=>{\r\n      state.reports[state.curId].gatheringData = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { newReport, addReading, setGatheringData } = reportsSlice.actions;\r\nexport const selectReports = (state) => state.reports.reports;\r\nexport const selectCurId = (state) => state.reports.curId;\r\nexport const selectCurReadingID = (state) => state.reports.reports[state.reports.curId].readings.length - 1;\r\nexport const selectGatheringData = (state) => state.reports.reports[state.reports.curId].gatheringData;\r\nexport default reportsSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\RegressionTesting.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\Redirector.js",["115","116","117"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"./redirector-slice\";\r\nimport { useLocation, Redirect } from \"react-router\";\r\nimport { Route } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\n//Used to redirect to new pages from global state\r\n export const Redirector = () =>{\r\n\r\n    const curPage = useLocation().pathname;\r\n    const page = useSelector(selectPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    \r\n    //reset the page\r\n    if (curPage == page) {\r\n        dispatch(setPage(null));\r\n        return null;\r\n    }\r\n    \r\n    \r\n\r\n    return page!=null ? <Redirect to ={page}/> : null;\r\n  }\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\features\\page-redirection\\redirector-slice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterSlice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\app\\soilTypes.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\regression\\regression-js.js",["118"],"const DEFAULT_OPTIONS = { order: 2, precision: 2, period: null };\r\n\r\n/**\r\n* Determine the coefficient of determination (r^2) of a fit from the observations\r\n* and predictions.\r\n*\r\n* @param {Array<Array<number>>} data - Pairs of observed x-y values\r\n* @param {Array<Array<number>>} results - Pairs of observed predicted x-y values\r\n*\r\n* @return {number} - The r^2 value, or NaN if one cannot be calculated.\r\n*/\r\nfunction determinationCoefficient(data, results) {\r\n  const predictions = [];\r\n  const observations = [];\r\n\r\n  data.forEach((d, i) => {\r\n    if (d[1] !== null) {\r\n      observations.push(d);\r\n      predictions.push(results[i]);\r\n    }\r\n  });\r\n\r\n  const sum = observations.reduce((a, observation) => a + observation[1], 0);\r\n  const mean = sum / observations.length;\r\n\r\n  const ssyy = observations.reduce((a, observation) => {\r\n    const difference = observation[1] - mean;\r\n    return a + (difference * difference);\r\n  }, 0);\r\n\r\n  const sse = observations.reduce((accum, observation, index) => {\r\n    const prediction = predictions[index];\r\n    const residual = observation[1] - prediction[1];\r\n    return accum + (residual * residual);\r\n  }, 0);\r\n\r\n  return 1 - (sse / ssyy);\r\n}\r\n\r\n/**\r\n* Determine the solution of a system of linear equations A * x = b using\r\n* Gaussian elimination.\r\n*\r\n* @param {Array<Array<number>>} input - A 2-d matrix of data in row-major form [ A | b ]\r\n* @param {number} order - How many degrees to solve for\r\n*\r\n* @return {Array<number>} - Vector of normalized solution coefficients matrix (x)\r\n*/\r\nfunction gaussianElimination(input, order) {\r\n  const matrix = input;\r\n  const n = input.length - 1;\r\n  const coefficients = [order];\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let maxrow = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxrow])) {\r\n        maxrow = j;\r\n      }\r\n    }\r\n\r\n    for (let k = i; k < n + 1; k++) {\r\n      const tmp = matrix[k][i];\r\n      matrix[k][i] = matrix[k][maxrow];\r\n      matrix[k][maxrow] = tmp;\r\n    }\r\n\r\n    for (let j = i + 1; j < n; j++) {\r\n      for (let k = n; k >= i; k--) {\r\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let j = n - 1; j >= 0; j--) {\r\n    let total = 0;\r\n    for (let k = j + 1; k < n; k++) {\r\n      total += matrix[k][j] * coefficients[k];\r\n    }\r\n\r\n    coefficients[j] = (matrix[n][j] - total) / matrix[j][j];\r\n  }\r\n\r\n  return coefficients;\r\n}\r\n\r\n/**\r\n* Round a number to a precision, specificed in number of decimal places\r\n*\r\n* @param {number} number - The number to round\r\n* @param {number} precision - The number of decimal places to round to:\r\n*                             > 0 means decimals, < 0 means powers of 10\r\n*\r\n*\r\n* @return {numbr} - The number, rounded\r\n*/\r\nfunction round(number, precision) {\r\n  const factor = 10 ** precision;\r\n  return Math.round(number * factor) / factor;\r\n}\r\n\r\n/**\r\n* The set of all fitting methods\r\n*\r\n* @namespace\r\n*/\r\nexport const methods = {\r\n  linear(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    let len = 0;\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        len++;\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0];\r\n        sum[3] += data[n][0] * data[n][1];\r\n        sum[4] += data[n][1] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n    const rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n    const gradient = run === 0 ? 0 : round(rise / run, options.precision);\r\n    const intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round((gradient * x) + intercept, options.precision)]\r\n    );\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [gradient, intercept],\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n      string: intercept === 0 ? `y = ${gradient}x` : `y = ${gradient}x + ${intercept}`,\r\n    };\r\n  },\r\n\r\n  exponential(data, options) {\r\n    const sum = [0, 0, 0, 0, 0, 0];\r\n\r\n    for (let n = 0; n < data.length; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += data[n][0];\r\n        sum[1] += data[n][1];\r\n        sum[2] += data[n][0] * data[n][0] * data[n][1];\r\n        sum[3] += data[n][1] * Math.log(data[n][1]);\r\n        sum[4] += data[n][0] * data[n][1] * Math.log(data[n][1]);\r\n        sum[5] += data[n][0] * data[n][1];\r\n      }\r\n    }\r\n\r\n    const denominator = ((sum[1] * sum[2]) - (sum[5] * sum[5]));\r\n    const a = Math.exp(((sum[2] * sum[3]) - (sum[5] * sum[4])) / denominator);\r\n    const b = ((sum[1] * sum[4]) - (sum[5] * sum[3])) / denominator;\r\n    const coeffA = round(a, options.precision);\r\n    const coeffB = round(b, options.precision);\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(coeffA * Math.exp(coeffB * x), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}e^(${coeffB}x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  logarithmic(data, options) {\r\n    const sum = [0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += data[n][1] * Math.log(data[n][0]);\r\n        sum[2] += data[n][1];\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const a = ((len * sum[1]) - (sum[2] * sum[0])) / ((len * sum[3]) - (sum[0] * sum[0]));\r\n    const coeffB = round(a, options.precision);\r\n    const coeffA = round((sum[2] - (coeffB * sum[0])) / len, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA + (coeffB * Math.log(x)), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA} + ${coeffB} ln(x)`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  power(data, options) {\r\n    const sum = [0, 0, 0, 0, 0];\r\n    const len = data.length;\r\n\r\n    for (let n = 0; n < len; n++) {\r\n      if (data[n][1] !== null) {\r\n        sum[0] += Math.log(data[n][0]);\r\n        sum[1] += Math.log(data[n][1]) * Math.log(data[n][0]);\r\n        sum[2] += Math.log(data[n][1]);\r\n        sum[3] += (Math.log(data[n][0]) ** 2);\r\n      }\r\n    }\r\n\r\n    const b = ((len * sum[1]) - (sum[0] * sum[2])) / ((len * sum[3]) - (sum[0] ** 2));\r\n    const a = ((sum[2] - (b * sum[0])) / len);\r\n    const coeffA = round(Math.exp(a), options.precision);\r\n    const coeffB = round(b, options.precision);\r\n\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(round(coeffA * (x ** coeffB), options.precision), options.precision),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    return {\r\n      points,\r\n      predict,\r\n      equation: [coeffA, coeffB],\r\n      string: `y = ${coeffA}x^${coeffB}`,\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n\r\n  polynomial(data, options) {\r\n    const lhs = [];\r\n    const rhs = [];\r\n    let a = 0;\r\n    let b = 0;\r\n\r\n    const len = data.length;\r\n    const k = options.order + 1;\r\n\r\n    for (let i = 1; i < k; i++) {\r\n      for (let l = 0; l < len; l++) {\r\n        if (data[l][1] !== null) {\r\n          a += (data[l][0] ** i) * data[l][1];\r\n        }\r\n      }\r\n\r\n      lhs.push(a);\r\n      a = 0;\r\n\r\n      const c = [];\r\n      for (let j = 1; j < k; j++) {\r\n        for (let l = 0; l < len; l++) {\r\n          if (data[l][1] !== null) {\r\n            b += data[l][0] ** (i + j);\r\n          }\r\n        }\r\n        c.push(b);\r\n        b = 0;\r\n      }\r\n      rhs.push(c);\r\n    }\r\n    rhs.push(lhs);\r\n\r\n    const coefficients = [0,...gaussianElimination(rhs, k).map(v => round(v, options.precision))];\r\n    const predict = x => ([\r\n      round(x, options.precision),\r\n      round(\r\n        coefficients.reduce((sum, coeff, power) => sum + (coeff * (x ** power)), 0),\r\n        options.precision,\r\n      ),\r\n    ]);\r\n\r\n    const points = data.map(point => predict(point[0]));\r\n\r\n    let string = 'y = ';\r\n    for (let i = coefficients.length - 1; i >= 0; i--) {\r\n      if (i > 1) {\r\n        string += `${coefficients[i]}x^${i} + `;\r\n      } else if (i === 1) {\r\n        string += `${coefficients[i]}x + `;\r\n      } else {\r\n        string += coefficients[i];\r\n      }\r\n    }\r\n\r\n    return {\r\n      string,\r\n      points,\r\n      predict,\r\n      equation: [...coefficients].reverse(),\r\n      r2: round(determinationCoefficient(data, points), options.precision),\r\n    };\r\n  },\r\n};\r\n\r\nfunction createWrapper() {\r\n  const reduce = (accumulator, name) => ({\r\n    _round: round,\r\n    ...accumulator,\r\n    [name](data, supplied) {\r\n      return methods[name](data, {\r\n        ...DEFAULT_OPTIONS,\r\n        ...supplied,\r\n      });\r\n    },\r\n  });\r\n\r\n  return Object.keys(methods).reduce(reduce, {});\r\n}\r\n","E:\\Infiltrometer\\infiltrometer21\\src\\features\\counter\\counterAPI.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\reports\\protocols.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\bear-replicationSlice.js",[],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\bear-initializeSlice.js",["119","120","121"],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\bear-resultsSlice.js",["122"],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState = {\r\n    volume: 0,\r\n    secondsElapsed: 0,\r\n};\r\n\r\nexport const baerResultsSlice = createSlice({\r\n    name: 'baerResults',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n});\r\nexport default baerResultsSlice.reducer;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-initialize\\BaerInitializeView.js",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140"],"E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\BaerResultsView.js",["141","142"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {selectReports} from \"../../reports/reportsSlice\";\r\nimport Table from \"./table\";\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\n\r\n\r\nconst  BaerResultsView = ()=> {\r\n  const reports = useSelector(selectReports);\r\n  const dispatch = useDispatch();\r\n\r\n  return (<div class=\"container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8 text-lg-center\">\r\n          <h1>Baer Results View</h1>\r\n\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-2\"></div>\r\n        <div class=\"col-sm-8\">\r\n          <div class=\"container\">\r\n              <Table></Table>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-sm-2\"></div>\r\n      </div>\r\n      <div className=\"row\">\r\n          <div className=\"col-sm-2\"></div>\r\n          <div className=\"col-sm-8 text-lg-center\">\r\n              <button class=\"btn btn-dark\" onClick ={\r\n                ()=>dispatch(setPage(\"/Infiltrometer/baer-initialize\"))\r\n              }>  \r\n              New Test</button>\r\n          \r\n          </div>\r\n          <div className=\"col-sm-2\"></div>\r\n      </div>\r\n    </div>);\r\n}\r\nexport default BaerResultsView;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-replication\\BaerReplicationView.js",["143","144","145","146","147","148","149","150","151","152"],"//The Page we are displaying for the baer Initialize view\r\nimport { Link } from 'react-router-dom';\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setVolume, setSecondsElapsed, selectLastVolume, setLastVolume } from './bear-replicationSlice';\r\nimport reportsSlice, {addReading, selectCurId, selectReports, selectCurReadingID, setGatheringData} from '../../reports/reportsSlice';\r\nimport { selectTimeInterval, selectInitialVolume, setSoilType, selectSoilType } from '../baer-initialize/bear-initializeSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport \"./timer.css\";\r\nimport _default from 'react-overlays/esm/Modal';\r\nimport { useEffect } from 'react';\r\nimport { setPage } from '../../page-redirection/redirector-slice';\r\nimport  Table  from '../baer-results/table';\r\n\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Time is up!</div>;\r\n  }\r\n  return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Time remaining:</div>\r\n        <div className=\"value\">{remainingTime}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n  );\r\n};\r\n\r\nconst BaerReplicationView = () => {\r\n\r\n  //Gets the current reading in the baer-replicationSlice\r\n  const timeInterval = useSelector(selectTimeInterval);\r\n  const initialVolume = Number(useSelector(selectInitialVolume));\r\n  const lastVolume = Number(useSelector(selectLastVolume));\r\n\r\n  //the max allowed volume\r\n  const maxVolume = Math.min(initialVolume, lastVolume);\r\n  const dispatch = useDispatch();\r\n\r\n  const initializeState = {\r\n    timerIsPlaying: false,\r\n    key: 0,\r\n  };\r\n\r\n  const [state, setState] = useState(initializeState);\r\n\r\n  //use to set the timer is playing variable\r\n  const setPlaying = (playing)=>setState({...state, timerIsPlaying:playing});\r\n  const curID = useSelector(selectCurReadingID);\r\n\r\n  function endProtocol(){\r\n\r\n    //mark that we are done gathering data on this report\r\n    dispatch(setGatheringData(false));\r\n\r\n\r\n    //go to the results page\r\n    dispatch(setPage(\"/Infiltrometer/baer-results\"))\r\n  }\r\n\r\n  // This function will be called when the timer reaches zero.\r\n  function getVolumeReading() {\r\n\r\n      //stop the timer from running\r\n      setPlaying(false);\r\n\r\n      let volumeReading = prompt(\"Enter volumetric data below.\");\r\n      let validated = false;\r\n\r\n      // Validate user input -------------------------------------------------------------------------\r\n      while(validated == false) {\r\n          // If user hits the cancel button\r\n          if (volumeReading == null)\r\n              return;\r\n          // Volume reading should be a non-negative number that is less than previous/initial volume.\r\n          else if (volumeReading > maxVolume || volumeReading < 0 || isNaN(parseFloat(volumeReading))) {\r\n              window.confirm(\"Invalid input! Make sure your volume reading is a number less than or equal to: \" + maxVolume);\r\n              volumeReading = prompt(\"Enter volumetric data below.\");\r\n          }\r\n          else\r\n              validated = true;\r\n      }\r\n      // ---------------------------------------------------------------------------------------------\r\n\r\n      //calculate the total number of elapsed seconds\r\n      let secondsElapsed = (curID + 1) * timeInterval;\r\n      \r\n      //set the volume and time in the replication store\r\n      dispatch(setLastVolume(volumeReading));\r\n      dispatch(setVolume(volumeReading));\r\n      dispatch(setSecondsElapsed(secondsElapsed));\r\n      \r\n      //add the reading using the reports slice\r\n      dispatch(addReading({volume: volumeReading, secondsElapsed}));\r\n  }\r\n\r\n  return (\r\n      <div class=\"container-fluid\">\r\n                  <h1 class=\"container-fluid row\">\r\n            Current Replication: {curID}\r\n          </h1>\r\n        <div class = \"container-fluid timer-wrapper\">\r\n          <CountdownCircleTimer\r\n              key={state.key}\r\n              isPlaying = {state.timerIsPlaying}\r\n              duration={Number(timeInterval)}\r\n              colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n              onComplete={() => getVolumeReading()}\r\n          >\r\n            {renderTime}\r\n          </CountdownCircleTimer>\r\n        </div>\r\n\r\n        <div class=\"container-fluid\">\r\n          <div class=\"row container-fluid\">\r\n             <button type=\"submit\" class=\"btn btn-primary\" disabled={state.timerIsPlaying} onClick = {()=>{\r\n              setState({\r\n                timerIsPlaying: true,\r\n                key: state.key+1}\r\n                );\r\n\r\n             }}>{\r\n            \r\n            !state.timerIsPlaying? \"Start Replication\" : \"Replication Running...\"\r\n            \r\n            }</button>\r\n            <button type=\"submit\" class=\"btn btn-secondary\" onClick = {endProtocol}>\r\n              End Protocol\r\n            </button>\r\n          </div>\r\n           \r\n        </div>\r\n         <div class=\"container-fluid\">\r\n        <Table/>\r\n        </div>\r\n      </div>);\r\n\r\n\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<BaerReplicationView />, rootElement);\r\nexport default BaerReplicationView;","E:\\Infiltrometer\\infiltrometer21\\src\\features\\baer\\baer-results\\table.js",["153","154","155","156"],"import React, {Component, useEffect, useState} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCurId, selectReports} from \"../../reports/reportsSlice\";\r\n\r\nconst Table =()=> {\r\n    const rawReports = useSelector(selectReports);\r\n\r\n    const curReport = rawReports[useSelector(selectCurId)];\r\n\r\n\r\n    const [state, setState] = useState(filterReadings());\r\n\r\n    /**\r\n     * Find ml/min for a reading\r\n     * @param {The current reading index} i\r\n     */\r\n    function findRate(i){\r\n        if(i>0){\r\n\r\n            let deltaV = curReport.readings[i-1].volume - curReport.readings[i].volume;\r\n            let deltaT = curReport.readings[i].secondsElapsed - curReport.readings[i-1].secondsElapsed;\r\n            return (deltaV)/(deltaT/60);\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n    /**\r\n     * Create an array to use for a table row from reading data\r\n     */\r\n    function filterReadings(){\r\n        let readingsArr = [];\r\n        for(let i = 0; i < curReport.readings.length; i++){\r\n            readingsArr[i] = {\r\n\r\n                id: i,\r\n                Time: curReport.readings[i].secondsElapsed,\r\n                Volume: curReport.readings[i].volume,\r\n                Rate: findRate(i)\r\n\r\n            };\r\n        }\r\n        return {reports: readingsArr};\r\n    }\r\n\r\n    /**\r\n     * map state to table elements\r\n     */\r\n    function renderTableData() {\r\n        return filterReadings().reports.map((report, index) => {\r\n            const {id, Time, Volume,Rate} = report //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{Time}</td>\r\n                    <td>{Volume}</td>\r\n                    <td>{Rate}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * create header for table\r\n     */\r\n    function renderTableHeader() {\r\n        let header = Object.keys(state.reports[0])\r\n        return header.map((key, index) => {\r\n            console.log(key.toUpperCase())\r\n            if (key.toUpperCase() === \"ID\") {\r\n                return <th key={index}>{key.toUpperCase()}</th>\r\n            }\r\n            if (key.toUpperCase() === \"TIME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (s)\"}</th>\r\n            }\r\n\r\n\r\n            if (key.toUpperCase() === \"VOLUME\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL)\"}</th>\r\n            }\r\n            if (key.toUpperCase() === \"RATE\") {\r\n                return <th key={index}>{key.toUpperCase() + \" (mL/min)\"}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n     //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\r\n        return (\r\n            <div>\r\n                <table class=\"table table-light table-striped table-hover\" id='students'>\r\n                    <tbody>\r\n                    <tr class=\"table-dark\">{renderTableHeader()}</tr>\r\n                    {renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\n\r\nexport default Table //exporting a component make it reusable and this is the beauty of react","E:\\Infiltrometer\\infiltrometer21\\src\\features\\navBar\\NavBar.js",["157","158","159","160"],"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectPage, setPage } from \"../page-redirection/redirector-slice\";\r\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nexport const NavBar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const initialState = {\r\n        collapsed: false\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n    return(\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n            <Navbar.Brand>Infiltrometer</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                    <Nav.Link onClick = {()=>dispatch(setPage(\"/Infiltrometer\"))}>\r\n                        Home\r\n                    </Nav.Link>\r\n                    <Nav.Link onClick = {()=>dispatch(setPage(\"/Infiltrometer/how-to\"))}>\r\n                        How To Use\r\n                    </Nav.Link>\r\n                    <NavDropdown title=\"New Test\" id=\"new-test-drop-down\">\r\n                        <NavDropdown.Item onClick ={()=>dispatch(setPage(\"/Infiltrometer/baer-initialize/\"))}>\r\n                            BAER protocol</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n                <Nav>\r\n                    <Nav.Link href=\"https://github.com/2021-SD-UI/Infiltrometer/\">\r\n                        GitHub\r\n                    </Nav.Link>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n\r\n\r\n}","E:\\Infiltrometer\\infiltrometer21\\src\\app\\infiltrometerType.js",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":3,"column":40,"nodeType":"167","messageId":"168","endLine":3,"endColumn":44},{"ruleId":"165","severity":1,"message":"169","line":7,"column":10,"nodeType":"167","messageId":"168","endLine":7,"endColumn":27},{"ruleId":"165","severity":1,"message":"170","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":25},{"ruleId":"165","severity":1,"message":"171","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"172","line":2,"column":23,"nodeType":"167","messageId":"168","endLine":2,"endColumn":34},{"ruleId":"165","severity":1,"message":"173","line":7,"column":10,"nodeType":"167","messageId":"168","endLine":7,"endColumn":22},{"ruleId":"165","severity":1,"message":"174","line":1,"column":10,"nodeType":"167","messageId":"168","endLine":1,"endColumn":26},{"ruleId":"165","severity":1,"message":"175","line":4,"column":10,"nodeType":"167","messageId":"168","endLine":4,"endColumn":15},{"ruleId":"165","severity":1,"message":"176","line":5,"column":10,"nodeType":"167","messageId":"168","endLine":5,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":16,"column":17,"nodeType":"179","messageId":"180","endLine":16,"endColumn":19},{"ruleId":"165","severity":1,"message":"181","line":311,"column":10,"nodeType":"167","messageId":"168","endLine":311,"endColumn":23},{"ruleId":"165","severity":1,"message":"174","line":1,"column":10,"nodeType":"167","messageId":"168","endLine":1,"endColumn":26},{"ruleId":"165","severity":1,"message":"172","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":21},{"ruleId":"165","severity":1,"message":"182","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":19},{"ruleId":"165","severity":1,"message":"174","line":1,"column":10,"nodeType":"167","messageId":"168","endLine":1,"endColumn":26},{"ruleId":"165","severity":1,"message":"166","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":14},{"ruleId":"165","severity":1,"message":"171","line":3,"column":16,"nodeType":"167","messageId":"168","endLine":3,"endColumn":24},{"ruleId":"165","severity":1,"message":"183","line":5,"column":33,"nodeType":"167","messageId":"168","endLine":5,"endColumn":44},{"ruleId":"165","severity":1,"message":"184","line":5,"column":46,"nodeType":"167","messageId":"168","endLine":5,"endColumn":59},{"ruleId":"165","severity":1,"message":"185","line":7,"column":10,"nodeType":"167","messageId":"168","endLine":7,"endColumn":29},{"ruleId":"165","severity":1,"message":"186","line":8,"column":3,"nodeType":"167","messageId":"168","endLine":8,"endColumn":28},{"ruleId":"165","severity":1,"message":"187","line":8,"column":30,"nodeType":"167","messageId":"168","endLine":8,"endColumn":56},{"ruleId":"165","severity":1,"message":"188","line":9,"column":1,"nodeType":"167","messageId":"168","endLine":9,"endColumn":17},{"ruleId":"165","severity":1,"message":"189","line":10,"column":1,"nodeType":"167","messageId":"168","endLine":10,"endColumn":24},{"ruleId":"165","severity":1,"message":"190","line":10,"column":26,"nodeType":"167","messageId":"168","endLine":10,"endColumn":41},{"ruleId":"165","severity":1,"message":"191","line":10,"column":43,"nodeType":"167","messageId":"168","endLine":10,"endColumn":61},{"ruleId":"165","severity":1,"message":"192","line":11,"column":25,"nodeType":"167","messageId":"168","endLine":11,"endColumn":42},{"ruleId":"165","severity":1,"message":"193","line":13,"column":16,"nodeType":"167","messageId":"168","endLine":13,"endColumn":33},{"ruleId":"165","severity":1,"message":"194","line":79,"column":9,"nodeType":"167","messageId":"168","endLine":79,"endColumn":26},{"ruleId":"165","severity":1,"message":"195","line":80,"column":19,"nodeType":"167","messageId":"168","endLine":80,"endColumn":35},{"ruleId":"165","severity":1,"message":"196","line":80,"column":80,"nodeType":"167","messageId":"168","endLine":80,"endColumn":90},{"ruleId":"197","severity":1,"message":"198","line":112,"column":6,"nodeType":"199","endLine":112,"endColumn":8,"suggestions":"200"},{"ruleId":"177","severity":1,"message":"201","line":118,"column":50,"nodeType":"179","messageId":"180","endLine":118,"endColumn":52},{"ruleId":"165","severity":1,"message":"166","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":14},{"ruleId":"165","severity":1,"message":"202","line":11,"column":9,"nodeType":"167","messageId":"168","endLine":11,"endColumn":16},{"ruleId":"165","severity":1,"message":"166","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":14},{"ruleId":"165","severity":1,"message":"203","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":16},{"ruleId":"165","severity":1,"message":"204","line":7,"column":8,"nodeType":"167","messageId":"168","endLine":7,"endColumn":20},{"ruleId":"165","severity":1,"message":"183","line":7,"column":35,"nodeType":"167","messageId":"168","endLine":7,"endColumn":46},{"ruleId":"165","severity":1,"message":"184","line":7,"column":48,"nodeType":"167","messageId":"168","endLine":7,"endColumn":61},{"ruleId":"165","severity":1,"message":"205","line":8,"column":51,"nodeType":"167","messageId":"168","endLine":8,"endColumn":62},{"ruleId":"165","severity":1,"message":"206","line":8,"column":64,"nodeType":"167","messageId":"168","endLine":8,"endColumn":78},{"ruleId":"165","severity":1,"message":"207","line":11,"column":8,"nodeType":"167","messageId":"168","endLine":11,"endColumn":16},{"ruleId":"165","severity":1,"message":"176","line":12,"column":10,"nodeType":"167","messageId":"168","endLine":12,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":71,"column":23,"nodeType":"179","messageId":"180","endLine":71,"endColumn":25},{"ruleId":"165","severity":1,"message":"208","line":1,"column":16,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"176","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"165","severity":1,"message":"209","line":11,"column":19,"nodeType":"167","messageId":"168","endLine":11,"endColumn":27},{"ruleId":"210","severity":1,"message":"211","line":68,"column":40,"nodeType":"212","messageId":"213","endLine":68,"endColumn":42},{"ruleId":"165","severity":1,"message":"214","line":2,"column":23,"nodeType":"167","messageId":"168","endLine":2,"endColumn":34},{"ruleId":"165","severity":1,"message":"215","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":20},{"ruleId":"165","severity":1,"message":"216","line":13,"column":12,"nodeType":"167","messageId":"168","endLine":13,"endColumn":17},{"ruleId":"165","severity":1,"message":"209","line":13,"column":19,"nodeType":"167","messageId":"168","endLine":13,"endColumn":27},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ShowReportsButton' is defined but never used.","'combineReducers' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'PrintReports' is defined but never used.","'createAsyncThunk' is defined but never used.","'Route' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'createWrapper' is defined but never used.","'soilTypes' is defined but never used.","'selectCurId' is defined but never used.","'selectReports' is defined but never used.","'selectInitialVolume' is defined but never used.","'selectInfiltrometerRadius' is defined but never used.","'selectInfiltrometerSuction' is defined but never used.","'setInitialVolume' is defined but never used.","'setInfiltrometerSuction' is defined but never used.","'setTimeInterval' is defined but never used.","'selectTimeInterval' is defined but never used.","'setSecondsElapsed' is defined but never used.","'formValueSelector' is defined but never used.","'infiltrometerData' is assigned a value but never used.","'soilTypeSelected' is assigned a value but never used.","'soilValues' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadDataAtStart'. Either include it or remove the dependency array.","ArrayExpression",["219"],"Expected '!==' and instead saw '!='.","'reports' is assigned a value but never used.","'ReactDOM' is defined but never used.","'reportsSlice' is defined but never used.","'setSoilType' is defined but never used.","'selectSoilType' is defined but never used.","'_default' is defined but never used.","'Component' is defined but never used.","'setState' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useSelector' is defined but never used.","'selectPage' is defined but never used.","'state' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},"Update the dependencies array to be: [loadDataAtStart]",{"range":"222","text":"223"},[3401,3403],"[loadDataAtStart]"]